#!/usr/bin/env snakemake -s
## 
## Started 14th Jan 2020
##
## Izaskun Mallona
## GPLv3

import os.path as op
from glob import glob
from snakemake.utils import validate

# RUN_NAME  = 'SRR10974769'
#  # 3' v2 according to https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSM4286760
# CHEMISTRY = 'SC3Pv2'
# DEMUX = False
# GENOME = 'GRCh38'

# ## Folder structure start --------------------------------------------------------------------- ##

# #@FIXME to be moved to config, not hardcoded!
# BASE = op.join('/home', 'imallona', 'repeats_sc')
# NTHREADS = 50
# LOCAL_MEM_GB = 100

# ## @FIXME to be moved to config
# GENOME_URL = 'ftp://ftp.ensembl.org/pub/release-98/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz'
# # GENES_GTF_URL =  'ftp://ftp.ensembl.org/pub/release-98/gtf/homo_sapiens/Homo_sapiens.GRCh38.98.gtf.gz'
# GENES_GTF_URL = 'ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_33/gencode.v33.primary_assembly.annotation.gtf.gz'
# REP_GTF_URL = 'http://labshare.cshl.edu/shares/mhammelllab/www-data/TEtranscripts/TE_GTF/GRCh38_rmsk_TE.gtf.gz'
# # REP_GTF_URL = 'http://labshare.cshl.edu/shares/mhammelllab/www-data/TEtranscripts/TE_GTF/mm10_rmsk_TE.gtf.gz'
# DFAM_EMBL_URL = 'https://www.dfam.org/releases/current/families/Dfam.embl.gz'
# # config['transcriptome_url']= 'ftp://ftp.ensembl.org/pub/release-98/fasta/homo_sapiens/cdna/Homo_sapiens.GRCh38.cdna.all.fa.gz'
# config['transcriptome_url'] = 'ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_33/gencode.v33.pc_transcripts.fa.gz'

# CELLRANGER_HG38_URL = 'http://cf.10xgenomics.com/supp/cell-exp/refdata-cellranger-GRCh38-3.0.0.tar.gz'

# CELLRANGER_DB_URL = CELLRANGER_HG38_URL
# CELLRANGER_DB_ID = "refdata-cellranger-GRCh38-3.0.0"
# ## 

# GTF_MAKING_SCRIPT = '~/src/repeats_sc/04_snakemake/gtf_maker.R'
# GTF_PARSING_RSCRIPT = '~/src/repeats_sc/04_snakemake/gtf_parser.R'
# FEATURECOUNTS_RSCRIPT= '~/src/repeats_sc/04_snakemake/plot_featurecounts_profile.R'

# BOWTIE_BUILD = '/home/imallona/soft/bowtie/bowtie-1.2.3/bowtie-build'
# BOWTIE = '/home/imallona/soft/bowtie/bowtie-1.2.3/bowtie'


# ## @FIXME to be moved to config

# GTF_PARSING_RSCRIPT = '~/src/repeats_sc/04_snakemake/gtf_parser.R'

# BOWTIE_BUILD = '/home/imallona/soft/bowtie/bowtie-1.2.3/bowtie-build'
# BOWTIE = '/home/imallona/soft/bowtie/bowtie-1.2.3/bowtie'

# ##pigz 2.3.1
# PIGZ = '/usr/bin/pigz'
# BIOPYTHON_CONVERT='biopython.convert'
# STAR = '~/soft/star/STAR-2.7.3a/source/STAR'
# FEATURECOUNTS = '~/soft/subread/subread-2.0.0-source/bin/featureCounts'
# SALMON = '~/soft/salmon/salmon-1.1.0_linux_x86_64/bin/salmon'
# CELLRANGER = '~/soft/cellranger/cellranger-3.1.0/cellranger'
# BIOAWK = '~/soft/bioawk/bioawk'
# BEDTOOLS = '~/soft/bedtools/bedtools-2.29.2/bin/bedtools'
# # Rscript = '/usr/local/R/R-3.6.1/bin/Rscript'
# Rscript = '/usr/local/R/R-4.0.5/bin/Rscript'
# FASTQDUMP= '~/soft/sra-toools/sratoolkit.2.10.4-ubuntu64/bin/fastq-dump' # fastq-dump : 2.10.4
# PREFETCH= '~/soft/sra-toools/sratoolkit.2.10.4-ubuntu64/bin/prefetch' # fastq-dump : 2.10.4
# VDBVALIDATE= '~/soft/sra-toools/sratoolkit.2.10.4-ubuntu64/bin/vdb-validate' # fastq-dump : 2.10.4

# BEDOPS='~/soft/bedops/bedops-2.4.39/bin/bedops'

# GSE144357_srr = ['SRR10974769', 'SRR10974768']

## config file start ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

configfile: "config_01_repeats_SRR10974769_chromium.yaml"
# validate(config, op.join("schemas", "config.schema.yaml"))

# samples = pd.read_csv(config["samples"], sep = '\t').set_index("id", drop=False)

# print(op.join(config['base'], 'data', config['run_name']))

# samples_R2, = glob_wildcards(op.join(config['base'], "data", config['run_name'], "{sample}_1.fastq.gz"))
# samples_R1, = glob_wildcards(op.join(config['base'], "data", config['run_name'], "{sample}_2.fastq.gz"))
# samples_I3, = glob_wildcards(op.join(config['base'], "data", config['run_name'], "{sample}_3.fastq.gz"))

# ## 
# this is needed to be hardcoded/config file

try:
   if not op.exists(op.dirname(op.join(config['base'], 'annotation'))):
      os.makedirs(op.join(config['base'], 'annotation'))
except OSError as err:
   print(err)
      
for item in ['bowtie', 'star', 'salmon']:
   try:
      if not op.exists(op.dirname(op.join(config['base'], 'indices', item))):
         os.makedirs(op.join(config['base'], 'indices', item))
   except OSError as err:
      print(err)
      
## Folder structure end ----------------------------------------------------------------------- ##

include: "/home/imallona/src/repeats_sc/04_snakemake/chromium_flow_with_config.snmk"

def get_samples(fn):
   # samples = ['SRR10974768', 'SRR10974769'] # 68 is MARS-Seq
   samples = ['SRR10974769']
   return(samples)
 
rule all:
    input:
        # op.join(config['base'], 'indices', 'bowtie', 'repeatome', op.splitext(op.basename(config['rep_gtf_url']))[0] + '.1.ebwt'),
        # op.join(config['base'], 'indices', 'star', 'repeatome', 'chrName.txt'),
        # op.join(config['base'], 'indices', 'star', 'transcriptome', 'chrName.txt'),
        # op.join(config['base'], 'annotation', 'repeatome_from_' + op.splitext(op.basename(config['rep_gtf_url']))[0]+ '.fa.gz'),
        # expand(op.join(config['base'], 'runs', config['run_name'], config['run_name'] + '_pbmc_cellranger_regress_nCount_{regress_ncount}_nFeature_{regress_nfeature}.html'), regress_ncount = ['TRUE', 'FALSE'],
               # regress_nfeature = ['TRUE', 'FALSE'])#,
        # op.join(config['base'], 'runs', config['run_name'], 'summarize_cellranger_run_report.html'),
        # op.join(config['base'], 'runs', config['run_name'], 'summarize_cellranger_run_report_genes_regressed_out.html')
        # op.join(config['base'], 'indices', 'cellranger', 'repeats_hg38', 'Log.out'),
        # op.join(config['base'], 'runs', config['run_name'], 'cellranger_standard', 'outs', 'web_summary.html'),
        # op.join(config['base'], 'runs', config['run_name'], 'cellranger_repeats', 'outs', 'web_summary.html'),
        # op.join(config['base'], "runs", config['run_name'], 'count_repeats_on_cellranger_standard', config['run_name'] + "_repeats.counts.gz"),
         # op.join(config['base'], "runs", config['run_name'], "count_repeats_on_cellranger_standard",  config['run_name'] + "_transcriptome_repeats.counts.summary.png"),
        # op.join(config['base'], "runs", config['run_name'], "count_repeats_on_cellranger_standard_not_overlapping_genes",  config['run_name'] + "_transcriptome_repeats_not_genes.counts.summary.png"),
        expand(op.join(config['base'], 'runs', config['run_name'], config['run_name'] + '_chromium_regress_nCount_{regress_ncount}_nFeature_{regress_nfeature}.html'),
               regress_ncount = ['TRUE', 'FALSE'],
               regress_nfeature = ['TRUE', 'FALSE']),
        expand(op.join(config['base'], "runs", config['run_name'],
                       "count_repeats_on_cellranger_standard",
                       "{multimappers}",
                       config['run_name'] + "_transcriptome_repeats.counts.summary.png"),
               multimappers = ['multimappers', 'unique_reads']),
        expand(op.join(config['base'], "runs", config['run_name'],
                       "count_repeats_on_cellranger_standard_not_overlapping_genes",
                       "{multimappers}",
                       config['run_name'] + "_transcriptome_repeats_not_genes.counts.summary.png"),
               multimappers = ['multimappers', 'unique_reads']),
        op.join(config['base'], 'runs', config['run_name'], 'alevin', 'genes', 'alevin', 'quants_mat.gz'),
        op.join(config['base'], 'runs', config['run_name'], 'alevin', 'repeats', 'alevin', 'quants_mat.gz'),
        # expand(op.join(config['base'], 'runs', config['run_name'], config['run_name'] + '_pbmc_alevin_regress_nCount_{regress_ncount}_nFeature_{regress_nfeature}.html'),
        #        regress_ncount = ['TRUE', 'FALSE'],
        #        regress_nfeature = ['TRUE', 'FALSE']),
        op.join(config['base'], 'runs', config['run_name'], 'cellranger_standard', 'outs', 'possorted_genome_bam.bam'),
        expand(op.join(config['base'], "runs", config['run_name'], 'bowtie_repeatome',
                       '{multimappers}',
                       "all_cells_repeats.counts.gz"),
               multimappers = ['multimappers', 'unique_reads'])
        

rule get_colon_cancer_dnmt_dko_GSE144357_10x:
    priority:
        100
    params:
        path = op.join(config['base'], 'data', config['run_name']),
        path_data = op.join(config['base'], 'data', config['run_name']),
        srr = config['run_name'],
        prefetch = config['software']['prefetch'],
        vdbvalidate = config['software']['vdb_validate'],
        fastqdump = config['software']['fastqdump']
    output:
        cb = op.join(config['base'], 'data', config['run_name'], config['run_name'] + '_S1_L001_R1_001.fastq.gz'),
        r2 = op.join(config['base'], 'data', config['run_name'], config['run_name'] + '_S1_L001_R2_001.fastq.gz'),
        tmp = temp(op.join(config['base'], 'data', config['run_name'], config['run_name'] + '.sra'))
    shell:
        """
        mkdir -p {params.path}
        cd {params.path}
        
        {params.prefetch} {params.srr} --output-file {params.srr}.sra

        {params.vdbvalidate} {params.srr}.sra &> {params.srr}_vdbvalidation.log
            
        {params.fastqdump}  --gzip --split-files  {params.srr}.sra
  
        cd {params.path_data}
        ln -s SRR10974769_1.fastq.gz SRR10974769_S1_L001_R2_001.fastq.gz
        ln -s SRR10974769_2.fastq.gz SRR10974769_S1_L001_R1_001.fastq.gz
        ln -s SRR10974769_3.fastq.gz SRR10974769_S1_L001_I1_001.fastq.gz

        """

rule map_salmon_repeats_chromium:
    input:        
        tgmap = op.join(config['base'], 'indices', 'salmon', config['genome'], 'repeats_salmon', 'txp2gene.tsv'),
        idx_tracker = op.join(config['base'], 'indices', 'salmon', config['genome'], 'repeats_salmon', 'duplicate_clusters.tsv'),
        cb = op.join(config['base'], 'data', config['run_name'], config['run_name'] + '_S1_L001_R2_001.fastq.gz'),
        r2 = op.join(config['base'], 'data', config['run_name'], config['run_name'] + '_S1_L001_R1_001.fastq.gz'),
    output:
        op.join(config['base'], 'runs', config['run_name'], 'alevin', 'repeats', 'alevin', 'quants_mat.gz')
    threads:
        config['params']['nthreads']
    params:
        fastqs_path = op.join(config['base'], 'data', config['run_name']),
        processing_path = op.join(config['base'], 'runs', config['run_name'], 'alevin', 'repeats'),
        salmon_idx = op.join(config['base'], 'indices', 'salmon', config['genome'], 'repeats_salmon'),
        cb = op.join(config['base'], 'data', config['run_name'], config['run_name'] + '_S1_L001_R1_001.fastq.gz'),
        r2 = op.join(config['base'], 'data', config['run_name'], config['run_name'] + '_S1_L001_R2_001.fastq.gz'),
        salmon = config['software']['salmon']
    log:
        op.join(config['base'], 'runs', config['run_name'], 'run_salmon_repeats_chromium.log')
    shell:
        """
    mkdir -p {params.processing_path}
    cd {params.processing_path}

    ({params.salmon} alevin \
    -l ISR \
    -1 {params.cb} \
    -2 {params.r2} \
    --chromium  \
    -i {params.salmon_idx} \
    -p {threads} -o {params.processing_path} \
    --tgMap {input.tgmap} ) 2> {log}

    touch -c {output}
        """
    

rule map_salmon_genes_chromium:
    priority:
        99
    input:        
        tgmap = op.join(config['base'], 'indices', 'salmon', config['genome'], 'genes_salmon', 'txp2gene.tsv'),
        idx_tracker = op.join(config['base'], 'indices', 'salmon', config['genome'], 'genes_salmon', 'duplicate_clusters.tsv'),
        cb = op.join(config['base'], 'data', config['run_name'], config['run_name'] + '_S1_L001_R2_001.fastq.gz'),
        r2 = op.join(config['base'], 'data', config['run_name'], config['run_name'] + '_S1_L001_R1_001.fastq.gz')        
    output:
        op.join(config['base'], 'runs', config['run_name'], 'alevin', 'genes', 'alevin', 'quants_mat.gz')
    threads:
        config['params']['nthreads']
    params:
        fastqs_path = op.join(config['base'], 'data', config['run_name']),
        processing_path = op.join(config['base'], 'runs', config['run_name'], 'alevin', 'genes'),
        salmon_idx = op.join(config['base'], 'indices', 'salmon', config['genome'], 'genes_salmon'),
        cb = op.join(config['base'], 'data', config['run_name'], config['run_name'] + '_S1_L001_R1_001.fastq.gz'),
        r2 = op.join(config['base'], 'data', config['run_name'], config['run_name'] + '_S1_L001_R2_001.fastq.gz'),
        salmon = config['software']['salmon']
    log:
        op.join(config['base'], 'runs', config['run_name'], 'run_salmon_genes_chromium.log')
    shell:
        """
    mkdir -p {params.processing_path}
    cd {params.processing_path}

    ({params.salmon} alevin \
    -l ISR \
    -1 {params.cb} \
    -2 {params.r2} \
    --chromium  \
    -i {params.salmon_idx} \
    -p {threads} -o {params.processing_path} \
    --tgMap {input.tgmap} ) 2> {log}

    touch -c {output}
        """

## salmon end


## cellranger start

rule run_cellranger_repeats:
    input:
        fastqs_path = op.join(config['base'], 'data', config['run_name']),
        transcriptome = op.join(config['base'], 'indices', 'cellranger', 'repeats_hg38', 'repeats_hg38')
    params:
        sample_name = config['run_name'],
        local_mem_gb = config['params']['local_mem_gb'],
        processing_path = op.join(config['base'], 'runs', config['run_name']),
        chemistry = config['chemistry'],
        cellranger = config['software']['cellranger']
    output:
        op.join(config['base'], 'runs', config['run_name'], 'cellranger_repeats', 'outs', 'web_summary.html')
    threads:
        config['params']['nthreads']
    log:
        op.join(config['base'], 'runs', config['run_name'], 'run_cellranger_repeats.log')
    shell:
        """
        mkdir -p {params.processing_path}
        cd {params.processing_path}
        rm -rf cellranger_repeats

        {params.cellranger} count --id=cellranger_repeats \
          --fastqs={input.fastqs_path} \
          --transcriptome={input.transcriptome} \
          --jobmode=local \
          --localcores={threads} \
          --sample={params.sample_name} \
          --localmem={params.local_mem_gb} \
          --chemistry={params.chemistry}
        """
        
rule run_cellranger_standard:
    input:
        fastqs_path = op.join(config['base'], 'data', config['run_name']),
        transcriptome = op.join(config['base'], 'indices', 'cellranger', 'refdata-cellranger-GRCh38-3.0.0')
    params:
        sample_name = config['run_name'],
        local_mem_gb = config['params']['local_mem_gb'],
        processing_path = op.join(config['base'], 'runs', config['run_name']),
        chemistry = config['chemistry']
    output:
        op.join(config['base'], 'runs', config['run_name'], 'cellranger_standard', 'outs', 'web_summary.html'),
        op.join(config['base'], 'runs', config['run_name'], 'cellranger_standard', 'outs', 'possorted_genome_bam.bam'),
        op.join(config['base'], 'runs', config['run_name'], 'cellranger_standard', 'outs',
                'filtered_feature_bc_matrix', 'barcodes.tsv.gz'),
        cellranger = config['software']['cellranger']
        
    threads:
        config['params']['nthreads']
    log:
        op.join(config['base'], 'runs',  config['run_name'], 'run_cellranger_standard.log')
    shell:
        """
        mkdir -p {params.processing_path}
        cd {params.processing_path}
        rm -rf cellranger_standard

        {params.cellranger} count --id=cellranger_standard \
          --fastqs={input.fastqs_path} \
          --transcriptome={input.transcriptome} \
          --jobmode=local \
          --localcores={threads} \
          --sample={params.sample_name} \
          --localmem={params.local_mem_gb} \
          --chemistry={params.chemistry}
        """

## cellranger end
