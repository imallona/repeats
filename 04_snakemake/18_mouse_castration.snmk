#!/usr/bin/env snakemake -s
## 
## Started 03 mar 2021
##
## Izaskun Mallona
## GPLv3
# https://singlecell.broadinstitute.org/single_cell/study/SCP859/regenerative-potential-of-prostate-luminal-cells-revealed-by-single-cell-analysis-mouse#study-visualize
# https://www.ncbi.nlm.nih.gov/sra?term=SRP256199
"""
[imallona@neutral Downloads]$ cut -f3,8 -d"," mmProstate10x_scPortal_metadata.txt | grep T05_Regen_Day1 | cut -f2 -d "," | sort | uniq -c
   1757 Epi_Basal_1
    755 Epi_Luminal_1
    169 Epi_Luminal_2Psca
     23 Epi_Luminal_3Foxi1
      2 Epi_SV_Basal
      5 Epi_SV_Luminal
     33 Imm_B
     53 Imm_DC
    182 Imm_Macrophage_1a_vcam
     66 Imm_Macrophage_1b
     42 Imm_Macrophage_2
     33 Imm_Macrophage_3
    115 Imm_NK
     88 Imm_Tcell
     36 PredDoublet_Epi_Imm
    674 PredDoublet_Str_Epi
     56 PredDoublet_Str_Imm
     18 Str_Endothelium_Lymphatic
    143 Str_Endothelium_Vascular
     58 Str_Glial
   1243 Str_Mesenchymal_1
    706 Str_Mesenchymal_2
    263 Str_SmoothMuscle_1
    113 Str_SmoothMuscle_2

"""

import os.path as op
from glob import glob

RUN_NAME  = 'castration'
CHEMISTRY = 'SC3Pv2'
DEMUX = True

#@FIXME to be moved to config, not hardcoded!
BASE = op.join('/home', 'imallona', 'repeats_sc')
NTHREADS = 30
LOCAL_MEM_GB = 100
GENOME = 'mm10'
CONF = op.join(BASE, 'data', RUN_NAME, 'mouse_prostate_regeneration.conf')



## @FIXME to be moved to config
GENOME_URL = 'ftp://ftp.ensembl.org/pub/release-99/fasta/mus_musculus/dna/Mus_musculus.GRCm38.dna.primary_assembly.fa.gz'

GENES_GTF_URL = 'ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_mouse/release_M24/gencode.vM24.annotation.gtf.gz'

REP_GTF_URL = 'http://labshare.cshl.edu/shares/mhammelllab/www-data/TEtranscripts/TE_GTF/mm10_rmsk_TE.gtf.gz'

# DFAM_EMBL_URL = 'https://www.dfam.org/releases/current/families/Dfam.embl.gz'
# TRANSCRIPTOME_URL= 'ftp://ftp.ensembl.org/pub/release-98/fasta/homo_sapiens/cdna/Homo_sapiens.GRCh38.cdna.all.fa.gz'
# TRANSCRIPTOME_URL = 'ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_33/gencode.v33.pc_transcripts.fa.gz'
TRANSCRIPTOME_URL = 'ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_mouse/release_M24/gencode.vM24.pc_transcripts.fa.gz'

# this is actually mouse not hg38! @todo rename
CELLRANGER_DB_URL = 'https://cf.10xgenomics.com/supp/cell-exp/refdata-gex-mm10-2020-A.tar.gz'
CELLRANGER_DB_ID = 'refdata-gex-mm10-2020-A'



## @FIXME to be moved to config

GTF_PARSING_RSCRIPT = '~/src/repeats_sc/04_snakemake/gtf_parser.R'
FEATURECOUNTS_RSCRIPT= '~/src/repeats_sc/04_snakemake/plot_featurecounts_profile.R'
PROFILE_ALL_RSCRIPT = '~/src/repeats_sc/04_snakemake/profile_mapping_rates.R'

BOWTIE_BUILD = '/home/imallona/soft/bowtie/bowtie-1.2.3/bowtie-build'
BOWTIE = '/home/imallona/soft/bowtie/bowtie-1.2.3/bowtie'

##pigz 2.3.1
PIGZ = '/usr/bin/pigz'
BIOPYTHON_CONVERT='biopython.convert'
STAR = '~/soft/star/STAR-2.7.3a/source/STAR'
FEATURECOUNTS = '~/soft/subread/subread-2.0.0-source/bin/featureCounts'
# SALMON = '~/soft/salmon/salmon-1.1.0_linux_x86_64/bin/salmon'
SALMON='/home/imallona/soft/salmon/salmon-1.2.1/bin/salmon'
SALMON_V1_10X_RUN='/home/imallona/soft/salmon/salmon-1.2.1_src/scripts/v1_10x/run.sh'
SALMON_V1_10X_WRAPPER='/home/imallona/soft/salmon/salmon-1.2.1_src/scripts/v1_10x/wrapper'
CELLRANGER = '~/soft/cellranger/cellranger-3.1.0/cellranger'
BIOAWK = '~/soft/bioawk/bioawk'
BEDTOOLS = '~/soft/bedtools/bedtools-2.29.2/bin/bedtools'
Rscript = '/usr/local/R/R-3.6.1/bin/Rscript'
FASTQDUMP= '~/soft/sra-toools/sratoolkit.2.10.4-ubuntu64/bin/fastq-dump' # fastq-dump : 2.10.4
PREFETCH= '~/soft/sra-toools/sratoolkit.2.10.4-ubuntu64/bin/prefetch' # fastq-dump : 2.10.4
VDBVALIDATE= '~/soft/sra-toools/sratoolkit.2.10.4-ubuntu64/bin/vdb-validate' # fastq-dump : 2.10.4


try:
   if not op.exists(op.dirname(op.join(BASE, 'annotation'))):
      os.makedirs(op.join(BASE, 'annotation'))
except OSError as err:
   print(err)
      
for item in ['bowtie', 'star', 'salmon']:
   try:
      if not op.exists(op.dirname(op.join(BASE, 'indices', item))):
         os.makedirs(op.join(BASE, 'indices', item))
   except OSError as err:
      print(err)
      
## Folder structure end ----------------------------------------------------------------------- ##


# config file
       
def get_samples(conf):
   if not op.isfile(conf):
      write_config(conf)
   
   samples = []
   with open(conf) as fh:
      for line in fh:
         if line.split(',')[0].strip() != 'Run':
            samples.append(line.split(',')[0].strip())
   return(samples)


def write_config(conf):
   path = op.join(BASE, "data", RUN_NAME)
   if not op.exists(path):
      os.makedirs(path)
      
   with open(conf, "w+") as fh:
       fh.writelines("""Run,androgen_status,Assay Type,AvgSpotLen,background_strain,Bases,BioProject,BioSample,Bytes,Center Name,Consent,DATASTORE filetype,DATASTORE provider,DATASTORE region,Day,Experiment,GEO_Accession (exp),Instrument,LibraryLayout,LibrarySelection,LibrarySource,Organism,Platform,ReleaseDate,Sample Name,source_name,SRA Study,Tissue
SRR11538050,DHTpellet,RNA-Seq,89,FVB/NJ,2027682995,PRJNA625051,SAMN14591798,1412111228,GEO,public,"fastq,sra","gs,ncbi,s3","gs.US,ncbi.public,s3.us-east-1",1,SRX8109034,GSM4474199,NextSeq 500,PAIRED,cDNA,TRANSCRIPTOMIC,Mus musculus,ILLUMINA,2020-05-05T00:00:00Z,GSM4474199,Mouse prostate regeneration day 1,SRP256199,Prostate
SRR11538045,DHTpellet,RNA-Seq,89,FVB/NJ,2053196981,PRJNA625051,SAMN14591798,1293846891,GEO,public,"fastq,sra","gs,ncbi,s3","gs.US,ncbi.public,s3.us-east-1",1,SRX8109034,GSM4474199,NextSeq 500,PAIRED,cDNA,TRANSCRIPTOMIC,Mus musculus,ILLUMINA,2020-05-05T00:00:00Z,GSM4474199,Mouse prostate regeneration day 1,SRP256199,Prostate
SRR11538047,DHTpellet,RNA-Seq,89,FVB/NJ,1877097220,PRJNA625051,SAMN14591798,1304429725,GEO,public,"fastq,sra","gs,ncbi,s3","gs.US,ncbi.public,s3.us-east-1",1,SRX8109034,GSM4474199,NextSeq 500,PAIRED,cDNA,TRANSCRIPTOMIC,Mus musculus,ILLUMINA,2020-05-05T00:00:00Z,GSM4474199,Mouse prostate regeneration day 1,SRP256199,Prostate
SRR11538046,DHTpellet,RNA-Seq,89,FVB/NJ,2050638231,PRJNA625051,SAMN14591798,1282737971,GEO,public,"fastq,sra","gs,ncbi,s3","gs.US,ncbi.public,s3.us-east-1",1,SRX8109034,GSM4474199,NextSeq 500,PAIRED,cDNA,TRANSCRIPTOMIC,Mus musculus,ILLUMINA,2020-05-05T00:00:00Z,GSM4474199,Mouse prostate regeneration day 1,SRP256199,Prostate
SRR11538044,DHTpellet,RNA-Seq,89,FVB/NJ,2064005586,PRJNA625051,SAMN14591798,1296637000,GEO,public,"fastq,sra","gs,ncbi,s3","gs.US,ncbi.public,s3.us-east-1",1,SRX8109034,GSM4474199,NextSeq 500,PAIRED,cDNA,TRANSCRIPTOMIC,Mus musculus,ILLUMINA,2020-05-05T00:00:00Z,GSM4474199,Mouse prostate regeneration day 1,SRP256199,Prostate
SRR11538048,DHTpellet,RNA-Seq,89,FVB/NJ,1965912456,PRJNA625051,SAMN14591798,1370837881,GEO,public,"fastq,sra","gs,ncbi,s3","gs.US,ncbi.public,s3.us-east-1",1,SRX8109034,GSM4474199,NextSeq 500,PAIRED,cDNA,TRANSCRIPTOMIC,Mus musculus,ILLUMINA,2020-05-05T00:00:00Z,GSM4474199,Mouse prostate regeneration day 1,SRP256199,Prostate
SRR11538042,DHTpellet,RNA-Seq,89,FVB/NJ,114899,PRJNA625051,SAMN14591798,146844,GEO,public,"sra,fastq","s3,ncbi,gs","gs.US,s3.us-east-1,ncbi.public",1,SRX8109034,GSM4474199,NextSeq 500,PAIRED,cDNA,TRANSCRIPTOMIC,Mus musculus,ILLUMINA,2020-05-05T00:00:00Z,GSM4474199,Mouse prostate regeneration day 1,SRP256199,Prostate
SRR11538043,DHTpellet,RNA-Seq,89,FVB/NJ,123176,PRJNA625051,SAMN14591798,154100,GEO,public,"sra,fastq","s3,ncbi,gs","gs.US,s3.us-east-1,ncbi.public",1,SRX8109034,GSM4474199,NextSeq 500,PAIRED,cDNA,TRANSCRIPTOMIC,Mus musculus,ILLUMINA,2020-05-05T00:00:00Z,GSM4474199,Mouse prostate regeneration day 1,SRP256199,Prostate
SRR11538049,DHTpellet,RNA-Seq,89,FVB/NJ,1907961975,PRJNA625051,SAMN14591798,1327398077,GEO,public,"sra,fastq","gs,s3,ncbi","ncbi.public,s3.us-east-1,gs.US",1,SRX8109034,GSM4474199,NextSeq 500,PAIRED,cDNA,TRANSCRIPTOMIC,Mus musculus,ILLUMINA,2020-05-05T00:00:00Z,GSM4474199,Mouse prostate regeneration day 1,SRP256199,Prostate
SRR11538051,DHTpellet,RNA-Seq,89,FVB/NJ,135814,PRJNA625051,SAMN14591798,164327,GEO,public,"fastq,sra","gs,s3,ncbi","gs.US,ncbi.public,s3.us-east-1",1,SRX8109034,GSM4474199,NextSeq 500,PAIRED,cDNA,TRANSCRIPTOMIC,Mus musculus,ILLUMINA,2020-05-05T00:00:00Z,GSM4474199,Mouse prostate regeneration day 1,SRP256199,Prostate
SRR11538014,DHTpellet,RNA-Seq,89,FVB/NJ,1986769695,PRJNA625051,SAMN14591798,1244261152,GEO,public,"fastq,sra","s3,ncbi,gs","s3.us-east-1,gs.US,ncbi.public",1,SRX8109034,GSM4474199,NextSeq 500,PAIRED,cDNA,TRANSCRIPTOMIC,Mus musculus,ILLUMINA,2020-05-05T00:00:00Z,GSM4474199,Mouse prostate regeneration day 1,SRP256199,Prostate
SRR11538015,DHTpellet,RNA-Seq,89,FVB/NJ,134568,PRJNA625051,SAMN14591798,163487,GEO,public,"fastq,sra","gs,ncbi,s3","gs.US,s3.us-east-1,ncbi.public",1,SRX8109034,GSM4474199,NextSeq 500,PAIRED,cDNA,TRANSCRIPTOMIC,Mus musculus,ILLUMINA,2020-05-05T00:00:00Z,GSM4474199,Mouse prostate regeneration day 1,SRP256199,Prostate""")

rule all:
    input:
        expand(op.join(BASE, 'data', RUN_NAME, "{srr}", "{srr}.sra"),
               srr = get_samples(CONF)),
        expand(op.join(BASE, 'data', RUN_NAME, "{srr}", "{srr}_S1_L001_R1_001.fastq.gz"),
               srr = get_samples(CONF)),
        expand(op.join(BASE, 'runs', RUN_NAME, "{srr}", 'cellranger_standard', 'outs', 'web_summary.html'),
               srr = get_samples(CONF)),
        expand(op.join(BASE, 'runs', RUN_NAME, "{srr}", 'cellranger_repeats', 'outs', 'web_summary.html'),
               srr = get_samples(CONF)),
        expand(op.join(BASE, "runs", RUN_NAME, "{srr}", 'count_repeats_on_cellranger_standard_not_overlapping_genes',
                       '{multimappers}',
                       RUN_NAME + "_repeats_not_overlapping_genes.counts.gz"),
               srr = get_samples(CONF),
               multimappers = ['unique_reads', 'multimappers']),
        op.join(BASE, 'runs', 'castration_integration.html')
      
rule knit_report_castration:
    input:
        # multi = expand(op.join(BASE, "runs", RUN_NAME, "{srr}",
        #                 'count_repeats_on_cellranger_standard_not_overlapping_genes',
        #                 'multimappers',
        #                        RUN_NAME + "_repeats_not_overlapping_genes.counts.gz"),
        #                srr = get_samples(CONF)),
        # unique = expand(op.join(BASE, "runs", RUN_NAME, "{srr}",
        #                  'count_repeats_on_cellranger_standard_not_overlapping_genes',
        #                  'unique_reads',
        #                         RUN_NAME + "_repeats_not_overlapping_genes.counts.gz"),
        #                 get_samples(CONF)),
        annotation = op.join(BASE, "data", RUN_NAME, "mmProstate10x_scPortal_metadata.txt")
    params:
        rmd = 'integrate_runs_castration.Rmd',
        results_path = op.join(BASE, 'runs', RUN_NAME),
        config = CONF
    output:
        html = op.join(BASE, 'runs', 'castration_integration.html'),
        rds = op.join(BASE, 'runs', 'castration_integration_seurat.rds'),
        markers = op.join(BASE, 'runs', 'castration_integration_markers.rds')
    log:
        op.join(BASE, 'runs', 'castration_integration.log')
    shell:
         """
        {Rscript} -e 'rmarkdown::render(\"{params.rmd}\", 
          output_file = \"{output.html}\", 
          params = list(results_path = \"{params.results_path}\",
                        annotation = \"{input.annotation}\",
                        config = \"{params.config}\",
                        markers_rds = \"{output.markers}\",
                        seurat_rds = \"{output.rds}\"))' &> {log}
        """
         
rule get_data_castration:
    priority:
        100
    params:
        path = op.join(BASE, 'data', RUN_NAME, "{srr}"),
        path_data = op.join(BASE, 'data', RUN_NAME)
    output:
        sra = op.join(BASE, 'data', RUN_NAME, "{srr}", "{srr}.sra")
    threads:
        1
    shell:
        """
        mkdir -p {params.path}
        cd {params.path}
    
        {PREFETCH} {wildcards.srr} --output-file {wildcards.srr}.sra &> \
               {wildcards.srr}_prefetch.log

        {VDBVALIDATE} {wildcards.srr}.sra &> {wildcards.srr}_vdbvalidation.log
            
        {FASTQDUMP}  --gzip --split-files  {wildcards.srr}.sra

        ln -s {wildcards.srr}_1.fastq.gz {wildcards.srr}_S1_L001_R1_001.fastq.gz
        ln -s {wildcards.srr}_2.fastq.gz {wildcards.srr}_S1_L001_R2_001.fastq.gz
        ln -s {wildcards.srr}_3.fastq.gz {wildcards.srr}_S1_L001_I1_001.fastq.gz

        """

rule link_data:
    input:
        sra = op.join(BASE, 'data', RUN_NAME, "{srr}", "{srr}.sra")
    params:
        path = op.join(BASE, 'data', RUN_NAME, "{srr}"),
        path_data = op.join(BASE, 'data', RUN_NAME)
    output:
        r1 = op.join(BASE, 'data', RUN_NAME, "{srr}", "{srr}_S1_L001_R1_001.fastq.gz"),
        r2 = op.join(BASE, 'data', RUN_NAME, "{srr}", "{srr}_S1_L001_R2_001.fastq.gz"),
    threads:
        1
    shell:
        """
        cd {params.path}

        ln -s {wildcards.srr}_1.fastq.gz {wildcards.srr}_S1_L001_I1_001.fastq.gz
        ln -s {wildcards.srr}_2.fastq.gz {wildcards.srr}_S1_L001_R1_001.fastq.gz
        ln -s {wildcards.srr}_3.fastq.gz {wildcards.srr}_S1_L001_R2_001.fastq.gz

        """

rule run_cellranger_repeats_by_sample:
    input:
        sample = op.join(BASE, 'data', RUN_NAME, "{sample}", "{sample}_S1_L001_R2_001.fastq.gz"),
        transcriptome = op.join(BASE, 'indices', 'cellranger', 'repeats_' + GENOME,
                                'repeats_' + GENOME)
    params:
        fastqs_path = op.join(BASE, 'data', RUN_NAME, "{sample}"),
        local_mem_gb = LOCAL_MEM_GB,
        processing_path = op.join(BASE, 'runs', RUN_NAME, "{sample}")
    output:
        op.join(BASE, 'runs', RUN_NAME,  "{sample}", 'cellranger_repeats',
                'outs', 'web_summary.html'),
        op.join(BASE, 'runs', RUN_NAME, "{sample}",  'cellranger_repeats',
                'outs', 'filtered_feature_bc_matrix', 'barcodes.tsv.gz')
    threads:
        NTHREADS
    log:
        op.join(BASE, 'runs', RUN_NAME, "{sample}", 'cellranger_repeats', 'run.log')
    shell:
        """
        mkdir -p {params.processing_path}
        cd {params.processing_path}
        rm -rf cellranger_repeats
        
        {CELLRANGER} count --id=cellranger_repeats \
          --fastqs={params.fastqs_path} \
          --transcriptome={input.transcriptome} \
          --sample={wildcards.sample} \
          --jobmode=local \
          --localcores={threads} \
          --chemistry={CHEMISTRY} \
          --localmem={params.local_mem_gb}
        """
 
rule run_cellranger_standard:
    input:
        sample = op.join(BASE, 'data', RUN_NAME, "{sample}", "{sample}_S1_L001_R2_001.fastq.gz"),
        transcriptome = op.dirname(op.join(BASE, 'indices', 'cellranger',
                                           CELLRANGER_DB_ID, 'reference.json'))
    params:
        fastqs_path = op.join(BASE, 'data', RUN_NAME, "{sample}"),
        local_mem_gb = LOCAL_MEM_GB,
        processing_path = op.join(BASE, 'runs', RUN_NAME, "{sample}")
    output:
        op.join(BASE, 'runs', RUN_NAME,  "{sample}", 'cellranger_standard',
                'outs', 'web_summary.html'),
        op.join(BASE, 'runs', RUN_NAME, "{sample}",  'cellranger_standard',
                'outs', 'filtered_feature_bc_matrix', 'barcodes.tsv.gz')
    threads:
        NTHREADS
    log:
        op.join(BASE, 'runs', RUN_NAME, "{sample}", 'cellranger_standard', 'run.log')
    shell:
        """
        mkdir -p {params.processing_path}
        cd {params.processing_path}
        rm -rf cellranger_standard
        
        {CELLRANGER} count --id=cellranger_standard \
          --fastqs={params.fastqs_path} \
          --transcriptome={input.transcriptome} \
          --sample={wildcards.sample} \
          --jobmode=local \
          --localcores={threads} \
          --chemistry={CHEMISTRY} \
          --localmem={params.local_mem_gb}
        """


rule run_feature_counts_repeats_not_overlapping_genes_spawned_bams_by_sample:
    input:
        flag = op.join(BASE, "runs", RUN_NAME, "{sample}", 'count_repeats_on_cellranger_standard', 'split.flag'),
        gtf = op.join(BASE, 'annotation', op.basename(REP_GTF_URL) + '_minus_' + op.basename(GENES_GTF_URL))
    params:
        path = op.join(BASE, "runs", RUN_NAME, "{sample}", 'count_repeats_on_cellranger_standard', 'split')
    output:
        counts  = temp(op.join(BASE, "runs", RUN_NAME, "{sample}",
                               'count_repeats_on_cellranger_standard_not_overlapping_genes',
                               '{multimappers}',
                               RUN_NAME + "_repeats_not_overlapping_genes.counts")),
        gz_counts = op.join(BASE, "runs", RUN_NAME, "{sample}", 'count_repeats_on_cellranger_standard_not_overlapping_genes',
                            '{multimappers}',
                            RUN_NAME + "_repeats_not_overlapping_genes.counts.gz"),
        summary = op.join(BASE, "runs", RUN_NAME, "{sample}", 'count_repeats_on_cellranger_standard_not_overlapping_genes',
                          '{multimappers}',
                           RUN_NAME + "_repeats_not_overlapping_genes.counts.summary")
    log :
        log = op.join(BASE, "runs",  RUN_NAME, "{sample}", 'count_repeats_on_cellranger_standard_not_overlapping_genes',
                      '{multimappers}'
                      'feature_counts_not_overlapping_genes.log'),
    threads:
        NTHREADS
    run:
        if wildcards.multimappers == 'multimappers':
            shell("""
            echo multimappers allowed

            cd {params.path}

            {FEATURECOUNTS} -T {threads} \
            -t exon \
            -g gene_id \
            -a {input.gtf} \
            -o  {output.counts} \
            -M \
            --fraction \
            {params.path}/*bam  2>&1 > {log}

            {PIGZ} -f --keep -p {threads} {output.counts} -c > {output.gz_counts}

            """)
        elif wildcards.multimappers == 'unique_reads':
            shell("""
            echo unique only

            cd {params.path}

            {FEATURECOUNTS} -T {threads} \
            -t exon \
            -g gene_id \
            -a {input.gtf} \
            -o  {output.counts} \
            {params.path}/*bam  2>&1 > {log}

            {PIGZ} -f --keep -p {threads} {output.counts} -c > {output.gz_counts}
            """)


rule spawn_cellranger_bam_file_by_cell_by_sample:
    input:
        bam = op.join(BASE, 'runs', RUN_NAME, "{sample}", 'cellranger_standard',
                      'outs', 'possorted_genome_bam.bam'),
        barcodes = op.join(BASE, 'runs', RUN_NAME, "{sample}",'cellranger_standard',
                           'outs', 'filtered_feature_bc_matrix', 'barcodes.tsv.gz')
    output:
        rgs = temp(op.join(BASE, "runs", RUN_NAME, "{sample}",
                           'count_repeats_on_cellranger_standard', 'rgs.txt')),
        header = temp(op.join(BASE, "runs", RUN_NAME, "{sample}",
                              'count_repeats_on_cellranger_standard', 'header.txt')),
        body = temp(op.join(BASE, "runs", RUN_NAME, "{sample}",
                            'count_repeats_on_cellranger_standard', 'body.txt.gz')),
        shortened_bam = temp(op.join(BASE, "runs", RUN_NAME, "{sample}",
                                     'count_repeats_on_cellranger_standard', 'shortened.bam')),
        flag = op.join(BASE, "runs", RUN_NAME, "{sample}",
                       'count_repeats_on_cellranger_standard', 'split.flag'),
        path = directory(op.join(BASE, "runs", RUN_NAME, "{sample}",
                                 'count_repeats_on_cellranger_standard', 'split'))
    threads:
        NTHREADS
    params:
        barcodes_script = 'get_cell_barcodes.py',
        split_script = 'split_by_cell_barcode_in_sorted_bam.py',
        split_path = op.join(BASE, "runs", RUN_NAME, "{sample}",
                             'count_repeats_on_cellranger_standard', 'split')
    log:
        log1 = op.join(BASE, "runs", RUN_NAME, "{sample}",
                       'count_repeats_on_cellranger_standard', 'split_add_rg.log'),
        log2 = op.join(BASE, "runs", RUN_NAME, "{sample}",
                       'count_repeats_on_cellranger_standard', 'split_pick.log'),
    shell:
        """
        mkdir -p {output.path}
        
        # python3 {params.barcodes_script} {input.bam} | {PIGZ} -p {threads} > {output.rgs}

        python3 {params.barcodes_script} {input.bam}  > {output.rgs}

        samtools view -@ {threads} -H {input.bam} > {output.header}

        # ## buffer size in sort due to https://superuser.com/questions/938558/sort-parallel-isnt-parallelizing
        # ( samtools view -@ {threads} {input.bam} | cut -f 1-15 | \
        # paste - {output.rgs} | \
        #   sed 's/\t$//' | sort -S1G --parallel={threads} -k16 | {PIGZ} -p {threads} --keep --stdout > {output.body} ) &> {log.log1}
        ## updated 2 oct to handle SRR8847571
        ( samtools view -@ {threads} {input.bam} | cut -f 1-15 | \
        paste - {output.rgs} | \
          fgrep "RG:Z" | \
          sed 's/\t$//' | sort -S1G --parallel={threads} -k16 | {PIGZ} -p {threads} --keep --stdout > {output.body} ) &> {log.log1}


        {PIGZ} --decompress -p {threads} --keep --stdout {output.body} | cat {output.header} - | samtools view -@ {threads} -Sb - > {output.shortened_bam}
        
        python3 split_by_cell_barcode_in_sorted_bam.py {output.shortened_bam} -outdir {params.split_path} -barcodes {input.barcodes} &> {log.log2}

        touch {output.flag}

        """
