#!/usr/bin/env snakemake -s
## 
## Started 14th Jan 2020
##
## Izaskun Mallona
## GPLv3

import os.path as op
from glob import glob

RUN_NAME  = 'pbmc_10k_v3'
CHEMISTRY = 'SC3Pv3'
DEMUX = False

# Peripheral blood mononuclear cells (PBMCs) from a healthy donor (the same cells were used to generate pbmc_1k_v2, pbmc_10k_v3). PBMCs are primary cells with relatively small amounts of RNA (~1pg RNA/cell).

# 11,769 cells detected
# Sequenced on Illumina NovaSeq with approximately 54,000 reads per cell
# 28bp read1 (16bp Chromium barcode and 12bp UMI), 91bp read2 (transcript), and 8bp I7 sample barcode
# run with --expect-cells=10000


#@FIXME to be moved to config, not hardcoded!
BASE = op.join('/home', 'imallona', 'repeats_sc')
NTHREADS = 30
LOCAL_MEM_GB = 100

## @FIXME to be moved to config
GENOME_URL = 'ftp://ftp.ensembl.org/pub/release-98/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz'
# GENES_GTF_URL =  'ftp://ftp.ensembl.org/pub/release-98/gtf/homo_sapiens/Homo_sapiens.GRCh38.98.gtf.gz'
GENES_GTF_URL = 'ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_33/gencode.v33.primary_assembly.annotation.gtf.gz'
REP_GTF_URL = 'http://labshare.cshl.edu/shares/mhammelllab/www-data/TEtranscripts/TE_GTF/GRCh38_rmsk_TE.gtf.gz'
# REP_GTF_URL = 'http://labshare.cshl.edu/shares/mhammelllab/www-data/TEtranscripts/TE_GTF/mm10_rmsk_TE.gtf.gz'
DFAM_EMBL_URL = 'https://www.dfam.org/releases/current/families/Dfam.embl.gz'
# TRANSCRIPTOME_URL= 'ftp://ftp.ensembl.org/pub/release-98/fasta/homo_sapiens/cdna/Homo_sapiens.GRCh38.cdna.all.fa.gz'
TRANSCRIPTOME_URL = 'ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_33/gencode.v33.pc_transcripts.fa.gz'

CELLRANGER_HG38_URL = 'http://cf.10xgenomics.com/supp/cell-exp/refdata-cellranger-GRCh38-3.0.0.tar.gz'

## @FIXME to be moved to config

GTF_PARSING_RSCRIPT = '~/src/repeats_sc/04_snakemake/gtf_parser.R'

BOWTIE_BUILD = '/home/imallona/soft/bowtie/bowtie-1.2.3/bowtie-build'
BOWTIE = '/home/imallona/soft/bowtie/bowtie-1.2.3/bowtie'

##pigz 2.3.1
PIGZ = '/usr/bin/pigz'
BIOPYTHON_CONVERT='biopython.convert'
STAR = '~/soft/star/STAR-2.7.3a/source/STAR'
FEATURECOUNTS = '~/soft/subread/subread-2.0.0-source/bin/featureCounts'
SALMON = '~/soft/salmon/salmon-1.1.0_linux_x86_64/bin/salmon'
CELLRANGER = '~/soft/cellranger/cellranger-3.1.0/cellranger'
BIOAWK = '~/soft/bioawk/bioawk'
BEDTOOLS = '~/soft/bedtools/bedtools-2.29.2/bin/bedtools'
Rscript = '/usr/local/R/R-3.6.1/bin/Rscript'
FASTQ_DUMP= '~/soft/sra-toools/sratoolkit.2.10.4-ubuntu64/bin/fastq-dump' # fastq-dump : 2.10.4
VDB_VALIDATE = '~/soft/sra-toools/sratoolkit.2.10.4-ubuntu64/bin/vdb-validate'

try:
   if not op.exists(op.dirname(op.join(BASE, 'annotation'))):
      os.makedirs(op.join(BASE, 'annotation'))
except OSError as err:
   print(err)
      
for item in ['bowtie', 'star', 'salmon']:
   try:
      if not op.exists(op.dirname(op.join(BASE, 'indices', item))):
         os.makedirs(op.join(BASE, 'indices', item))
   except OSError as err:
      print(err)
      
## Folder structure end ----------------------------------------------------------------------- ##

include: "/home/imallona/src/repeats_sc/04_snakemake/chromium_flow.snmk"

onsuccess:
    shell("mailx -A gmail -s "'snakemake_04_success'" izaskun.mallona@gmail.com  < {log}")

onerror:
    shell("mailx -A gmail -s "'snakemake_04_error'" izaskun.mallona@gmail.com  < {log}")
    
rule all:
    input:
        expand(op.join(BASE, 'runs', RUN_NAME, RUN_NAME + '_pbmc_cellranger_regress_nCount_{regress_ncount}_nFeature_{regress_nfeature}.html'), regress_ncount = ['TRUE', 'FALSE'],
                       regress_nfeature = ['TRUE', 'FALSE'])#,
        # op.join(BASE, 'runs', RUN_NAME, 'summarize_cellranger_run_report_genes_regressed_out.html')


rule get_data:
    output:
        temp = temp(op.join(BASE, 'data', RUN_NAME, 'pbmc_10k_v3_fastqs.tar')),
        flag_fastq = op.join(BASE, 'data', RUN_NAME, 'pbmc_10k_v3_S1_L002_I1_001.fastq.gz')
    params:
        run_name =  RUN_NAME,
        path = op.join(BASE, 'data', RUN_NAME),
        url = 'http://s3-us-west-2.amazonaws.com/10x.files/samples/cell-exp/3.0.0/pbmc_10k_v3/pbmc_10k_v3_fastqs.tar'
        
    log:
        op.join(BASE, 'data', RUN_NAME, RUN_NAME + '_retrieval.log')
    shell:
        """
        mkdir -p {params.path}
        cd $_
        wget {params.url} &> {log}

        tar xvf {output.temp}
        mv {params.path}/{params.run_name}/*fastq.gz {params.path}

        rmdir {params.path}/{params.run_name}
        """

rule run_cellranger_repeats:
    input:
        flag = op.join(BASE, 'data', RUN_NAME, 'pbmc_10k_v3_S1_L002_I1_001.fastq.gz'),
        transcriptome = op.join(BASE, 'indices', 'cellranger', 'repeats_hg38', 'repeats_hg38')
    params:
        fastqs_path = op.join(BASE, 'data', RUN_NAME),
        sample_name = RUN_NAME,
        local_mem_gb = LOCAL_MEM_GB,
        processing_path = op.join(BASE, 'runs', RUN_NAME),
        chemistry = CHEMISTRY
    output:
        reports = op.join(BASE, 'runs', RUN_NAME, 'cellranger_repeats', 'outs', 'web_summary.html'),
        barcodes = op.join(BASE, 'runs', RUN_NAME, 'cellranger_repeats', 'outs', 'filtered_feature_bc_matrix', 'barcodes.tsv.gz')
    threads:
        NTHREADS
    log:
        op.join(BASE, 'runs', RUN_NAME, 'run_cellranger_repeats.log')
    shell:
        """
        mkdir -p {params.processing_path}
        cd {params.processing_path}
        rm -rf cellranger_repeats

        {CELLRANGER} count --id=cellranger_repeats \
          --fastqs={params.fastqs_path} \
          --transcriptome={input.transcriptome} \
          --jobmode=local \
          --localcores={threads} \
          --sample={params.sample_name} \
          --localmem={params.local_mem_gb} \
          --chemistry={params.chemistry}
        """
        
rule run_cellranger_standard:
    input:
        op.join(BASE, 'data', RUN_NAME, 'pbmc_10k_v3_S1_L002_I1_001.fastq.gz'),
        transcriptome = op.join(BASE, 'indices', 'cellranger', 'refdata-cellranger-GRCh38-3.0.0')
    params:
        fastqs_path = op.join(BASE, 'data', RUN_NAME),
        sample_name = RUN_NAME,
        local_mem_gb = LOCAL_MEM_GB,
        processing_path = op.join(BASE, 'runs', RUN_NAME),
        chemistry = CHEMISTRY
    output:
        html = op.join(BASE, 'runs', RUN_NAME, 'cellranger_standard', 'outs', 'web_summary.html'),
        bam = op.join(BASE, 'runs', RUN_NAME, 'cellranger_standard', 'outs', 'possorted_genome_bam.bam'),
        barcodes = op.join(BASE, 'runs', RUN_NAME, 'cellranger_standard', 'outs', 'filtered_feature_bc_matrix', 'barcodes.tsv.gz')
    threads:
        NTHREADS
    log:
        op.join(BASE, 'runs',  RUN_NAME, 'run_cellranger_standard.log')
    shell:
        """
        mkdir -p {params.processing_path}
        cd {params.processing_path}
        rm -rf cellranger_standard

        {CELLRANGER} count --id=cellranger_standard \
          --fastqs={params.fastqs_path} \
          --transcriptome={input.transcriptome} \
          --jobmode=local \
          --localcores={threads} \
          --sample={params.sample_name} \
          --localmem={params.local_mem_gb} \
          --chemistry={params.chemistry}
        """
