#!/usr/bin/env snakemake -s
## 
## Started 14th Jan 2020
##
## Izaskun Mallona
## GPLv3

import os.path as op
from glob import glob
from snakemake.utils import validate

# config["run_name"]  = 'pbmc_10k_v3'
# config["chemistry"] = 'SC3Pv3'
# DEMUX = False


# Peripheral blood mononuclear cells (PBMCs) from a healthy donor (the same cells were used to generate pbmc_1k_v2, pbmc_10k_v3). PBMCs are primary cells with relatively small amounts of RNA (~1pg RNA/cell).

# 11,769 cells detected
# Sequenced on Illumina NovaSeq with approximately 54,000 reads per cell
# 28bp read1 (16bp Chromium barcode and 12bp UMI), 91bp read2 (transcript), and 8bp I7 sample barcode
# run with --expect-cells=10000

configfile: op.join('config', 'config_04_repeats_pbmc_10k_v3_chromium.yaml')
# validate(data = config, schema = op.join("schemas", "config.schema.yaml"))

try:
   if not op.exists(op.dirname(op.join(config["base"], 'annotation'))):
      os.makedirs(op.join(config["base"], 'annotation'))
except OSError as err:
   print(err)
      
for item in ['bowtie', 'star', 'salmon']:
   try:
      if not op.exists(op.dirname(op.join(config["base"], 'indices', item))):
         os.makedirs(op.join(config["base"], 'indices', item))
   except OSError as err:
      print(err)
      
## Folder structure end ----------------------------------------------------------------------- ##

include: "chromium_flow_with_config.snmk"

# onsuccess:
#     shell("mailx -A gmail -s "'snakemake_04_success'" izaskun.mallona@gmail.com  < {log}")

# onerror:
#     shell("mailx -A gmail -s "'snakemake_04_error'" izaskun.mallona@gmail.com  < {log}")
    
rule all:
    input:
        expand(op.join(config["base"], 'runs', config["run_name"], config["run_name"] + '_pbmc_chromium_regress_nCount_{regress_ncount}_nFeature_{regress_nfeature}.html'), regress_ncount = ['TRUE', 'FALSE'],
                       regress_nfeature = ['TRUE', 'FALSE']),
        # op.join(config["base"], "runs", config["run_name"], "count_repeats_on_cellranger_standard",  config["run_name"] + "_transcriptome_repeats.counts.summary.png"),
        # op.join(config["base"], "runs", config["run_name"], "count_repeats_on_cellranger_standard_not_overlapping_genes",  config["run_name"] + "_transcriptome_repeats_not_genes.counts.summary.png"),
        expand(op.join(config["base"], "runs", config["run_name"],
                        "count_repeats_on_cellranger_standard",
                        "{multimappers}",
                        config["run_name"] + "_transcriptome_repeats.counts.summary.png"),
                multimappers = ['multimappers', 'unique_reads']),
        expand(op.join(config["base"], "runs", config["run_name"],
                        "count_repeats_on_cellranger_standard_not_overlapping_genes",
                        "{multimappers}",
                        config["run_name"] + "_transcriptome_repeats_not_genes.counts.summary.png"),
                 multimappers = ['multimappers', 'unique_reads']),
        op.join(config["base"], 'runs', config["run_name"], 'alevin', 'genes', 'alevin', 'quants_mat.gz'),
        op.join(config["base"], 'runs', config["run_name"], 'alevin', 'repeats', 'alevin', 'quants_mat.gz'),
        # expand(op.join(config["base"], 'runs', config["run_name"], config["run_name"] + '_pbmc_alevin_regress_nCount_{regress_ncount}_nFeature_{regress_nfeature}.html'),
        #        regress_ncount = ['TRUE', 'FALSE'],
        #        regress_nfeature = ['TRUE', 'FALSE']),
        expand(op.join(config["base"], "runs", config["run_name"], 'bowtie_repeatome',
                       '{multimappers}',
                       "all_cells_repeats.counts.gz"),
               multimappers = ['multimappers', 'unique_reads'])



rule get_data:
    output:
        temp = temp(op.join(config["base"], 'data', config["run_name"], 'pbmc_10k_v3_fastqs.tar')),
        flag_fastq = op.join(config["base"], 'data', config["run_name"], 'pbmc_10k_v3_S1_L002_I1_001.fastq.gz')
    params:
        run_name =  config["run_name"],
        path = op.join(config["base"], 'data', config["run_name"]),
        url = 'http://s3-us-west-2.amazonaws.com/10x.files/samples/cell-exp/3.0.0/pbmc_10k_v3/pbmc_10k_v3_fastqs.tar'
        
    log:
        op.join(config["base"], 'data', config["run_name"], config["run_name"] + '_retrieval.log')
    shell:
        """
        mkdir -p {params.path}
        cd $_
        wget {params.url} &> {log}

        tar xvf {output.temp}
        mv {params.path}/{params.run_name}/*fastq.gz {params.path}

        rmdir {params.path}/{params.run_name}
        """

rule run_cellranger_repeats:
    input:
        flag = op.join(config["base"], 'data', config["run_name"], 'pbmc_10k_v3_S1_L002_I1_001.fastq.gz'),
        transcriptome_flag = op.join(config['base'], 'indices', 'cellranger',
                                     'repeats_' + config['genome'],
                                     'repeats_' + config['genome'], 'reference.json')
    params:
        fastqs_path = op.join(config["base"], 'data', config["run_name"]),
        sample_name = config["run_name"],
        local_mem_gb = config["params"]["local_mem_gb"],
        processing_path = op.join(config["base"], 'runs', config["run_name"]),
        chemistry = config["chemistry"],
        cellranger = config['software']['cellranger'],
        transcriptome = op.join(config["base"], 'indices', 'cellranger', 'repeats_hg38', 'repeats_hg38')
    output:
        reports = op.join(config["base"], 'runs', config["run_name"], 'cellranger_repeats', 'outs', 'web_summary.html'),
        barcodes = op.join(config["base"], 'runs', config["run_name"], 'cellranger_repeats', 'outs', 'filtered_feature_bc_matrix', 'barcodes.tsv.gz')
    threads:
        config["params"]["nthreads"]
    log:
        op.join(config["base"], 'runs', config["run_name"], 'run_cellranger_repeats.log')
    shell:
        """
        mkdir -p {params.processing_path}
        cd {params.processing_path}
        rm -rf cellranger_repeats

        {params.cellranger} count --id=cellranger_repeats \
          --fastqs={params.fastqs_path} \
          --transcriptome={params.transcriptome} \
          --jobmode=local \
          --localcores={threads} \
          --sample={params.sample_name} \
          --localmem={params.local_mem_gb} \
          --chemistry={params.chemistry}
        """
        
rule run_cellranger_standard:
    input:
        op.join(config["base"], 'data', config["run_name"], 'pbmc_10k_v3_S1_L002_I1_001.fastq.gz'),
        transcriptome = op.join(config["base"], 'indices', 'cellranger', 'refdata-cellranger-GRCh38-3.0.0')
    params:
        fastqs_path = op.join(config["base"], 'data', config["run_name"]),
        sample_name = config["run_name"],
        local_mem_gb = config["params"]["local_mem_gb"],
        processing_path = op.join(config["base"], 'runs', config["run_name"]),
        chemistry = config["chemistry"],
        cellranger = config['software']['cellranger']
    output:
        html = op.join(config["base"], 'runs', config["run_name"], 'cellranger_standard', 'outs', 'web_summary.html'),
        bam = op.join(config["base"], 'runs', config["run_name"], 'cellranger_standard', 'outs', 'possorted_genome_bam.bam'),
        barcodes = op.join(config["base"], 'runs', config["run_name"], 'cellranger_standard', 'outs', 'filtered_feature_bc_matrix', 'barcodes.tsv.gz')
    threads:
        config["params"]["nthreads"]
    log:
        op.join(config["base"], 'runs',  config["run_name"], 'run_cellranger_standard.log')
    shell:
        """
        mkdir -p {params.processing_path}
        cd {params.processing_path}
        rm -rf cellranger_standard

        {params.cellranger} count --id=cellranger_standard \
          --fastqs={params.fastqs_path} \
          --transcriptome={input.transcriptome} \
          --jobmode=local \
          --localcores={threads} \
          --sample={params.sample_name} \
          --localmem={params.local_mem_gb} \
          --chemistry={params.chemistry}
        """

## salmon start
# print(sorted(glob(op.join(config["base"], 'data', config["run_name"], config["run_name"] + '*R1*fastq.gz'))))

rule map_salmon_repeats_chromium:
    input:        
        tgmap = op.join(config["base"], 'indices', 'salmon', config["genome"], 'repeats_salmon', 'txp2gene.tsv'),
        idx_tracker = op.join(config["base"], 'indices', 'salmon', config["genome"], 'repeats_salmon', 'duplicate_clusters.tsv'),
        cb = sorted(glob(op.join(config["base"], 'data', config["run_name"], config["run_name"] + '*R1*fastq.gz'))),
        r2 = sorted(glob(op.join(config["base"], 'data', config["run_name"], config["run_name"] + '*R2*fastq.gz')))        
    output:
        op.join(config["base"], 'runs', config["run_name"], 'alevin', 'repeats', 'alevin', 'quants_mat.gz')
    threads:
        config["params"]["nthreads"]
    params:
        fastqs_path = op.join(config["base"], 'data', config["run_name"]),
        processing_path = op.join(config["base"], 'runs', config["run_name"], 'alevin', 'repeats'),
        salmon_idx = op.join(config["base"], 'indices', 'salmon', config["genome"], 'repeats_salmon'),
        cb = ' '.join(sorted(glob(op.join(config["base"], 'data', config["run_name"], config["run_name"] + '*R1*fastq.gz')))),
        r2 = ' '.join(sorted(glob(op.join(config["base"], 'data', config["run_name"], config["run_name"] + '*R2*fastq.gz')))),
        salmon = config["software"]["salmon"]
    log:
        op.join(config["base"], 'runs', config["run_name"], 'run_salmon_repeats_chromium.log')
    shell:
        """
    mkdir -p {params.processing_path}
    cd {params.processing_path}

    ({params.salmon} alevin \
    -l ISR \
    -1 {params.cb} \
    -2 {params.r2} \
    --chromiumV3  \
    -i {params.salmon_idx} \
    -p {threads} -o {params.processing_path} \
    --tgMap {input.tgmap} ) 2> {log}

    touch -c {output}
        """
    

rule map_salmon_genes_chromium:
    input:        
        tgmap = op.join(config["base"], 'indices', 'salmon', config["genome"], 'genes_salmon', 'txp2gene.tsv'),
        idx_tracker = op.join(config["base"], 'indices', 'salmon', config["genome"], 'genes_salmon', 'duplicate_clusters.tsv'),
        cb = sorted(glob(op.join(config["base"], 'data', config["run_name"], config["run_name"] + '*R1*fastq.gz'))),
        r2 = sorted(glob(op.join(config["base"], 'data', config["run_name"], config["run_name"] + '*R2*fastq.gz')))        
    output:
        op.join(config["base"], 'runs', config["run_name"], 'alevin', 'genes', 'alevin', 'quants_mat.gz')
    threads:
        config["params"]["nthreads"]
    params:
        fastqs_path = op.join(config["base"], 'data', config["run_name"]),
        processing_path = op.join(config["base"], 'runs', config["run_name"], 'alevin', 'genes'),
        salmon_idx = op.join(config["base"], 'indices', 'salmon', config["genome"], 'genes_salmon'),
        cb = ' '.join(sorted(glob(op.join(config["base"], 'data', config["run_name"], config["run_name"] + '*R1*fastq.gz')))),
        r2 = ' '.join(sorted(glob(op.join(config["base"], 'data', config["run_name"], config["run_name"] + '*R2*fastq.gz')))),
        salmon = config["software"]["salmon"]
    log:
        op.join(config["base"], 'runs', config["run_name"], 'run_salmon_genes_chromium.log')
    shell:
        """
    mkdir -p {params.processing_path}
    cd {params.processing_path}

    ({params.salmon} alevin \
    -l ISR \
    -1 {params.cb} \
    -2 {params.r2} \
    --chromiumV3  \
    -i {params.salmon_idx} \
    -p {threads} -o {params.processing_path} \
    --tgMap {input.tgmap} ) 2> {log}

    touch -c {output}
        """

## salmon end
