#!/usr/bin/env snakemake -s
## 
## Started 12 Nov 2020
##
## Izaskun Mallona
## GPLv3

import os
import os.path as op
from glob import glob
import re

# import pandas as pd

print('This is human')
print('seqwell')
print('this comes from https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE132044')

## Folder structure start --------------------------------------------------------------------- ##


## config file start ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# configfile: "config.yaml"
# validate(config, "schemas/config.schema.yaml")

# samples = pd.read_csv(config["samples"], sep = '\t').set_index("id", drop=False)
#@FIXME to be moved to config, not hardcoded!
BASE = op.join('/home', 'imallona', 'repeats_sc')
NTHREADS = 50
PER_TASK_MAX_THREADS = 10

LOCAL_MEM_GB = 100

RUN_NAME  = 'ding_seqwell'
RUN_TECH = 'seqwell'
GENOME = 'GRCh38'
GENOME_SHORT= 'hg38'
CONF = op.join(BASE, "data", RUN_NAME, 'seqwell_ding.conf')

# read1: {
#   CB1: [1, 12],
#   UMI: [13, 20]
# },
NUM_CELLS = 6038
BARCODE_PATTERN = 'CCCCCCCCCCCCNNNNNNNN'


GENOME_URL = 'ftp://ftp.ensembl.org/pub/release-98/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz'
GENES_GTF_URL = 'ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_33/gencode.v33.primary_assembly.annotation.gtf.gz'
REP_GTF_URL = 'hg38_rmsk.gtf.gz'

GTF_MAKING_SCRIPT = '~/src/repeats_sc/04_snakemake/gtf_maker.R'
GTF_PARSING_RSCRIPT = '~/src/repeats_sc/04_snakemake/gtf_parser.R'
FEATURECOUNTS_RSCRIPT= '~/src/repeats_sc/04_snakemake/scripts/plot_featurecounts_profile.R'

BOWTIE_BUILD = '/home/imallona/soft/bowtie/bowtie-1.2.3/bowtie-build'
BOWTIE = '/home/imallona/soft/bowtie/bowtie-1.2.3/bowtie'

##pigz 2.3.1
PIGZ = '/usr/bin/pigz'
BIOPYTHON_CONVERT='biopython.convert'
STAR = '~/soft/star/STAR-2.7.3a/source/STAR'
FEATURECOUNTS = '~/soft/subread/subread-2.0.0-source/bin/featureCounts'
# SALMON = '~/soft/salmon/salmon-1.1.0_linux_x86_64/bin/salmon'
SALMON='~/soft/salmon/salmon-1.2.1/bin/salmon'
CELLRANGER = '~/soft/cellranger/cellranger-3.1.0/cellranger'
BIOAWK = '~/soft/bioawk/bioawk'
BEDTOOLS = '~/soft/bedtools/bedtools-2.29.2/bin/bedtools'
Rscript = '/usr/local/R/R-4.1.0/bin/Rscript'
FASTQDUMP= '~/soft/sra-toools/sratoolkit.2.10.4-ubuntu64/bin/fastq-dump' # fastq-dump : 2.10.4
PREFETCH= '~/soft/sra-toools/sratoolkit.2.10.4-ubuntu64/bin/prefetch' # fastq-dump : 2.10.4
VDBVALIDATE= '~/soft/sra-toools/sratoolkit.2.10.4-ubuntu64/bin/vdb-validate' # fastq-dump : 2.10.4
# FASTQDUMP= '~/soft/sra-toools/sratoolkit.2.10.5-ubuntu64/bin/fastq-dump' #
# FASTERQDUMP= '~/soft/sra-toools/sratoolkit.2.10.5-ubuntu64/bin/fasterq-dump' #
# VDB_VALIDATE = '~/soft/sra-toools/sratoolkit.2.10.5-ubuntu64/bin/vdb-validate'
BEDOPS = '~/soft/bedops/bedops-2.4.39/bin/'
## FASTQS, = glob_wildcards(op.join(BASE, "data", RUN_NAME, "{sample}.fastq.gz"))


## include: "/home/imallona/src/repeats_sc/04_snakemake/rnaseq_like_human_paired_end.snmk"
include: "/home/imallona/src/repeats_sc/04_snakemake/not_chromium_per_sample_flow.snmk"

try:
   if not op.exists(op.dirname(op.join(BASE, 'annotation'))):
      os.makedirs(op.join(BASE, 'annotation'))
except OSError as err:
   print(err)
      
for item in ['bowtie', 'star', 'salmon']:
   try:
      if not op.exists(op.dirname(op.join(BASE, 'indices', item))):
         os.makedirs(op.join(BASE, 'indices', item))
   except OSError as err:
      print(err)


# https://www.ncbi.nlm.nih.gov/Traces/study/?acc=PRJNA545730&o=acc_s%3Aa
def write_config(fn):
   conf = CONF
   path = op.join(BASE, "data", RUN_NAME)
   if not op.exists(path):
      os.makedirs(path)

      # this is the full dataset; but
      # one of the two showed odd results (suppl table 2), let's try to check which is it: start with the female
   with open(conf, "w+") as fh:
      fh.writelines("""SRR9169186,RNA-Seq,89,5674919104,PRJNA545730,SAMN11913213,3536490842,GEO,public,"fastq,sra","gs,ncbi,s3","gs.US,ncbi.public,s3.us-east-1",SRX5943521,Illumina HiSeq 2500,PAIRED,cDNA,TRANSCRIPTOMIC,Homo sapiens,ILLUMINA,2019-06-05T00:00:00Z,GSM3836757,SRP200058,GSM3836757,Seq-Well,male,Peripheral blood mononuclear cell,,
SRR9169418,RNA-Seq,78,7001443410,PRJNA545730,SAMN11913235,6176815135,GEO,public,"fastq,sra","gs,ncbi,s3","gs.US,ncbi.public,s3.us-east-1",SRX5943533,Illumina HiSeq 2500,PAIRED,cDNA,TRANSCRIPTOMIC,Homo sapiens,ILLUMINA,2019-06-05T00:00:00Z,GSM3836769,SRP200058,GSM3836769,Seq-Well,male,Peripheral blood mononuclear cell,,
SRR9169419,RNA-Seq,78,6402295926,PRJNA545730,SAMN11913234,5626965876,GEO,public,"fastq,sra","gs,ncbi,s3","gs.US,ncbi.public,s3.us-east-1",SRX5943534,Illumina HiSeq 2500,PAIRED,cDNA,TRANSCRIPTOMIC,Homo sapiens,ILLUMINA,2019-06-05T00:00:00Z,GSM3836770,SRP200058,GSM3836770,Seq-Well,male,Peripheral blood mononuclear cell,,
SRR9169212,RNA-Seq,110,6190217220,PRJNA545730,SAMN11915469,3539712376,GEO,public,"fastq,sra","gs,ncbi,s3","gs.US,ncbi.public,s3.us-east-1",SRX5943786,Illumina HiSeq 2500,PAIRED,cDNA,TRANSCRIPTOMIC,Homo sapiens,ILLUMINA,2019-06-05T00:00:00Z,GSM3837166,SRP200058,GSM3837166,Seq-Well,female,Peripheral blood mononuclear cell,,
SRR9169213,RNA-Seq,110,6063418680,PRJNA545730,SAMN11915468,3469243262,GEO,public,"fastq,sra","gs,ncbi,s3","gs.US,ncbi.public,s3.us-east-1",SRX5943787,Illumina HiSeq 2500,PAIRED,cDNA,TRANSCRIPTOMIC,Homo sapiens,ILLUMINA,2019-06-05T00:00:00Z,GSM3837167,SRP200058,GSM3837167,Seq-Well,female,Peripheral blood mononuclear cell,,
SRR9169214,RNA-Seq,110,7132052620,PRJNA545730,SAMN11915467,4091672046,GEO,public,"fastq,sra","gs,ncbi,s3","gs.US,ncbi.public,s3.us-east-1",SRX5943788,Illumina HiSeq 2500,PAIRED,cDNA,TRANSCRIPTOMIC,Homo sapiens,ILLUMINA,2019-06-05T00:00:00Z,GSM3837168,SRP200058,GSM3837168,Seq-Well,female,Peripheral blood mononuclear cell,,
""")


def get_samples(fn):
    # samples = pd.read_table(fn)
   if not op.isfile(fn):
      write_config(fn)
      
   samples = []
   with open(fn) as fh:
    for line in fh: 
        samples.append(line.split(',')[0].strip())
    return(samples)

  
def list_r1s(fn = CONF):
   fastqs_path = op.join(BASE, 'data', RUN_NAME)
   # fns = sorted(filter(re.compile('SR.*[0-9]_1.fastq.gz').match, os.listdir(fastqs_path)))
   fns = [x + '_1_trim.fastq.gz' for x in get_samples(fn)]
   return([op.join(fastqs_path, x) for x in fns])

# print(' '.join(list_r1s()))

def list_r2s(fn = CONF):
   # fns = sorted(filter(re.compile('SR.*[0-9]_2.fastq.gz').match, os.listdir(fastqs_path)))
   fastqs_path = op.join(BASE, 'data', RUN_NAME)
   fns = [x + '_2.fastq.gz' for x in get_samples(fn)]
   return([op.join(fastqs_path, x) for x in fns])


print(get_samples(CONF))

rule all:
    input:
        expand(op.join(BASE, "runs", RUN_NAME, 'star_transcriptome', 
                       "{srr}_Aligned.sortedByCoord.out.bam"),
               srr = get_samples(CONF)),
        expand(op.join(BASE, "runs", RUN_NAME, "star_transcriptome", 'repeats_no_overlap',
                       "{multimappers}",
                       "{srr}_Aligned.sortedByCoord.out.bam.featureCounts.gz"),
               srr = get_samples(CONF),
               multimappers = ['unique_reads', 'multimappers']),  
        expand(op.join(BASE, "runs", RUN_NAME, "star_transcriptome", 'genes',
                       "{srr}_star_transcriptome_genes.counts.summary.png"), 
               srr = get_samples(CONF)),
        expand(op.join(BASE, "runs", RUN_NAME, "star_transcriptome", 'repeats',
                       "{multimappers}", "{srr}_Aligned.sortedByCoord.out.bam.featureCounts.gz"), 
               srr = get_samples(CONF),
               multimappers = ['unique_reads', 'multimappers']),
        expand(op.join(BASE, "runs", RUN_NAME, "star_transcriptome", 'repeats',
                       "{multimappers}", "{srr}_Aligned.sortedByCoord.out.bam.featureCounts.gz"), 
               srr = get_samples(CONF),
               multimappers = ['unique_reads', 'multimappers']),
        expand(op.join(BASE, "runs", RUN_NAME, "star_transcriptome", 'repeats_no_overlap',
                       "{multimappers}",
                       "{srr}_Aligned.sortedByCoord.out.bam.featureCounts.gz"), 
               srr = get_samples(CONF),
               multimappers = ['unique_reads', 'multimappers']),
        expand(op.join(BASE, "runs", RUN_NAME, "bowtie_repeatome", "{multimappers}",
                       "{srr}.bam.featureCounts.gz"),
               srr = get_samples(CONF),
               multimappers = ['unique_reads']),
        # expand( op.join(BASE, 'runs', RUN_NAME, RUN_NAME + '_pbmc_seqwell_regress_nCount_{regress_ncount}_nFeature_{regress_nfeature}.html'),
        #         regress_ncount = ['TRUE', 'FALSE'],
        #         regress_nfeature = ['TRUE', 'FALSE']),
        expand(op.join(BASE, "runs", RUN_NAME, "star_transcriptome", 'genes',
                       "{srr}_Aligned.sortedByCoord.out.bam.featureCounts.gz"),
              srr = get_samples(CONF)),
        expand(op.join(BASE, 'runs', RUN_NAME, 'alevin', 'repeats', "{srr}",  'alevin',
                       'flag_seqwell.log'),
               srr = get_samples(CONF)),
        expand(op.join(BASE, 'runs', RUN_NAME, 'alevin', 'genes', "{srr}", 'alevin',
                       'flag_seqwell.log'),
               srr = get_samples(CONF)),
        expand(op.join(BASE, "runs", RUN_NAME, "star_transcriptome", 'genes',
                       "{srr}_Aligned.sortedByCoord.out.bam.featureCounts.gz"), 
               srr = get_samples(CONF)),
        expand(op.join(BASE, "runs", RUN_NAME, "star_transcriptome", 'repeats',
                       "{multimappers}", "{srr}_Aligned.sortedByCoord.out.bam.featureCounts.gz"), 
               srr = get_samples(CONF),
               multimappers = ['unique_reads', 'multimappers']),
        expand(op.join(BASE, "runs", RUN_NAME, "bowtie_repeatome", "{multimappers}",
                       "{srr}.bam.featureCounts.gz"),
               srr = get_samples(CONF),
               multimappers = ['unique_reads', 'multimappers']),
        # expand(op.join(BASE, "runs", RUN_NAME, "{srr}_cb_whitelist.txt.gz"),
        #        srr = get_samples(CONF))


rule run_alevin_seqwell_repeats:
    input:        
        tgmap = op.join(BASE, 'indices', 'salmon', GENOME, 'repeats_salmon', 'txp2gene.tsv'),
        idx_tracker = op.join(BASE, 'indices', 'salmon', GENOME, 'repeats_salmon', 'duplicate_clusters.tsv'),
        # cb = list_r1s(),
        # r2 = list_r2s()
        cb = op.join(BASE, 'data', RUN_NAME, "{srr}_1_trim.fastq.gz"),
        r2 = op.join(BASE, 'data', RUN_NAME, "{srr}_2.fastq.gz")   
        
    output:
        alevin = op.join(BASE, 'runs', RUN_NAME, 'alevin', 'repeats', "{srr}",  'alevin', 'quants_mat.gz'),
        flag = op.join(BASE, 'runs', RUN_NAME, 'alevin', 'repeats', "{srr}",   'alevin',
                       'flag_seqwell.log')
    threads:
        NTHREADS
    params:
        fastqs_path = op.join(BASE, 'data', RUN_NAME),
        processing_path = op.join(BASE, 'runs', RUN_NAME, 'alevin', 'repeats', "{srr}"),
        salmon_idx = op.join(BASE, 'indices', 'salmon', GENOME, 'repeats_salmon'),
        # cb = ' '.join(list_r1s()),
        # r2 = ' '.join(list_r2s()),
        num_cells = NUM_CELLS,
        cb = op.join(BASE, 'data', RUN_NAME, "{srr}_1_trim.fastq.gz"),
        r2 = op.join(BASE, 'data', RUN_NAME, "{srr}_2.fastq.gz")
    log:
        op.join(BASE, 'runs', RUN_NAME, 'run_salmon_repeats_seqwell_{srr}.log')
    shell:
        """
    mkdir -p {params.processing_path}
    cd {params.processing_path}

    ({SALMON} alevin \
    -l ISR \
    -1 {params.cb} \
    -2 {params.r2} \
    --end 5 --umiLength 8 --barcodeLength 12  \
    --dumpFeatures \
    -i {params.salmon_idx} \
    -p {threads} -o {params.processing_path} \
    --tgMap {input.tgmap} ) 2> {log}

    touch -c {output.alevin}
    touch {output.flag}
        """

        
rule run_alevin_seqwell_genes:
    input:        
        tgmap = op.join(BASE, 'indices', 'salmon', GENOME, 'genes_salmon', 'txp2gene.tsv'),
        idx_tracker = op.join(BASE, 'indices', 'salmon', GENOME, 'genes_salmon', 'duplicate_clusters.tsv'),
        # cb = list_r1s(),
        # r2 = list_r2s()# ,
        cb = op.join(BASE, 'data', RUN_NAME, "{srr}_1_trim.fastq.gz"),
        r2 = op.join(BASE, 'data', RUN_NAME, "{srr}_2.fastq.gz")    
        
    output:
        alevin = op.join(BASE, 'runs', RUN_NAME, 'alevin', 'genes', "{srr}",
                         'alevin', 'quants_mat.gz'),
        flag = op.join(BASE, 'runs', RUN_NAME, 'alevin', 'genes',  "{srr}", 'alevin',
                       'flag_seqwell.log')
    threads:
        NTHREADS
    params:
        fastqs_path = op.join(BASE, 'data', RUN_NAME),
        processing_path = op.join(BASE, 'runs', RUN_NAME, 'alevin', 'genes', "{srr}"),
        salmon_idx = op.join(BASE, 'indices', 'salmon', GENOME, 'genes_salmon'),
        # cb = ' '.join(list_r1s()),
        # r2 = ' '.join(list_r2s()),
        num_cells = NUM_CELLS,
        cb = op.join(BASE, 'data', RUN_NAME, "{srr}_1_trim.fastq.gz"),
        r2 = op.join(BASE, 'data', RUN_NAME, "{srr}_2.fastq.gz")
    log:
        op.join(BASE, 'runs', RUN_NAME, 'run_salmon_genes_seqwell_{srr}.log')
    shell:
        """
    mkdir -p {params.processing_path}
    cd {params.processing_path}

    ({SALMON} alevin \
    -l ISR \
    -1 {params.cb} \
    -2 {params.r2} \
    --end 5 --umiLength 8 --barcodeLength 12 \
    --dumpFeatures \
    -i {params.salmon_idx} \
    -p {threads} -o {params.processing_path} \
    --tgMap {input.tgmap} ) 2> {log}

    touch -c {output.alevin}
    touch {output.flag}
        """


        
## because structure is 12 CB +8 UMI and then an oligodt follows

# Seq-Well-polyT: {
#     num_read: 2,

#     read1: {
#       CB1: [1, 12],
#       UMI: [13, 20],
#       polyT: [21, 25]
#     },

#     read2: {
#       cDNA: []
#     }
# }
rule trim_r1s_to_20:
    input:
        r1 = op.join(BASE, "data", RUN_NAME, "{srr}_1.fastq.gz")
    output:
        r1_trim = temp(op.join(BASE, "data", RUN_NAME, "{srr}_1_trim.fastq.gz"))
    threads:
        1
    shell:  """
    {PIGZ} -p {threads} --decompress --stdout {input.r1} | sed 's/.1 / /g' | \
      awk 'NR%4==1{{a=$0;}} 
      NR%4==2{{take=substr($0,1,20)}} 
      NR%4==3{{c=$0}} 
      NR%4==0{{d=substr($0,1,20); print a"\\n"take"\\n+\\n"d;}}' | {PIGZ} -p {threads} --stdout > {output.r1_trim}
    """

rule get_data:
    input:
        conf = CONF
    output:
        # r1_uncomp = temp(op.join(BASE, "data", RUN_NAME, "{srr}_1.fastq")),
        # r2_uncomp = temp(op.join(BASE, "data", RUN_NAME, "{srr}_2.fastq")),
        r1 = op.join(BASE, "data", RUN_NAME, "{srr}_1.fastq.gz"),
        r2 = op.join(BASE, "data", RUN_NAME, "{srr}_2.fastq.gz"),
        r3 = op.join(BASE, "data", RUN_NAME, "{srr}_3.fastq.gz")
    params:
        path = op.join(BASE, "data", RUN_NAME)
    threads:
        1
    shell:
        """
        mkdir -p {params.path}
        cd {params.path}

        # # {FASTQDUMP} -I --gzip --split-files {wildcards.srr}
        
        # {PREFETCH} {wildcards.srr} --output-file {wildcards.srr}.sra &> \
        #        {wildcards.srr}_prefetch.log

        # {VDBVALIDATE} {wildcards.srr}.sra &> {wildcards.srr}_vdbvalidation.log
            
        # {FASTQDUMP}  --gzip --split-files  {wildcards.srr}.sra
       
        mkdir -p {params.path}
        cd {params.path}

        if [ -f "{output.r1}" ]
        then
           echo "skipped download"
           touch {output.r1}
           touch {output.r2}
           touch {output.r3}
        else 
            # {FASTQDUMP} -I --gzip --split-files {wildcards.srr}
            
            {PREFETCH} {wildcards.srr} --output-file {wildcards.srr}.sra &> \
                   {wildcards.srr}_prefetch.log
    
            {VDBVALIDATE} {wildcards.srr}.sra &> {wildcards.srr}_vdbvalidation.log
            
            {FASTQDUMP}  --gzip --split-files  {wildcards.srr}.sra
        fi

        """


rule knit_report_seqwell_ad_hoc_ding:
    input:
        genes_featurecounts = op.join(BASE, 'runs', RUN_NAME, 'star_transcriptome'),
        repeats_star_multi = op.join(BASE, 'runs', RUN_NAME, 'star_transcriptome', 'repeats',
                                     'multimappers'),
        repeats_star_unique = op.join(BASE, 'runs', RUN_NAME, 'star_transcriptome', 'repeats',
                                      'unique_reads'),
        repeats_bowtie_multi = op.join(BASE, 'runs', RUN_NAME, 'bowtie_repeatome', 'multimappers'),
        repeats_bowtie_unique = op.join(BASE, 'runs', RUN_NAME, 'bowtie_repeatome',
                                        'unique_reads'),        
        repeats_only_multi = op.join(BASE, "runs", RUN_NAME, 'star_transcriptome',
                                     'repeats_no_overlap', "multimappers"),
        repeats_only_unique = op.join(BASE, "runs", RUN_NAME, 'star_transcriptome',
                                                'repeats_no_overlap', 'unique_reads'),
        genes_alevin = op.join(BASE, 'runs', RUN_NAME, 'alevin', 'genes'),
        repeats_alevin = op.join(BASE, 'runs', RUN_NAME, 'alevin', 'repeats'),
        config_fn = CONF
    params:
        rmd = 'summarize_alevin_multiple_samples.Rmd',
        run_name = "Seq-Well"
    output:
        html = op.join(BASE, 'runs', RUN_NAME, RUN_NAME + '_pbmc_seqwell_regress_nCount_{regress_ncount}_nFeature_{regress_nfeature}.html'),
        rds = op.join(BASE, 'runs', RUN_NAME, RUN_NAME + '_pmbc_seqwell_regress_nCount_{regress_ncount}_nFeature_{regress_nfeature}.rds'),
        aris = op.join(BASE, 'runs', RUN_NAME, RUN_NAME + '_aris_regress_nCount_{regress_ncount}_nFeature_{regress_nfeature}.rds'),
        cobra = op.join(BASE, 'runs', RUN_NAME, RUN_NAME + '_cobra_regress_nCount_{regress_ncount}_nFeature_{regress_nfeature}.rds'),
        markers  = op.join(BASE, 'runs', RUN_NAME, RUN_NAME + '_markers_regress_nCount_{regress_ncount}_nFeature_{regress_nfeature}.rds')
        
    log:
        op.join(BASE, 'runs', RUN_NAME, RUN_NAME + 'summarize_seqwell_run_regress_nCount_{regress_ncount}_nFeature_{regress_nfeature}.log')
    shell:
        """
        {Rscript} -e 'rmarkdown::render(\"{params.rmd}\", 
          output_file = \"{output.html}\", 
          params = list(identifier = \"{params.run_name}\", 
          genes_alevin = \"{input.genes_alevin}\",
          repeats_alevin = \"{input.repeats_alevin}\",
          repeats_star_unique = \"{input.repeats_star_unique}\",
          repeats_star_multi = \"{input.repeats_star_multi}\",
          repeats_bowtie_unique = \"{input.repeats_bowtie_unique}\",
          repeats_bowtie_multi = \"{input.repeats_bowtie_multi}\",
          repeats_only_unique = \"{input.repeats_only_unique}\",
          repeats_only_multi = \"{input.repeats_only_multi}\",
          genes_featurecounts = \"{input.genes_featurecounts}\",
          seurat_output = \"{output.rds}\", 
          aris_output = \"{output.aris}\", 
          cobra_output = \"{output.cobra}\", 
          markers_output = \"{output.markers}\",
          regress_genes_nCount = \"{wildcards.regress_ncount}\", \
          regress_genes_nFeature = \"{wildcards.regress_nfeature}\",
          config_fn = \"{input.config_fn}\"))' &> {log}
        """


## we assume the first 20 reads from read1 are the umis + CB. 

# read1: {
#   CB1: [1, 12],
#   UMI: [13, 20]
# },

rule deal_with_umis_r2:
    input:
        r1 = op.join(BASE, "data", RUN_NAME, "{srr}_1.fastq.gz"),
        r2 = op.join(BASE, "data", RUN_NAME, "{srr}_2.fastq.gz")
    output:
        r2_umi = temp(op.join(BASE, "data", RUN_NAME, "{srr}_2_umi.fastq.gz"))
    threads:
        1
    shell: """
    join <(zcat {input.r2} | sed 's/.2 / /g' | awk '{{OFS=FS=" "; print $1}}' | nl)  \
       <(zcat {input.r1} | awk '{{OFS=FS=" "; print $1}}' | nl ) | \
       awk '(NR%4==1){{a=$2;}}(NR%4==2){{umi=substr($3,13,8);cb=substr($3,0,12); b=$2}}(NR%4==3){{c=$2}}(NR%4==0){{d=$2;print a"_"cb"_"umi".2\\n"b"\\n+\\n"d;}}' | {PIGZ} -p {threads} --stdout > {output.r2_umi}

    """


## we assume the first 20 reads from read1 are the umis + CB

# read1: {
#   CB1: [1, 12],
#   UMI: [13, 20]
# },
rule deal_with_umis_r1:
    input:
        r1 = op.join(BASE, "data", RUN_NAME, "{srr}_1.fastq.gz")
    output:
        r1_umi = temp(op.join(BASE, "data", RUN_NAME, "{srr}_1_umi.fastq.gz"))
    threads:
        1
    shell:  """
    {PIGZ} -p {threads} --decompress --stdout {input.r1} | sed 's/.1 / /g' | \
      awk 'NR%4==1{{a=$1;}} 
      NR%4==2{{umi=substr($0,13,8);cb=substr($0,0,12);b_without=substr($0,20)}} 
      NR%4==3{{c=$0}} 
      NR%4==0{{d=substr($0,13); print a"_"cb"_"umi".1\\n"b_without"\\n+\\n"d;}}' | {PIGZ} -p {threads} --stdout > {output.r1_umi}

    """

