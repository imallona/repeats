#!/usr/bin/env snakemake -s
## 
## Started 14th Jan 2020
##
## Izaskun Mallona
## GPLv3

import os.path as op
from glob import glob

RUN_NAME  = 'SRR8847571'
 # 3' v2 according to https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSM4286760
CHEMISTRY = 'SC3Pv2'
DEMUX = False
GENOME = 'GRCh38'

## Folder structure start --------------------------------------------------------------------- ##

#@FIXME to be moved to config, not hardcoded!
BASE = op.join('/home', 'imallona', 'repeats_sc')
NTHREADS = 50
LOCAL_MEM_GB = 100

## @FIXME to be moved to config
GENOME_URL = 'ftp://ftp.ensembl.org/pub/release-98/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz'
# GENES_GTF_URL =  'ftp://ftp.ensembl.org/pub/release-98/gtf/homo_sapiens/Homo_sapiens.GRCh38.98.gtf.gz'
GENES_GTF_URL = 'ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_33/gencode.v33.primary_assembly.annotation.gtf.gz'
REP_GTF_URL = 'http://labshare.cshl.edu/shares/mhammelllab/www-data/TEtranscripts/TE_GTF/GRCh38_rmsk_TE.gtf.gz'
# REP_GTF_URL = 'http://labshare.cshl.edu/shares/mhammelllab/www-data/TEtranscripts/TE_GTF/mm10_rmsk_TE.gtf.gz'
DFAM_EMBL_URL = 'https://www.dfam.org/releases/current/families/Dfam.embl.gz'
# TRANSCRIPTOME_URL= 'ftp://ftp.ensembl.org/pub/release-98/fasta/homo_sapiens/cdna/Homo_sapiens.GRCh38.cdna.all.fa.gz'
TRANSCRIPTOME_URL = 'ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_33/gencode.v33.pc_transcripts.fa.gz'

CELLRANGER_DB_URL = 'http://cf.10xgenomics.com/supp/cell-exp/refdata-cellranger-GRCh38-3.0.0.tar.gz'

CELLRANGER_DB_ID = 'refdata-cellranger-GRCh38-3.0.0'


## 

GTF_PARSING_RSCRIPT = '~/src/repeats_sc/04_snakemake/gtf_parser.R'
FEATURECOUNTS_RSCRIPT= '~/src/repeats_sc/04_snakemake/plot_featurecounts_profile.R'
GTF_MAKING_SCRIPT = '~/src/repeats_sc/04_snakemake/gtf_maker.R'

BOWTIE_BUILD = '/home/imallona/soft/bowtie/bowtie-1.2.3/bowtie-build'
BOWTIE = '/home/imallona/soft/bowtie/bowtie-1.2.3/bowtie'


## @FIXME to be moved to config

GTF_PARSING_RSCRIPT = '~/src/repeats_sc/04_snakemake/gtf_parser.R'

BOWTIE_BUILD = '/home/imallona/soft/bowtie/bowtie-1.2.3/bowtie-build'
BOWTIE = '/home/imallona/soft/bowtie/bowtie-1.2.3/bowtie'

##pigz 2.3.1
PIGZ = '/usr/bin/pigz'
BIOPYTHON_CONVERT='biopython.convert'
STAR = '~/soft/star/STAR-2.7.3a/source/STAR'
FEATURECOUNTS = '~/soft/subread/subread-2.0.0-source/bin/featureCounts'
SALMON = '~/soft/salmon/salmon-1.1.0_linux_x86_64/bin/salmon'
CELLRANGER = '~/soft/cellranger/cellranger-3.1.0/cellranger'
BIOAWK = '~/soft/bioawk/bioawk'
BEDTOOLS = '~/soft/bedtools/bedtools-2.29.2/bin/bedtools'
Rscript = '/usr/local/R/R-3.6.1/bin/Rscript'
FASTQDUMP= '~/soft/sra-toools/sratoolkit.2.10.4-ubuntu64/bin/fastq-dump' # fastq-dump : 2.10.4
PREFETCH= '~/soft/sra-toools/sratoolkit.2.10.4-ubuntu64/bin/prefetch' # fastq-dump : 2.10.4
VDBVALIDATE= '~/soft/sra-toools/sratoolkit.2.10.4-ubuntu64/bin/vdb-validate' # fastq-dump : 2.10.4

BEDOPS='~/soft/bedops/bedops-2.4.39/bin/bedops'

GSE144357_srr = ['SRR10974769', 'SRR10974768']

## config file start ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# configfile: "config.yaml"
# validate(config, "schemas/config.schema.yaml")

# samples = pd.read_csv(config["samples"], sep = '\t').set_index("id", drop=False)

# print(op.join(BASE, 'data', RUN_NAME))

# samples_R2, = glob_wildcards(op.join(BASE, "data", RUN_NAME, "{sample}_1.fastq.gz"))
# samples_R1, = glob_wildcards(op.join(BASE, "data", RUN_NAME, "{sample}_2.fastq.gz"))
# samples_I3, = glob_wildcards(op.join(BASE, "data", RUN_NAME, "{sample}_3.fastq.gz"))

# ## 
# this is needed to be hardcoded/config file

try:
   if not op.exists(op.dirname(op.join(BASE, 'annotation'))):
      os.makedirs(op.join(BASE, 'annotation'))
except OSError as err:
   print(err)
      
for item in ['bowtie', 'star', 'salmon']:
   try:
      if not op.exists(op.dirname(op.join(BASE, 'indices', item))):
         os.makedirs(op.join(BASE, 'indices', item))
   except OSError as err:
      print(err)
      
## Folder structure end ----------------------------------------------------------------------- ##

include: "/home/imallona/src/repeats_sc/04_snakemake/chromium_flow.snmk"

def get_samples(fn):
   # samples = ['SRR10974768', 'SRR10974769'] # 68 is MARS-Seq
   samples = ['SRR8847571']
   return(samples)
 
rule all:
    input:
        # op.join(BASE, 'indices', 'bowtie', 'repeatome', op.splitext(op.basename(REP_GTF_URL))[0] + '.1.ebwt'),
        # op.join(BASE, 'indices', 'star', 'repeatome', 'chrName.txt'),
        # op.join(BASE, 'indices', 'star', 'transcriptome', 'chrName.txt'),
        # op.join(BASE, 'annotation', 'repeatome_from_' + op.splitext(op.basename(REP_GTF_URL))[0]+ '.fa.gz'),
        # op.join(BASE, 'runs', RUN_NAME, 'summarize_cellranger_run_report.html'),
        # op.join(BASE, 'runs', RUN_NAME, 'summarize_cellranger_run_report_genes_regressed_out.html')
        # op.join(BASE, 'indices', 'cellranger', 'repeats_hg38', 'Log.out'),
        expand(op.join(BASE, 'runs', RUN_NAME, RUN_NAME + '_chromium_regress_nCount_{regress_ncount}_nFeature_{regress_nfeature}.html'),
               regress_ncount = ['TRUE', 'FALSE'],
               regress_nfeature = ['TRUE', 'FALSE']),
        op.join(BASE, 'runs', RUN_NAME, 'cellranger_standard', 'outs', 'web_summary.html'),
        op.join(BASE, 'runs', RUN_NAME, 'cellranger_repeats', 'outs', 'web_summary.html'),
        # op.join(BASE, "runs", RUN_NAME, 'count_repeats_on_cellranger_standard', RUN_NAME + "_repeats.counts.gz"),
         # op.join(BASE, "runs", RUN_NAME, "count_repeats_on_cellranger_standard",  RUN_NAME + "_transcriptome_repeats.counts.summary.png"),
        # op.join(BASE, "runs", RUN_NAME, "count_repeats_on_cellranger_standard_not_overlapping_genes",  RUN_NAME + "_transcriptome_repeats_not_genes.counts.summary.png"),
        op.join(BASE, "runs", RUN_NAME, 'count_repeats_on_cellranger_standard', 'split.flag'),
        # expand(op.join(BASE, "runs", RUN_NAME,
        #                "count_repeats_on_cellranger_standard",
        #                "{multimappers}",
        #                RUN_NAME + "_transcriptome_repeats.counts.summary.png"),
        #        multimappers = ['multimappers', 'unique_reads']),
        # expand(op.join(BASE, "runs", RUN_NAME,
        #                "count_repeats_on_cellranger_standard_not_overlapping_genes",
        #                "{multimappers}",
        #                RUN_NAME + "_transcriptome_repeats_not_genes.counts.summary.png"),
        #        multimappers = ['multimappers', 'unique_reads']),
        # op.join(BASE, 'runs', RUN_NAME, 'alevin', 'genes', 'alevin', 'quants_mat.gz'),
        # op.join(BASE, 'runs', RUN_NAME, 'alevin', 'repeats', 'alevin', 'quants_mat.gz'),
        # # expand(op.join(BASE, 'runs', RUN_NAME, RUN_NAME + '_pbmc_alevin_regress_nCount_{regress_ncount}_nFeature_{regress_nfeature}.html'),
        # #        regress_ncount = ['TRUE', 'FALSE'],
        # #        regress_nfeature = ['TRUE', 'FALSE']),
        # expand(op.join(BASE, "runs", RUN_NAME, 'bowtie_repeatome',
        #                '{multimappers}',
        #                "all_cells_repeats.counts.gz"),
        #        multimappers = ['multimappers', 'unique_reads'])
        


# rule get_colon_cancer_lines_GSE144357:    
#     params:
#         path = op.join(BASE, 'runs', 'colon_cancer_lines_GSE144357'),
#         path_data = op.join(BASE, 'data', 'SRR10974769')
#     output:
#         op.join(BASE, 'runs', 'colon_cancer_lines_GSE144357', '{srr}_1.fastq.gz')
#     shell:
#         """
#         mkdir -p {params.path}
#         cd {params.path}
#         {FASTQDUMP} -I --gzip --split-files {wildcards.srr}

#         cd {params.path_data}
#         ln -s SRR10974769_1.fastq.gz SRR10974769_S1_L001_R2_001.fastq.gz
#         ln -s SRR10974769_2.fastq.gz SRR10974769_S1_L001_R1_001.fastq.gz
#         ln -s SRR10974769_3.fastq.gz SRR10974769_S1_L001_I1_001.fastq.gz

#         """


# [imallona@imlsportmacquarie SRR8847571]$ zcat *1.fastq.gz | head -4
# @SRR8847571.1 A00454:60:HGT75DMXX:1:1101:2076:1016 length=8
# GAGGATCT
# +SRR8847571.1 A00454:60:HGT75DMXX:1:1101:2076:1016 length=8
# FFFFFFFF
# [imallona@imlsportmacquarie SRR8847571]$ zcat *2.fastq.gz | head -4
# @SRR8847571.1 A00454:60:HGT75DMXX:1:1101:2076:1016 length=26
# CCATTCGGTCGTTGTATTCGTTTAGG
# +SRR8847571.1 A00454:60:HGT75DMXX:1:1101:2076:1016 length=26
# FFFFFFFFFFFFFFFFFFFFFFFFFF
# [imallona@imlsportmacquarie SRR8847571]$ zcat *3.fastq.gz | head -4
# @SRR8847571.1 A00454:60:HGT75DMXX:1:1101:2076:1016 length=96
# CGATAATATCAGGATCACAAAAGATACCTTTTCACATTACTTTTAATTTCCTCTCTGTATTTTATCCAATAGCGTAAGACAATAAGAAGATAAAGT
# +SRR8847571.1 A00454:60:HGT75DMXX:1:1101:2076:1016 length=96
# FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF::FFFFFFFF:FFFF

# read 1 should contain the cell barcode and UMI tag -> 2.fastq.gz here
# read 2 should contain cDNA sequence -> 3.fastq.gz here
# i1 should contain the sample index -> 1.fastq.gz here

# the index reads contain the sample index

rule get_data:
    priority:
        100
    params:
        path = op.join(BASE, 'data', RUN_NAME),
        path_data = op.join(BASE, 'data', RUN_NAME),
        srr = RUN_NAME
    output:
        cb = op.join(BASE, 'data', RUN_NAME, RUN_NAME + '_S1_L001_R2_001.fastq.gz'),
        r = op.join(BASE, 'data', RUN_NAME, RUN_NAME + '_S1_L001_R1_001.fastq.gz'),
        i1 = op.join(BASE, 'data', RUN_NAME, RUN_NAME + '_S1_L001_I1_001.fastq.gz'),
        tmp = temp(op.join(BASE, 'data', RUN_NAME, RUN_NAME + '.sra'))
    shell:
        """
        mkdir -p {params.path}
        cd {params.path}

        #{FASTQDUMP} -I --gzip --split-files {params.srr}
        
        {PREFETCH} {params.srr} --output-file {params.srr}.sra

        {VDBVALIDATE} {params.srr}.sra &> {params.srr}_vdbvalidation.log
            
        {FASTQDUMP}  --gzip --split-files  {params.srr}.sra
  
        cd {params.path_data}
        ln -s {params.srr}_1.fastq.gz {params.srr}_S1_L001_I1_001.fastq.gz

        ln -s {params.srr}_2.fastq.gz {params.srr}_S1_L001_R1_001.fastq.gz
        ln -s {params.srr}_3.fastq.gz {params.srr}_S1_L001_R2_001.fastq.gz

        """

## salmon start
# print(sorted(glob(op.join(BASE, 'data', RUN_NAME, RUN_NAME + '*R1*fastq.gz'))))

rule map_salmon_repeats_chromium:
    input:        
        tgmap = op.join(BASE, 'indices', 'salmon', GENOME, 'repeats_salmon', 'txp2gene.tsv'),
        idx_tracker = op.join(BASE, 'indices', 'salmon', GENOME, 'repeats_salmon', 'duplicate_clusters.tsv'),
        cb = op.join(BASE, 'data', RUN_NAME, RUN_NAME + '_S1_L001_R1_001.fastq.gz'),
        r = op.join(BASE, 'data', RUN_NAME, RUN_NAME + '_S1_L001_R2_001.fastq.gz'),
    output:
        op.join(BASE, 'runs', RUN_NAME, 'alevin', 'repeats', 'alevin', 'quants_mat.gz')
    threads:
        NTHREADS
    params:
        fastqs_path = op.join(BASE, 'data', RUN_NAME),
        processing_path = op.join(BASE, 'runs', RUN_NAME, 'alevin', 'repeats'),
        salmon_idx = op.join(BASE, 'indices', 'salmon', GENOME, 'repeats_salmon'),
        cb = op.join(BASE, 'data', RUN_NAME, RUN_NAME + '_S1_L001_R1_001.fastq.gz'),
        r = op.join(BASE, 'data', RUN_NAME, RUN_NAME + '_S1_L001_R2_001.fastq.gz'),
    log:
        op.join(BASE, 'runs', RUN_NAME, 'run_salmon_repeats_chromium.log')
    shell:
        """
    mkdir -p {params.processing_path}
    cd {params.processing_path}

    ({SALMON} alevin \
    -l ISR \
    -1 {params.cb} \
    -2 {params.r} \
    --chromium  \
    -i {params.salmon_idx} \
    -p {threads} -o {params.processing_path} \
    --tgMap {input.tgmap} ) 2> {log}

    touch -c {output}
        """
    

rule map_salmon_genes_chromium:
    input:        
        tgmap = op.join(BASE, 'indices', 'salmon', GENOME, 'genes_salmon', 'txp2gene.tsv'),
        idx_tracker = op.join(BASE, 'indices', 'salmon', GENOME, 'genes_salmon', 'duplicate_clusters.tsv'),
        cb = op.join(BASE, 'data', RUN_NAME, RUN_NAME + '_S1_L001_R1_001.fastq.gz'),
        r = op.join(BASE, 'data', RUN_NAME, RUN_NAME + '_S1_L001_R2_001.fastq.gz')        
    output:
        op.join(BASE, 'runs', RUN_NAME, 'alevin', 'genes', 'alevin', 'quants_mat.gz')
    threads:
        NTHREADS
    params:
        fastqs_path = op.join(BASE, 'data', RUN_NAME),
        processing_path = op.join(BASE, 'runs', RUN_NAME, 'alevin', 'genes'),
        salmon_idx = op.join(BASE, 'indices', 'salmon', GENOME, 'genes_salmon'),
        cb = op.join(BASE, 'data', RUN_NAME, RUN_NAME + '_S1_L001_R1_001.fastq.gz'),
        r = op.join(BASE, 'data', RUN_NAME, RUN_NAME + '_S1_L001_R2_001.fastq.gz')  
    log:
        op.join(BASE, 'runs', RUN_NAME, 'run_salmon_genes_chromium.log')
    shell:
        """
    mkdir -p {params.processing_path}
    cd {params.processing_path}

    ({SALMON} alevin \
    -l ISR \
    -1 {params.cb} \
    -2 {params.r} \
    --chromium  \
    -i {params.salmon_idx} \
    -p {threads} -o {params.processing_path} \
    --tgMap {input.tgmap} ) 2> {log}

    touch -c {output}
        """

## salmon end


## chromium start


rule run_cellranger_repeats:
    input:
        flag = op.join(BASE, 'data', RUN_NAME, RUN_NAME + '_S1_L001_I1_001.fastq.gz'),
        transcriptome = op.join(BASE, 'indices', 'cellranger', 'repeats_hg38', 'repeats_hg38')
    params:
        fastqs_path = op.join(BASE, 'data', RUN_NAME),
        sample_name = RUN_NAME,
        local_mem_gb = LOCAL_MEM_GB,
        processing_path = op.join(BASE, 'runs', RUN_NAME)
    output:
        op.join(BASE, 'runs', RUN_NAME, 'cellranger_repeats', 'outs', 'web_summary.html'),
        op.join(BASE, 'runs', RUN_NAME, 'cellranger_repeats', 'outs', 'filtered_feature_bc_matrix', 'barcodes.tsv.gz')
    threads:
        NTHREADS
    log:
        op.join(BASE, 'runs', RUN_NAME, 'cellranger_repeats', 'run.log')
    shell:
        """
        mkdir -p {params.processing_path}
        cd {params.processing_path}
        rm -rf cellranger_repeats
        
        {CELLRANGER} count --id=cellranger_repeats \
          --fastqs={params.fastqs_path} \
          --transcriptome={input.transcriptome} \
          --jobmode=local \
          --localcores={threads} \
          --chemistry={CHEMISTRY} \
          --sample={params.sample_name} \
          --localmem={params.local_mem_gb}
        """
        
rule run_cellranger_standard:
    input:
        flag = op.join(BASE, 'data', RUN_NAME, RUN_NAME + '_S1_L001_I1_001.fastq.gz'),
        transcriptome = op.join(BASE, 'indices', 'cellranger',
                                'refdata-cellranger-GRCh38-3.0.0')
    params:
        fastqs_path = op.join(BASE, 'data', RUN_NAME),
        sample_name = RUN_NAME,
        local_mem_gb = LOCAL_MEM_GB,
        processing_path = op.join(BASE, 'runs', RUN_NAME)
    output:
        op.join(BASE, 'runs', RUN_NAME, 'cellranger_standard', 'outs', 'web_summary.html'),
        op.join(BASE, 'runs', RUN_NAME, 'cellranger_standard', 'outs', 'filtered_feature_bc_matrix', 'barcodes.tsv.gz'),
        op.join(BASE, 'runs', RUN_NAME, 'cellranger_standard', 'outs', 'possorted_genome_bam.bam')
    threads:
        NTHREADS
    log:
        op.join(BASE, 'runs',  RUN_NAME, 'cellranger_standard', 'run.log')
    shell:
        """
        mkdir -p {params.processing_path}
        cd {params.processing_path}
        rm -rf cellranger_standard

        {CELLRANGER} count --id=cellranger_standard \
          --fastqs={params.fastqs_path} \
          --transcriptome={input.transcriptome} \
          --jobmode=local \
          --localcores={threads} \
          --chemistry={CHEMISTRY} \
          --sample={params.sample_name} \
          --localmem={params.local_mem_gb}
        """

        
## chromium end
