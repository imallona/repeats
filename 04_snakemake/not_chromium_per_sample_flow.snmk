#!/usr/bin/env snakemake -s
## 
## Started 17 Nov 2020
##
## Izaskun Mallona
## GPLv3

import os.path as op
from glob import glob






rule profile_featurecounts_run_bowtie:
    input:        
        summary = op.join(BASE, "runs", RUN_NAME, "bowtie_repeatome", '{multimappers}',
                          "{srr}_bowtie_repeats.counts.summary")
    params:
        path = op.join(BASE, "runs", RUN_NAME, "bowtie_repeatome", '{multimappers}'),
        script = FEATURECOUNTS_RSCRIPT,
        gtf = 'bowtie_repeatome'
    output:
        png = op.join(BASE, "runs", RUN_NAME, "bowtie_repeatome",  '{multimappers}',
                      "{srr}_bowtie_repeats.counts.summary.png")
    threads: 1
    shell:
       """
       cd {params.path}
       
       {Rscript} {params.script} --summary {input.summary} --output {output.png} --identifier {params.gtf}
       """

rule profile_featurecounts_run_genes:
    input:        
        summary = op.join(BASE, "runs", RUN_NAME, "star_transcriptome", "genes",
                          "{srr}_Aligned.sortedByCoord.out.bam.counts.summary")
    params:
        path = op.join(BASE, "runs", RUN_NAME, "star_transcriptome"),
        script = FEATURECOUNTS_RSCRIPT,
        gtf = 'star_transcriptome_genes'
    output:
        png = op.join(BASE, "runs", RUN_NAME, "star_transcriptome",  "genes",
                      "{srr}_star_transcriptome_genes.counts.summary.png")
    threads: 1
    shell:
       """
       cd {params.path}
       
       {Rscript} {params.script} --summary {input.summary} --output {output.png} --identifier {params.gtf}
       """

       
rule profile_featurecounts_run_repeats_on_transcriptome:
    input:        
        summary = op.join(BASE, "runs", RUN_NAME, "star_transcriptome", 'repeats',
                          "{multimappers}", "{srr}_Aligned.sortedByCoord.out.bam.counts.summary")
    params:
        path = op.join(BASE, "runs", RUN_NAME, "star_transcriptome", 'repeats', "{multimappers}"),
        script = FEATURECOUNTS_RSCRIPT,
        gtf = 'star_transcriptome_repeats'
    output:
        png = op.join(BASE, "runs", RUN_NAME, "star_transcriptome", 'repeats', "{multimappers}",
                      "{srr}_star_transcriptome_repeats.counts.summary.png")
    threads: 1
    shell:
       """
       cd {params.path}
       
       {Rscript} {params.script} --summary {input.summary} --output {output.png} --identifier {params.gtf}
       """

       
       
rule profile_featurecounts_run_repeats_no_overlap_on_transcriptome:
    input:        
        summary = op.join(BASE, "runs", RUN_NAME, "star_transcriptome", 'repeats_no_overlap',
                          "{multimappers}", "{srr}_repeats_no_overlap.counts.summary")
    params:
        path = op.join(BASE, "runs", RUN_NAME, "star_transcriptome", 'repeats_no_overlap',
                       "{multimappers}"),
        script = FEATURECOUNTS_RSCRIPT,
        gtf = 'star_transcriptome_repeats_no_overlap'
    output:
        png = op.join(BASE, "runs", RUN_NAME, "star_transcriptome", 'repeats_no_overlap',
                      "{multimappers}",
                     "{srr}_repeats_no_overlap.counts.summary.png")
    threads: 1
    shell:
       """
       cd {params.path}
       
       {Rscript} {params.script} --summary {input.summary} --output {output.png} --identifier {params.gtf}
       """
       
# rule profile_featurecounts_run:
#     input:        
#         summary = op.join(BASE, "runs", RUN_NAME, "{flavour}",
#                           "{srr}_{flavour}.counts.summary")
#     params:
#         path = op.join(BASE, "runs", RUN_NAME, "bowtie_repeatome"),
#         script = FEATURECOUNTS_RSCRIPT,
#         flavour = "{flavour}"
#     output:
#         png = op.join(BASE, "runs", RUN_NAME, "{flavour}",
#                       "{srr}_{flavour}.counts.summary.png")
#     threads: 1
#     shell:
#        """
#        cd {params.path}
       
#        {Rscript} {params.script} --summary {input.summary} --output {output.png} --identifier {params.flavour}
#        """
            
# @todo NOTE THE MULTIMAPPING ALLOWED!
rule featurecounts_repeats_repeatome_bowtie:
    input:
        bam = op.join(BASE, "runs", RUN_NAME, 'bowtie_repeatome', "{srr}.bam"),
        gtf = op.join(BASE, 'annotation', op.basename(REP_GTF_URL)),
        fake_repeatome_gtf = op.join(BASE, 'annotation', 'fake_repeatome_from_' + op.splitext(op.basename(REP_GTF_URL))[0]) + '.gtf.gz'
    output:
        counts  = temp(op.join(BASE, "runs", RUN_NAME, "bowtie_repeatome",  '{multimappers}',
                               "{srr}_bowtie_repeats.counts")),
        gz_counts = op.join(BASE, "runs", RUN_NAME, "bowtie_repeatome",  '{multimappers}',
                            "{srr}_bowtie_repeats.counts.gz"),
        detailed = temp(op.join(BASE, "runs", RUN_NAME, "bowtie_repeatome", '{multimappers}',
                                "{srr}.bam.featureCounts")),
        gz_detailed = op.join(BASE, "runs", RUN_NAME, "bowtie_repeatome", '{multimappers}',
                              "{srr}.bam.featureCounts.gz"),
        summary = op.join(BASE, "runs", RUN_NAME, "bowtie_repeatome",  '{multimappers}',
                          "{srr}_bowtie_repeats.counts.summary")
    params:
        path = op.join(BASE, "runs", RUN_NAME, "bowtie_repeatome", '{multimappers}')
    log :
        op.join(BASE, "runs", RUN_NAME, "bowtie_repeatome", '{multimappers}',
                "{srr}_bowtie_repeats_featurecounts.log"),
    threads:
        PER_TASK_MAX_THREADS
    # shell:
    #    """
    #    ## note multimappers are counted
    #    {FEATURECOUNTS} -T {threads} \
    #    -t exon \
    #    -g gene_id \
    #    -a {input.fake_repeatome_gtf} \
    #    -o  {output.counts} \
    #    -M \
    #    -R CORE \
    #    --Rpath {params.path} \
    #    {input.bam}  &> {log}

    #    ## any CB:UMI pair that was seen is removed from the output (awk array)
    #    grep 'Assigned' {output.detailed} | \
    #      awk -F'[_.]' '!x[$3$4];{{x[$3$4]++}}' | \
    #      sed 's/_/\t/g' | {PIGZ} --keep  -p {threads} --stdout > {output.gz_detailed}

    #    {PIGZ} --keep  -p {threads} {output.counts}       
    #    """
    run:
        if wildcards.multimappers == 'multimappers':
            shell("""      
       {FEATURECOUNTS} -T {threads} \
       -t exon \
       -g gene_id \
       -a {input.fake_repeatome_gtf} \
       -o  {output.counts} \
       -M \
       -R CORE \
       --Rpath {params.path} \
       {input.bam}  &> {log}

       # ## any CB:UMI pair that was seen is removed from the output (awk array)
       # grep 'Assigned' {output.detailed} | \
       #   awk -F'[_.]' '!x[$3$4];{{x[$3$4]++}}' | \
       #   sed 's/_/\t/g' |  awk '{{OFS=FS="\t"; print $2,$3,$6""$7""$8}}' | \
       #   {PIGZ} --keep  -p {threads} --stdout > {output.gz_detailed}

       grep 'Assigned' {output.detailed} | \
        awk 'BEGIN {{ "\\t"}}
        {{
            split ($1, a, "[_.]") 
            !x[a[3], a[4]]++;
            print a[3],a[4],$4
         }}' |  {PIGZ} --keep  -p {threads} --stdout > {output.gz_detailed}

       {PIGZ} --keep  -p {threads} {output.counts}  
            """)
        elif wildcards.multimappers == 'unique_reads':
            shell("""
                 ## note multimappers are counted
       {FEATURECOUNTS} -T {threads} \
       -t exon \
       -g gene_id \
       -a {input.fake_repeatome_gtf} \
       -o  {output.counts} \
       -R CORE \
       --Rpath {params.path} \
       {input.bam}  &> {log}

       ## any CB:UMI pair that was seen is removed from the output (awk array)
       # grep 'Assigned' {output.detailed} | \
       #   awk -F'[_.]' '!x[$3$4];{{x[$3$4]++}}' | \
       #   sed 's/_/\t/g' |  awk '{{OFS=FS="\t"; print $2,$3,$6""$7""$8}}' | \
       #   {PIGZ} --keep  -p {threads} --stdout > {output.gz_detailed}

       grep 'Assigned' {output.detailed} | \
        awk 'BEGIN {{ "\\t"}}
        {{
            split ($1, a, "[_.]") 
            !x[a[3], a[4]]++;
            print a[3],a[4],$4
         }}' |  {PIGZ} --keep  -p {threads} --stdout > {output.gz_detailed}

       {PIGZ} --keep  -p {threads} {output.counts}  
          
            """)

       # star_transcriptome_repeats.counts.summary
rule feature_counts_repeats_not_overlapping_genes:
    input:        
        bam=op.join(BASE, "runs", RUN_NAME, 'star_transcriptome', "{srr}_Aligned.sortedByCoord.out.bam"),
        gtf = op.join(BASE, 'annotation', op.basename(REP_GTF_URL) + '_minus_' + op.basename(GENES_GTF_URL))
    params:
        path = op.join(BASE, "runs", RUN_NAME, 'star_transcriptome'),
        subpath = op.join('repeats_no_overlap', '{multimappers}')
    output:
        counts  = temp(op.join(BASE, "runs", RUN_NAME, 'star_transcriptome', 'repeats_no_overlap',
                               '{multimappers}', "{srr}_repeats_no_overlap.counts")),
        gz_counts = op.join(BASE, "runs", RUN_NAME, 'star_transcriptome', 'repeats_no_overlap',
                            '{multimappers}', "{srr}_repeats_no_overlap.counts.gz"),
        detailed = temp(op.join(BASE, "runs", RUN_NAME, "star_transcriptome",
                                 'repeats_no_overlap', '{multimappers}',
                                "{srr}_Aligned.sortedByCoord.out.bam.featureCounts")),
        gz_detailed = op.join(BASE, "runs", RUN_NAME, "star_transcriptome", 'repeats_no_overlap',
                              '{multimappers}',
                              "{srr}_Aligned.sortedByCoord.out.bam.featureCounts.gz"),
        summary = op.join(BASE, "runs", RUN_NAME, "star_transcriptome", 'repeats_no_overlap',
                          '{multimappers}',
                          "{srr}_repeats_no_overlap.counts.summary")
        
    log :
        log = op.join(BASE, "runs",  RUN_NAME, 'star_transcriptome', 'repeats_no_overlap', '{multimappers}',
                      '{srr}_feature_counts_not_overlapping_genes.log'),
    threads:
        PER_TASK_MAX_THREADS
    run:
        if wildcards.multimappers == 'multimappers':
            shell("""      
       {FEATURECOUNTS} -T {threads} \
       -t exon \
       -g gene_id \
       -a {input.gtf} \
       -o  {output.counts} \
       -M \
       -R CORE \
       --Rpath {params.path}/{params.subpath} \
       {input.bam}  &> {log}

       ## any CB:UMI pair that was seen is removed from the output (awk array)
       # grep 'Assigned' {output.detailed} | \
       #   awk -F'[_.]' '!x[$3$4];{{x[$3$4]++}}' | \
       #   sed 's/_/\t/g' |  awk '{{OFS=FS="\t"; print $2,$3,$6""$7""$8}}' | \
       #   {PIGZ} --keep  -p {threads} --stdout > {output.gz_detailed}

       grep 'Assigned' {output.detailed} | \
        awk 'BEGIN {{ "\\t"}}
        {{
            split ($1, a, "[_.]") 
            !x[a[3], a[4]]++;
            print a[3],a[4],$4
         }}' |  {PIGZ} --keep  -p {threads} --stdout > {output.gz_detailed}

       {PIGZ} --keep  -p {threads} {output.counts}  
            """)
        elif wildcards.multimappers == 'unique_reads':
            shell("""
                 ## note multimappers are counted
       {FEATURECOUNTS} -T {threads} \
       -t exon \
       -g gene_id \
       -a {input.gtf} \
       -o  {output.counts} \
       -R CORE \
       --Rpath {params.path}/{params.subpath} \
       {input.bam}  &> {log}

       ## any CB:UMI pair that was seen is removed from the output (awk array)
       # grep 'Assigned' {output.detailed} | \
       #   awk -F'[_.]' '!x[$3$4];{{x[$3$4]++}}' | \
       #   sed 's/_/\t/g' |  awk '{{OFS=FS="\t"; print $2,$3,$6""$7""$8}}' | \
       #   {PIGZ} --keep  -p {threads} --stdout > {output.gz_detailed}

       grep 'Assigned' {output.detailed} | \
        awk 'BEGIN {{ "\\t"}}
        {{
            split ($1, a, "[_.]") 
            !x[a[3], a[4]]++;
            print a[3],a[4],$4
         }}' |  {PIGZ} --keep  -p {threads} --stdout > {output.gz_detailed}

       {PIGZ} --keep  -p {threads} {output.counts}            
            """)

rule featurecounts_genes:
    input:
        bam = op.join(BASE, "runs", RUN_NAME, 'star_transcriptome', "{srr}_Aligned.sortedByCoord.out.bam"),
        # expand(op.join(BASE, "runs", RUN_NAME, 'star_transcriptome', "{srr}_Aligned.sortedByCoord.out.bam"), srr = get_samples(op.join(BASE, 'data', RUN_NAME, 'celseq2_ding.conf'))),
        gtf = op.join(BASE, 'annotation', op.basename(GENES_GTF_URL))
    output:
        genes_counts  = temp(op.join(BASE, "runs",RUN_NAME, "star_transcriptome", 'genes', '{srr}_Aligned.sortedByCoord.out.bam.counts')),
        genes_gz_counts = op.join(BASE, "runs",RUN_NAME, "star_transcriptome", 'genes', '{srr}_Aligned.sortedByCoord.out.bam.counts.gz'),
        genes_detailed = temp(op.join(BASE, "runs", RUN_NAME, "star_transcriptome", 'genes', "{srr}_Aligned.sortedByCoord.out.bam.featureCounts")),
        genes_gz_detailed = op.join(BASE, "runs", RUN_NAME, "star_transcriptome", 'genes', "{srr}_Aligned.sortedByCoord.out.bam.featureCounts.gz"),
        genes_summary = op.join(BASE, "runs", RUN_NAME, "star_transcriptome",  "genes", "{srr}_Aligned.sortedByCoord.out.bam.counts.summary")
    params:
        path = op.join(BASE, "runs", RUN_NAME, 'star_transcriptome'),
        subpath = 'genes'
    log :
        op.join(BASE, "runs", RUN_NAME, "star_transcriptome", 'genes', "{srr}_star_genes_featurecounts.log"),
    threads:
        PER_TASK_MAX_THREADS
    shell:
       """
       {FEATURECOUNTS} -T {threads} \
       -t exon \
       -g gene_id \
       -a {input.gtf} \
       -o  {output.genes_counts} \
       -R CORE \
       --Rpath {params.path}/{params.subpath} \
       {input.bam}  &> {log}
 
       # ## any CB:UMI pair that was seen is removed from the output (awk array)
       # grep 'Assigned' {output.genes_detailed} | \
       # awk -F'[_.]' '!x[$3$4];{{x[$3$4]++}}' | cut -f2,3,6 | \
       # {PIGZ} --keep  -p {threads} --stdout > {output.genes_gz_detailed}

       # grep 'Assigned' {output.genes_detailed} |  \
       #   awk -F'[_.\t]' '{{OFS="\t"; print $3,$4, $8}}' | \
       #    {PIGZ} --keep  -p {threads} --stdout > {output.genes_gz_detailed}

      grep 'Assigned' {output.genes_detailed} | \
        awk 'BEGIN {{ "\\t"}}
        {{
            split ($1, a, "[_.]") 
            !x[a[3], a[4]]++;
            print a[3],a[4],$4
         }}' |  {PIGZ} --keep  -p {threads} --stdout > {output.genes_gz_detailed}

       {PIGZ} --keep -p {threads} {output.genes_counts}
       
       """


rule featurecounts_repeats_from_star:
    input:
        bam = op.join(BASE, "runs", RUN_NAME, 'star_transcriptome',
                      "{srr}_Aligned.sortedByCoord.out.bam"),
        gtf = op.join(BASE, 'annotation', op.basename(REP_GTF_URL))
    output:
        counts  = temp(op.join(BASE, "runs",RUN_NAME, "star_transcriptome", 'repeats',
                               '{multimappers}',
                               '{srr}_Aligned.sortedByCoord.out.bam.counts')),
        gz_counts = op.join(BASE, "runs",RUN_NAME, "star_transcriptome", 'repeats',
                            '{multimappers}', '{srr}_Aligned.sortedByCoord.out.bam.counts.gz'),
        detailed = temp(op.join(BASE, "runs", RUN_NAME, "star_transcriptome", 'repeats',
                                '{multimappers}', "{srr}_Aligned.sortedByCoord.out.bam.featureCounts")),
        gz_detailed = op.join(BASE, "runs", RUN_NAME, "star_transcriptome", 'repeats',
                              '{multimappers}',
                              "{srr}_Aligned.sortedByCoord.out.bam.featureCounts.gz"),
        summary = op.join(BASE, "runs", RUN_NAME, "star_transcriptome",  "repeats",
                          '{multimappers}',
                          "{srr}_Aligned.sortedByCoord.out.bam.counts.summary")
    params:
        path = op.join(BASE, "runs", RUN_NAME, 'star_transcriptome'),
        subpath = op.join('repeats', '{multimappers}')
    log :
        op.join(BASE, "runs", RUN_NAME, "star_transcriptome", 'repeats', '{multimappers}',
                "{srr}_star_repeats_featurecounts.log"),
    threads:
        PER_TASK_MAX_THREADS
    run:
        if wildcards.multimappers == 'multimappers':
           shell("""      
       {FEATURECOUNTS} -T {threads} \
       -t exon \
       -g gene_id \
       -a {input.gtf} \
       -o  {output.counts} \
       -M \
       -R CORE \
       --Rpath {params.path}/{params.subpath} \
       {input.bam}  &> {log}

       ## any CB:UMI pair that was seen is removed from the output (awk array)
       # grep 'Assigned' {output.detailed} | \
       #   awk -F'[_.]' '!x[$3$4];{{x[$3$4]++}}' | \
       #   sed 's/_/\t/g' |  awk '{{OFS=FS="\t"; print $2,$3,$6""$7""$8}}' | \
       #   {PIGZ} --keep  -p {threads} --stdout > {output.gz_detailed}

       grep 'Assigned' {output.detailed} | \
        awk 'BEGIN {{ "\\t"}}
        {{
            split ($1, a, "[_.]") 
            !x[a[3], a[4]]++;
            print a[3],a[4],$4
         }}' |  {PIGZ} --keep  -p {threads} --stdout > {output.gz_detailed}

       {PIGZ} --keep  -p {threads} {output.counts}  
            """)
        elif wildcards.multimappers == 'unique_reads':
           shell("""
                 ## note multimappers are counted
       {FEATURECOUNTS} -T {threads} \
       -t exon \
       -g gene_id \
       -a {input.gtf} \
       -o  {output.counts} \
       -R CORE \
       --Rpath {params.path}/{params.subpath} \
       {input.bam}  &> {log}

       ## any CB:UMI pair that was seen is removed from the output (awk array)
       # grep 'Assigned' {output.detailed} | \
       #   awk -F'[_.]' '!x[$3$4];{{x[$3$4]++}}' | \
       #   sed 's/_/\t/g' |  awk '{{OFS=FS="\t"; print $2,$3,$6""$7""$8}}' | \
       #   {PIGZ} --keep  -p {threads} --stdout > {output.gz_detailed}

       grep 'Assigned' {output.detailed} | \
        awk 'BEGIN {{ "\\t"}}
        {{
            split ($1, a, "[_.]") 
            !x[a[3], a[4]]++;
            print a[3],a[4],$4
         }}' |  {PIGZ} --keep  -p {threads} --stdout > {output.gz_detailed}

       {PIGZ} --keep  -p {threads} {output.counts}            
            """)

 
rule map_bowtie_repeatome_se:
    params:
        repeatome = op.join(BASE, 'indices', 'bowtie', GENOME, 'repeatome', op.splitext(op.basename(REP_GTF_URL))[0]),
        sample = RUN_NAME,
        path = op.join(BASE, "runs", RUN_NAME, "bowtie_repeatome")
    input:
        # fastq1 = op.join(BASE, "data", RUN_NAME, "{srr}_1_umi.fastq.gz"),
        fastq2 = op.join(BASE, "data", RUN_NAME, "{srr}_2_umi.fastq.gz"),
        repeatome_tag_file = op.join(BASE, 'indices', 'bowtie', GENOME, 'repeatome', op.splitext(op.basename(REP_GTF_URL))[0] + '.1.ebwt')
    output:
        op.join(BASE, "runs", RUN_NAME, "bowtie_repeatome", "{srr}.bam")
    log:
        op.join(BASE, "runs", RUN_NAME, "bowtie_repeatome", "{srr}_bowtie_repeatome.log")
    threads :
        NTHREADS
    shell:
        """
        mkdir -p {params.path}

        ( {BOWTIE} -v 2 \
        --threads {threads} \
        -m 1 --best --strata \
        --sam \
        --chunkmbs 128 {params.repeatome} \
        -q  <( {PIGZ} --keep --processes {threads} --to-stdout --decompress {input.fastq2} ) |  samtools view -@ {threads} -bS - > {output} ) 2> {log}
        """
        
# #@untested @todo @current
# ## fix to take into account the different indices to map against
# ## fix the cutadapt sickle thing
rule map_star_transcriptome_se:
    input:
        star_index_flag = op.join(BASE, 'indices', 'star', GENOME, 'transcriptome', 'chrName.txt'), 
        # fastq1 = op.join(BASE, "data", RUN_NAME, "{srr}_1_umi.fastq.gz"),
        fastq2 = op.join(BASE, "data", RUN_NAME,  "{srr}_2_umi.fastq.gz"),
    params:
        star_index = op.join(BASE, 'indices', 'star', GENOME, 'transcriptome'),
        path = op.join(BASE, "runs", RUN_NAME, 'star_transcriptome'),
        prefix = op.join(BASE, "runs", RUN_NAME, 'star_transcriptome', "{srr}_")
    output:
        bam = op.join(BASE, "runs", RUN_NAME, 'star_transcriptome', "{srr}_Aligned.sortedByCoord.out.bam"),
        star_tmp = temp(directory(op.join(BASE, 'runs', 'star_transcriptome', "{srr}_STARtmp")))
    threads:
        10
    log:
        op.join(BASE, "runs", RUN_NAME, 'star_transcriptome', "{srr}_star.log")
    # benchmark:
    #     op.join(BASE, 'run/{sample}/{sample}_star_benchmark.txt')
    shell:
        """
        mkdir -p {params.path}
        cd {params.path}
        
        {STAR} --genomeDir {params.star_index} \
        --readFilesIn {input.fastq2} \
        --runThreadN {threads} \
        --outFileNamePrefix {params.prefix} \
        --outSAMtype BAM SortedByCoordinate \
        --readFilesCommand zcat  2> {log}

        ## in case STAR managed to delete its own folder (doesn't always happen)
        mkdir -p {output.star_tmp}
        """

rule umitools_whitelist:
    input:
        r1_trim = op.join(BASE, "data", RUN_NAME, "{srr}_1_trim.fastq.gz")
    output:
        whitelist = temp(op.join(BASE, "runs", RUN_NAME, "{srr}_cb_whitelist.txt")),
        whitelist_gz = op.join(BASE, "runs", RUN_NAME, "{srr}_cb_whitelist.txt.gz")
    params:
        bc_pattern = BARCODE_PATTERN,
        num_cells = NUM_CELLS,
        threads = PER_TASK_MAX_THREADS
    log:
        op.join(BASE, "runs", RUN_NAME, "{srr}_cb_whitelist.log")
    shell:
        """
        umi_tools whitelist --stdin {input.r1_trim} \
                    --bc-pattern={params.bc_pattern} \
                    --set-cell-number={params.num_cells} \
                    --log = {log} \
                    -S {output.whitelist}

        {PIGZ} --keep  -p {threads} {output.whitelist}

    """
