#!/usr/bin/env snakemake -s
## 
## Started 14th Jan 2020
##
## Izaskun Mallona
## GPLv3

import os.path as op
from glob import glob
from snakemake.utils import validate

# config["run_name"]  = '5k_pbmc_v3'
# RUN_TECH = 'chromium'

# ## Folder structure start --------------------------------------------------------------------- ##


# #@FIXME to be moved to config, not hardcoded!
# config["base"] = op.join('/home', 'imallona', 'repeats_sc')
# config["params"]["nthreads"] = 50
# config["params"]["local_mem_gb"] = 100
# config["genome"]= 'GRCh38'

# ## @FIXME to be moved to config
# config["genome_url"] = 'ftp://ftp.ensembl.org/pub/release-98/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz'
# # GENES_GTF_URL =  'ftp://ftp.ensembl.org/pub/release-98/gtf/homo_sapiens/Homo_sapiens.GRCh38.98.gtf.gz'
# GENES_GTF_URL = 'ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_33/gencode.v33.primary_assembly.annotation.gtf.gz'
# REP_GTF_URL = 'http://labshare.cshl.edu/shares/mhammelllab/www-data/TEtranscripts/TE_GTF/GRCh38_rmsk_TE.gtf.gz'
# # REP_GTF_URL = 'http://labshare.cshl.edu/shares/mhammelllab/www-data/TEtranscripts/TE_GTF/mm10_rmsk_TE.gtf.gz'
# DFAM_EMBL_URL = 'https://www.dfam.org/releases/current/families/Dfam.embl.gz'
# # TRANSCRIPTOME_URL= 'ftp://ftp.ensembl.org/pub/release-98/fasta/homo_sapiens/cdna/Homo_sapiens.GRCh38.cdna.all.fa.gz'
# TRANSCRIPTOME_URL = 'ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_33/gencode.v33.pc_transcripts.fa.gz'

# CELLRANGER_DB_URL = 'http://cf.10xgenomics.com/supp/cell-exp/refdata-cellranger-GRCh38-3.0.0.tar.gz'
# CELLRANGER_DB_ID = 'refdata-cellranger-GRCh38-3.0.0'

# ## @FIXME to be moved to config

# GTF_PARSING_RSCRIPT = '~/src/repeats_sc/04_snakemake/gtf_parser.R'
# FEATURECOUNTS_RSCRIPT= '~/src/repeats_sc/04_snakemake/plot_featurecounts_profile.R'
# GTF_MAKING_SCRIPT = '~/src/repeats_sc/04_snakemake/gtf_maker.R'

# BOWTIE_BUILD = '/home/imallona/soft/bowtie/bowtie-1.2.3/bowtie-build'
# BOWTIE = '/home/imallona/soft/bowtie/bowtie-1.2.3/bowtie'

# ##pigz 2.3.1
# PIGZ = '/usr/bin/pigz'
# BIOPYTHON_CONVERT='biopython.convert'
# STAR = '~/soft/star/STAR-2.7.3a/source/STAR'
# FEATURECOUNTS = '~/soft/subread/subread-2.0.0-source/bin/featureCounts'
# SALMON = '~/soft/salmon/salmon-1.1.0_linux_x86_64/bin/salmon'
# CELLRANGER = '~/soft/cellranger/cellranger-3.1.0/cellranger'
# BIOAWK = '~/soft/bioawk/bioawk'
# BEDTOOLS = '~/soft/bedtools/bedtools-2.29.2/bin/bedtools'
# Rscript = '/usr/local/R/R-4.0.5/bin/Rscript'
# FASTQ_DUMP= '~/soft/sra-toools/sratoolkit.2.10.4-ubuntu64/bin/fastq-dump' # fastq-dump : 2.10.4
# VDB_VALIDATE = '~/soft/sra-toools/sratoolkit.2.10.4-ubuntu64/bin/vdb-validate'
# BEDOPS='~/soft/bedops/bedops-2.4.39/bin/bedops'

# GSE144357_srr = ['SRR10974769', 'SRR10974768']

# ## config file start ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# # configfile: "config.yaml"
# # validate(config, "schemas/config.schema.yaml")

# # samples = pd.read_csv(config["samples"], sep = '\t').set_index("id", drop=False)

# config["run_name"]  = '5k_pbmc_v3'
# config["chemistry"] = 'SC3Pv3'
# DEMUX = False

# samples_R2, = glob_wildcards(op.join(config["base"], "data", config["run_name"], "{sample}_1.fastq.gz"))
# samples_R1, = glob_wildcards(op.join(config["base"], "data", config["run_name"], "{sample}_2.fastq.gz"))
# samples_I3, = glob_wildcards(op.join(config["base"], "data", config["run_name"], "{sample}_3.fastq.gz"))

## this is needed to be hardcoded/config file


configfile: op.join('config', "config_02_repeats_pbmc5k_chromium.yaml")
# validate(config, schema = op.join("schemas", "config.schema.yaml"))
print(config)
try:
   if not op.exists(op.dirname(op.join(config["base"], 'annotation'))):
      os.makedirs(op.join(config["base"], 'annotation'))
except OSError as err:
   print(err)
      
for item in ['bowtie', 'star', 'salmon']:
   try:
      if not op.exists(op.dirname(op.join(config["base"], 'indices', item))):
         os.makedirs(op.join(config["base"], 'indices', item))
   except OSError as err:
      print(err)
      
## Folder structure end ----------------------------------------------------------------------- ##

include: "chromium_flow_with_config.snmk"


# onsuccess:
#     shell("mailx -A gmail -s "'snakemake_02_pbmcs_success'" izaskun.mallona@gmail.com < {log}")

# onerror:
#     shell("mailx -A gmail -s "'snakemake_02_pbmcs_error'" izaskun.mallona@gmail.com  < {log}")

    
rule all:
    input:
        # op.join(config["base"], 'indices', 'cellranger', 'repeats_hg38', 'Log.out'),
        op.join(config["base"], 'runs', config["run_name"], 'cellranger_repeats', 'run.log'),
        op.join(config["base"], 'runs', config["run_name"], 'cellranger_standard', 'outs',  'web_summary.html'),
        op.join(config["base"], 'runs', config["run_name"], 'cellranger_repeats', 'outs', 'web_summary.html'),
        # op.join(config["base"], "runs", config["run_name"], 'count_repeats_on_cellranger_standard', config["run_name"] + "_repeats.counts.gz"),
        expand(op.join(config["base"], 'runs', config["run_name"], config["run_name"] + '_pbmc_chromium_regress_nCount_{regress_ncount}_nFeature_{regress_nfeature}.html'),
               regress_ncount = ['FALSE'],
               regress_nfeature = ['FALSE']),
        # op.join(config["base"], "runs", config["run_name"], 'count_repeats_on_cellranger_standard_not_overlapping_genes',
        #         config["run_name"] + "_repeats_not_overlapping_genes.counts.gz"),
        expand(op.join(config["base"], "runs", config["run_name"],
                        "count_repeats_on_cellranger_standard",
                        "{multimappers}",
                        config["run_name"] + "_transcriptome_repeats.counts.summary.png"),
                multimappers = ['multimappers', 'unique_reads']),
        expand(op.join(config["base"], "runs", config["run_name"],
                        "count_repeats_on_cellranger_standard_not_overlapping_genes",
                        "{multimappers}",
                        config["run_name"] + "_transcriptome_repeats_not_genes.counts.summary.png"),
                 multimappers = ['multimappers', 'unique_reads']),
        op.join(config["base"], 'runs', config["run_name"], 'alevin', 'genes', 'alevin', 'quants_mat.gz'),
        op.join(config["base"], 'runs', config["run_name"], 'alevin', 'repeats', 'alevin', 'quants_mat.gz'),
        # expand(op.join(config["base"], 'runs', config["run_name"], config["run_name"] + '_pbmc_alevin_regress_nCount_{regress_ncount}_nFeature_{regress_nfeature}.html'), regress_ncount = ['TRUE', 'FALSE'],
                       # regress_nfeature = ['TRUE', 'FALSE']),
         op.join(config["base"], "runs", config["run_name"], 'bowtie_repeatome', 'split_bowtie.flag'),
         expand(op.join(config["base"], "runs", config["run_name"], 'bowtie_repeatome',
                        '{multimappers}',
                        "all_cells_repeats.counts.gz"),
                multimappers = ['unique_reads'])
        
        

rule get_pbmc_v3:
    params:
        url = 'http://s3-us-west-2.amazonaws.com/10x.files/samples/cell-exp/3.0.2/5k_pbmc_v3/5k_pbmc_v3_fastqs.tar',
        path = op.join(config["base"], 'data', config["run_name"]),
    output:
        fn = op.join(config["base"], 'data', config["run_name"], '5k_pbmc_v3_fastqs.tar'),
        uncompressed =  op.join(config["base"], 'data', config["run_name"], '5k_pbmc_v3_fastqs',
                                '5k_pbmc_v3_S1_L001_I1_001.fastq.gz')
    shell:
        """    
        mkdir -p {params.path}
        cd {params.path}
        curl -s -L -C - {params.url} -O {output.fn}
        tar xvf {output.fn}
        """


    # output:
    #     temp = temp(op.join(config["base"], 'data', config["run_name"], 'frozen_pbmc_donor_a_fastqs.tar')),
    #     flag_fastq = op.join(config["base"], 'data', config["run_name"], 'read-RA_si-TATTGGTG_lane-004-chunk-002.fastq.gz')                    
    # params:
    #     path = op.join(config["base"], 'data', config["run_name"]),
    #     url = 'http://cf.10xgenomics.com/samples/cell-exp/1.1.0/frozen_pbmc_donor_a/frozen_pbmc_donor_a_fastqs.tar'
        
    # log:
    #     op.join(config["base"], 'data', config["run_name"], config["run_name"] + '_retrieval.log')
    # shell:
    #     """
    #     mkdir -p {params.path}
    #     cd $_
    #     wget {params.url} &> {log}

    #     tar xvf {output.temp}
    #     mv {params.path}/fastqs/flowcell1/*fastq.gz {params.path}

    #     rmdir {params.path}/fastqs/flowcell1
    #     rmdir {params.path}/fastqs/
    #     """

        
rule run_cellranger_repeats:
    input:
        flag = op.join(config["base"], 'data', config["run_name"], '5k_pbmc_v3_fastqs',
                                '5k_pbmc_v3_S1_L001_I1_001.fastq.gz'),
        flag_idx = op.join(config['base'], 'indices', 'cellranger', 'repeats_' + config['genome'],
                       'repeats_' + config['genome'], 'reference.json')
    params:
        fastqs_path = op.join(config["base"], 'data', config["run_name"]),
        sample_name = config["run_name"],
        local_mem_gb = config["params"]["local_mem_gb"],
        processing_path = op.join(config["base"], 'runs', config["run_name"]),
        chemistry = config['chemistry'],
        cellranger = config['software']['cellranger'],
        transcriptome = op.join(config["base"], 'indices', 'cellranger', 'repeats_' + config['genome'], 'repeats_' + config['genome'])
    output:
        op.join(config["base"], 'runs', config["run_name"], 'cellranger_repeats', 'outs', 'web_summary.html'),
        op.join(config["base"], 'runs', config["run_name"], 'cellranger_repeats', 'outs', 'filtered_feature_bc_matrix', 'barcodes.tsv.gz')
    threads:
        config["params"]["nthreads"]
    log:
        op.join(config["base"], 'runs', config["run_name"], 'cellranger_repeats', 'run.log')
    shell:
        """
        mkdir -p {params.processing_path}
        cd {params.processing_path}
        rm -rf cellranger_repeats
        
        {params.cellranger} count --id=cellranger_repeats \
          --fastqs={params.fastqs_path} \
          --transcriptome={params.transcriptome} \
          --jobmode=local \
          --localcores={threads} \
          --sample={params.sample_name} \
          --localmem={params.local_mem_gb} 
        """
        
rule run_cellranger_standard:
    input:
        flag = op.join(config["base"], 'data', config["run_name"], '5k_pbmc_v3_fastqs',
                                '5k_pbmc_v3_S1_L001_I1_001.fastq.gz'),
        transcriptome = op.join(config["base"], 'indices', 'cellranger',
                                'refdata-cellranger-GRCh38-3.0.0')
    params:
        fastqs_path = op.join(config["base"], 'data', config["run_name"]),
        sample_name = config["run_name"],
        local_mem_gb = config["params"]["local_mem_gb"],
        processing_path = op.join(config["base"], 'runs', config["run_name"]),
        chemistry = config['chemistry'],
        cellranger = config['software']['cellranger']
    output:
        op.join(config["base"], 'runs', config["run_name"], 'cellranger_standard', 'outs', 'web_summary.html'),
        op.join(config["base"], 'runs', config["run_name"], 'cellranger_standard', 'outs', 'filtered_feature_bc_matrix', 'barcodes.tsv.gz'),
        op.join(config["base"], 'runs', config["run_name"], 'cellranger_standard', 'outs', 'possorted_genome_bam.bam')
    threads:
        config["params"]["nthreads"]
    log:
        op.join(config["base"], 'runs',  config["run_name"], 'cellranger_standard', 'run.log')
    shell:
        """
        mkdir -p {params.processing_path}
        cd {params.processing_path}
        rm -rf cellranger_standard

        {params.cellranger} count --id=cellranger_standard \
          --fastqs={params.fastqs_path} \
          --transcriptome={input.transcriptome} \
          --jobmode=local \
          --localcores={threads} \
          --sample={params.sample_name} \
          --localmem={params.local_mem_gb} 
        """


        
rule map_salmon_repeats_chromium:
    input:        
        tgmap = op.join(config["base"], 'indices', 'salmon', config["genome"], 'repeats_salmon', 'txp2gene.tsv'),
        idx_tracker = op.join(config["base"], 'indices', 'salmon', config["genome"], 'repeats_salmon', 'duplicate_clusters.tsv'),
        cb = sorted(glob(op.join(config["base"], 'data', config["run_name"], config["run_name"] + '_fastqs/*R1*fastq.gz'))),
        r2 = sorted(glob(op.join(config["base"], 'data', config["run_name"], config["run_name"] + '_fastqs/*R2*fastq.gz')))        
    output:
        op.join(config["base"], 'runs', config["run_name"], 'alevin', 'repeats', 'alevin', 'quants_mat.gz')
    threads:
        config["params"]["nthreads"]
    params:
        fastqs_path = op.join(config["base"], 'data', config["run_name"]),
        processing_path = op.join(config["base"], 'runs', config["run_name"], 'alevin', 'repeats'),
        salmon_idx = op.join(config["base"], 'indices', 'salmon', config["genome"], 'repeats_salmon'),
        cb = ' '.join(sorted(glob(op.join(config["base"], 'data', config["run_name"], config["run_name"] + '_fastqs/*R1*fastq.gz')))),
        r2 = ' '.join(sorted(glob(op.join(config["base"], 'data', config["run_name"], config["run_name"] + '_fastqs/*R2*fastq.gz')))),
        salmon = config['software']['salmon']
    log:
        op.join(config["base"], 'runs', config["run_name"], 'run_salmon_repeats_chromium.log')
    shell:
        """
    mkdir -p {params.processing_path}
    cd {params.processing_path}

    ({params.salmon} alevin \
    -l ISR \
    -1 {params.cb} \
    -2 {params.r2} \
    --chromiumV3  \
    -i {params.salmon_idx} \
    -p {threads} -o {params.processing_path} \
    --tgMap {input.tgmap} ) 2> {log}

    touch -c {output}
        """
    

        
## beware the cb path for pbmc5k, they shouldn't be there at `config["run_name"] + '_fastqs/` subfoder
rule map_salmon_genes_chromium:
    input:        
        tgmap = op.join(config["base"], 'indices', 'salmon', config["genome"], 'genes_salmon', 'txp2gene.tsv'),
        idx_tracker = op.join(config["base"], 'indices', 'salmon', config["genome"], 'genes_salmon', 'duplicate_clusters.tsv'),
        cb = sorted(glob(op.join(config["base"], 'data', config["run_name"], config["run_name"] + '_fastqs/*R1*fastq.gz'))),
        r2 = sorted(glob(op.join(config["base"], 'data', config["run_name"], config["run_name"] + '_fastqs/*R2*fastq.gz')))        
    output:
        op.join(config["base"], 'runs', config["run_name"], 'alevin', 'genes', 'alevin', 'quants_mat.gz')
    threads:
        config["params"]["nthreads"]
    params:
        fastqs_path = op.join(config["base"], 'data', config["run_name"]),
        processing_path = op.join(config["base"], 'runs', config["run_name"], 'alevin', 'genes'),
        salmon_idx = op.join(config["base"], 'indices', 'salmon', config["genome"], 'genes_salmon'),
        cb = ' '.join(sorted(glob(op.join(config["base"], 'data', config["run_name"], config["run_name"] + '_fastqs/*R1*fastq.gz')))),
        r2 = ' '.join(sorted(glob(op.join(config["base"], 'data', config["run_name"], config["run_name"] + '_fastqs/*R2*fastq.gz')))),
        salmon = config['software']['salmon']
    log:
        op.join(config["base"], 'runs', config["run_name"], 'run_salmon_genes_chromium.log')
    shell:
        """
    mkdir -p {params.processing_path}
    cd {params.processing_path}

    ({params.salmon} alevin \
    -l ISR \
    -1 {params.cb} \
    -2 {params.r2} \
    --chromiumV3  \
    -i {params.salmon_idx} \
    -p {threads} -o {params.processing_path} \
    --tgMap {input.tgmap} ) 2> {log}

    touch -c {output}
        """
