#!/usr/bin/env snakemake -s
## 
## Started 12 May
##
## Warning fastqs are of different lengths in GEO
## https://trace.ncbi.nlm.nih.gov/Traces/sra/?run=SRR9169209
# https://trace.ncbi.nlm.nih.gov/Traces/sra/?run=SRR9169439 . 
# one has three reads 31, 50 and 8 in length
# the other one has 50, 50 and 10 nt

## also, notice males/females may share the same CB, so better analyze them separatelty

##
## Izaskun Mallona
## GPLv3

PER_TASK_MAX_THREADS = 10

print('caution for some steps report only takes one SRR! @todo check')
import os
import os.path as op
from glob import glob
import re

# import pandas as pd

print('This is human')
print('Cel-seq2')
print('this comes from https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE132044')


configfile: op.join('config', "config_08_ding_celseq2.yaml")
# validate(config, schema = op.join("schemas", "config.schema.yaml"))
print(config)


## Folder structure start --------------------------------------------------------------------- ##


## config file start ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

NUM_CELLS = 564 ## from the paper
NUM_CELLS_PER_FASTQ = 60 # since they're 12 runs 

BARCODE_PATTERN = 'NNNNNNCCCCCC'

CONF =  op.join(config["base"], "data", config["run_name"], 'celseq2_ding.conf')

include: "not_chromium_per_sample_flow_with_config.snmk"

try:
   if not op.exists(op.dirname(op.join(config["base"], 'annotation'))):
      os.makedirs(op.join(config["base"], 'annotation'))
except OSError as err:
   print(err)
      
for item in ['bowtie', 'star', 'salmon']:
   try:
      if not op.exists(op.dirname(op.join(config["base"], 'indices', item))):
         os.makedirs(op.join(config["base"], 'indices', item))
   except OSError as err:
      print(err)


def write_config(conf):
   path = op.join(config["base"], "data", config["run_name"])
   if not op.exists(path):
      os.makedirs(path)
      
   with open(conf, "w+") as fh:
       fh.writelines("""SRR9169178,RNA-Seq,110,9510936380,PRJNA545730,SAMN11914029,5330011518,GEO,public,"fastq,sra","gs,ncbi,s3","gs.US,ncbi.public,s3.us-east-1",SRX5943297,Illumina HiSeq 2500,PAIRED,cDNA,TRANSCRIPTOMIC,Homo sapiens,ILLUMINA,2019-06-05T00:00:00Z,GSM3836749,SRP200058,GSM3836749,CEL-Seq2,male,Peripheral blood mononuclear cell,,
SRR9169207,RNA-Seq,110,5795080830,PRJNA545730,SAMN11915421,3372693142,GEO,public,"fastq,sra","gs,ncbi,s3","gs.US,ncbi.public,s3.us-east-1",SRX5943565,Illumina HiSeq 2500,PAIRED,cDNA,TRANSCRIPTOMIC,Homo sapiens,ILLUMINA,2019-06-05T00:00:00Z,GSM3837161,SRP200058,GSM3837161,CEL-Seq2,female,Peripheral blood mononuclear cell,,
SRR9169177,RNA-Seq,110,11177876710,PRJNA545730,SAMN11914030,6265372740,GEO,public,"fastq,sra","gs,ncbi,s3","gs.US,ncbi.public,s3.us-east-1",SRX5943296,Illumina HiSeq 2500,PAIRED,cDNA,TRANSCRIPTOMIC,Homo sapiens,ILLUMINA,2019-06-05T00:00:00Z,GSM3836748,SRP200058,GSM3836748,CEL-Seq2,male,Peripheral blood mononuclear cell,,
SRR9169179,RNA-Seq,110,10050127010,PRJNA545730,SAMN11914028,5629020517,GEO,public,"fastq,sra","gs,ncbi,s3","gs.US,ncbi.public,s3.us-east-1",SRX5943298,Illumina HiSeq 2500,PAIRED,cDNA,TRANSCRIPTOMIC,Homo sapiens,ILLUMINA,2019-06-05T00:00:00Z,GSM3836750,SRP200058,GSM3836750,CEL-Seq2,male,Peripheral blood mononuclear cell,,
SRR9169442,RNA-Seq,89,406444488,PRJNA545730,SAMN11914621,254766791,GEO,public,"fastq,sra","gs,ncbi,s3","gs.US,ncbi.public,s3.us-east-1",SRX5943797,Illumina HiSeq 2500,PAIRED,cDNA,TRANSCRIPTOMIC,Homo sapiens,ILLUMINA,2019-06-05T00:00:00Z,GSM3837177,SRP200058,GSM3837177,CEL-Seq2,female,Peripheral blood mononuclear cell,,
SRR9169440,RNA-Seq,89,876917445,PRJNA545730,SAMN11914623,549907095,GEO,public,"fastq,sra","gs,ncbi,s3","gs.US,ncbi.public,s3.us-east-1",SRX5943795,Illumina HiSeq 2500,PAIRED,cDNA,TRANSCRIPTOMIC,Homo sapiens,ILLUMINA,2019-06-05T00:00:00Z,GSM3837175,SRP200058,GSM3837175,CEL-Seq2,female,Peripheral blood mononuclear cell,,
SRR9169439,RNA-Seq,89,1040755142,PRJNA545730,SAMN11914624,649516457,GEO,public,"fastq,sra","gs,ncbi,s3","gs.US,ncbi.public,s3.us-east-1",SRX5943794,Illumina HiSeq 2500,PAIRED,cDNA,TRANSCRIPTOMIC,Homo sapiens,ILLUMINA,2019-06-05T00:00:00Z,GSM3837174,SRP200058,GSM3837174,CEL-Seq2,female,Peripheral blood mononuclear cell,,
SRR9169209,RNA-Seq,110,6537207160,PRJNA545730,SAMN11915424,3788826571,GEO,public,"fastq,sra","gs,ncbi,s3","gs.US,ncbi.public,s3.us-east-1",SRX5943783,Illumina HiSeq 2500,PAIRED,cDNA,TRANSCRIPTOMIC,Homo sapiens,ILLUMINA,2019-06-05T00:00:00Z,GSM3837163,SRP200058,GSM3837163,CEL-Seq2,female,Peripheral blood mononuclear cell,,
SRR9169176,RNA-Seq,110,11582704980,PRJNA545730,SAMN11914031,6482204508,GEO,public,"fastq,sra","gs,ncbi,s3","gs.US,ncbi.public,s3.us-east-1",SRX5943295,Illumina HiSeq 2500,PAIRED,cDNA,TRANSCRIPTOMIC,Homo sapiens,ILLUMINA,2019-06-05T00:00:00Z,GSM3836747,SRP200058,GSM3836747,CEL-Seq2,male,Peripheral blood mononuclear cell,,
SRR9169206,RNA-Seq,110,6805595170,PRJNA545730,SAMN11915422,3943989627,GEO,public,"fastq,sra","gs,ncbi,s3","gs.US,ncbi.public,s3.us-east-1",SRX5943564,Illumina HiSeq 2500,PAIRED,cDNA,TRANSCRIPTOMIC,Homo sapiens,ILLUMINA,2019-06-05T00:00:00Z,GSM3837160,SRP200058,GSM3837160,CEL-Seq2,female,Peripheral blood mononuclear cell,,
SRR9169208,RNA-Seq,110,7223219080,PRJNA545730,SAMN11915420,4177497322,GEO,public,"fastq,sra","gs,ncbi,s3","gs.US,ncbi.public,s3.us-east-1",SRX5943782,Illumina HiSeq 2500,PAIRED,cDNA,TRANSCRIPTOMIC,Homo sapiens,ILLUMINA,2019-06-05T00:00:00Z,GSM3837162,SRP200058,GSM3837162,CEL-Seq2,female,Peripheral blood mononuclear cell,,
SRR9169441,RNA-Seq,89,1094064184,PRJNA545730,SAMN11914622,682967510,GEO,public,"fastq,sra","gs,ncbi,s3","gs.US,ncbi.public,s3.us-east-1",SRX5943796,Illumina HiSeq 2500,PAIRED,cDNA,TRANSCRIPTOMIC,Homo sapiens,ILLUMINA,2019-06-05T00:00:00Z,GSM3837176,SRP200058,GSM3837176,CEL-Seq2,female,Peripheral blood mononuclear cell,,""")


# def get_samples(fn, gender = None):
#     # samples = pd.read_table(fn)
#    if not op.isfile(fn):
#       write_config(fn)
#    samples = []
#    with open(fn) as fh:
#     for line in fh:
#        if gender is None:
#           samples.append(line.split(',')[0].strip())
#        else:
#           if line.split(',')[29].strip() == gender:
#              samples.append(line.split(',')[0].strip())
          
#     return(samples)

def get_samples(fn):
    # samples = pd.read_table(fn)
   if not op.isfile(fn):
      write_config(fn)
   samples = []
   with open(fn) as fh:
      for line in fh:
         samples.append(line.split(',')[0].strip())
      
   return(samples)

 
def list_r1s(fn = CONF):
   fastqs_path = op.join(config["base"], 'data', config["run_name"])
   # fns = sorted(filter(re.compile('SR.*[0-9]_1.fastq.gz').match, os.listdir(fastqs_path)))
   fns = [x + '_1_trim.fastq.gz' for x in get_samples(fn)]
   return([op.join(fastqs_path, x) for x in fns])

# print(' '.join(list_r1s()))

def list_r2s(fn = CONF):
   # fns = sorted(filter(re.compile('SR.*[0-9]_2.fastq.gz').match, os.listdir(fastqs_path)))
   fastqs_path = op.join(config["base"], 'data', config["run_name"])
   fns = [x + '_2.fastq.gz' for x in get_samples(fn)]
   return([op.join(fastqs_path, x) for x in fns])


rule all:
    input:
        expand(op.join(config["base"], "data", config["run_name"], "{srr}_1.fastq.gz"),
               srr = get_samples(op.join(config["base"], 'data', config["run_name"], 'celseq2_ding.conf'))),
        expand(op.join(config["base"], "runs", config["run_name"], 'star_transcriptome', 
                       "{srr}_Aligned.sortedByCoord.out.bam"),
               srr = get_samples(op.join(config["base"], 'data', config["run_name"], 'celseq2_ding.conf'))),
        expand(op.join(config["base"], "runs", config["run_name"], "star_transcriptome", 'repeats_no_overlap',
                       "{multimappers}",
                       "{srr}_Aligned.sortedByCoord.out.bam.featureCounts.gz"),
               srr = get_samples(op.join(config["base"], 'data', config["run_name"], 'celseq2_ding.conf')),
               multimappers = ['unique_reads', 'multimappers']),  
        expand(op.join(config["base"], "runs", config["run_name"], "star_transcriptome", 'genes',
                       "{srr}_star_transcriptome_genes.counts.summary.png"), 
               srr = get_samples(op.join(config["base"], 'data', config["run_name"], 'celseq2_ding.conf'))),
        expand(op.join(config["base"], "runs", config["run_name"], "star_transcriptome", 'repeats',
                       "{multimappers}", "{srr}_Aligned.sortedByCoord.out.bam.counts.summary"), 
               srr = get_samples(op.join(config["base"], 'data', config["run_name"], 'celseq2_ding.conf')),
               multimappers = ['unique_reads', 'multimappers']),
        expand(op.join(config["base"], "runs", config["run_name"], "star_transcriptome", 'repeats',
                       "{multimappers}", "{srr}_star_transcriptome_repeats.counts.summary.png"), 
               srr = get_samples(op.join(config["base"], 'data', config["run_name"], 'celseq2_ding.conf')),
               multimappers = ['unique_reads', 'multimappers']),
        expand(op.join(config["base"], "runs", config["run_name"], "star_transcriptome", 'repeats_no_overlap',
                       "{multimappers}",
                       "{srr}_repeats_no_overlap.counts.summary.png"), 
               srr = get_samples(op.join(config["base"], 'data', config["run_name"], 'celseq2_ding.conf')),
               multimappers = ['unique_reads', 'multimappers']),
        expand(op.join(config["base"], "runs", config["run_name"], "bowtie_repeatome", "{multimappers}",
                       "{srr}_bowtie_repeats.counts.summary.png"),
               srr = get_samples(op.join(config["base"], 'data', config["run_name"], 'celseq2_ding.conf')),
               multimappers = ['unique_reads', 'multimappers']),
        expand(op.join(config["base"], 'runs', config["run_name"], 'alevin', 'genes', "{srr}",  'alevin',
                       'quants_mat.gz'),
               srr = get_samples(CONF)),
        expand(op.join(config["base"], 'runs', config["run_name"], 'alevin', 'repeats', "{srr}", 'alevin',
                       'quants_mat.gz'),
               srr = get_samples(CONF)),
         # expand( op.join(config["base"], 'runs', config["run_name"], config["run_name"] + '_pbmc_celseq2_regress_nCount_{regress_ncount}_nFeature_{regress_nfeature}.html'),
         #         regress_ncount = ['TRUE', 'FALSE'],
         #         regress_nfeature = ['TRUE', 'FALSE']),
        expand(op.join(config["base"], "runs", config["run_name"], "star_transcriptome", 'genes',
                       "{srr}_Aligned.sortedByCoord.out.bam.featureCounts.gz"),
               srr = get_samples(CONF)),
        expand(op.join(config["base"], "runs", config["run_name"], "star_transcriptome", 'genes',
                       "{srr}_Aligned.sortedByCoord.out.bam.featureCounts.gz"), 
               srr = get_samples(CONF)),
        expand(op.join(config["base"], "runs", config["run_name"], "star_transcriptome", 'repeats',
                       "{multimappers}", "{srr}_Aligned.sortedByCoord.out.bam.featureCounts.gz"), 
               srr = get_samples(CONF),
               multimappers = ['unique_reads', 'multimappers']),
        expand(op.join(config["base"], "runs", config["run_name"], "bowtie_repeatome", "{multimappers}",
                       "{srr}.bam.featureCounts.gz"),
               srr = get_samples(CONF),
               multimappers = ['unique_reads', 'multimappers']),
        expand(op.join(config["base"], "runs", config["run_name"], "{srr}_cb_whitelist.txt.gz"),
               srr = get_samples(CONF))



rule get_whitelist:
    params:
        url = 'ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSE132nnn/GSE132044/suppl/GSE132044_pbmc_hg38_cell.tsv.gz',
        path = op.join(config["base"], 'runs', config["run_name"]),
        pigz = config['software']['pigz']
    threads: config["params"]["nthreads"]
    output:
        whitelistgz = temp(op.join(config["base"], 'runs', config["run_name"], 'GSE132044_pbmc_hg38_cell.tsv.gz')),
        whitelist = op.join(config["base"], 'runs', config["run_name"], 'GSE132044_pbmc_hg38_cell.tsv')        
    shell:
        """
        cd {params.path}
        wget {params.url}
        {params.pigz} -d --keep  -p {threads} {output.whitelistgz}   
        """


rule knit_report_celseq_ad_hoc_ding:
    input:
        genes_featurecounts = op.join(config["base"], 'runs', config["run_name"], 'star_transcriptome'),
        repeats_star_multi = op.join(config["base"], 'runs', config["run_name"], 'star_transcriptome', 'repeats', 'multimappers'),
        repeats_star_unique =op.join(config["base"], 'runs', config["run_name"], 'star_transcriptome', 'repeats', 'unique_reads'),
        repeats_bowtie_multi =op.join(config["base"], 'runs', config["run_name"], 'bowtie_repeatome', 'multimappers'),
        repeats_bowtie_unique = op.join(config["base"], 'runs', config["run_name"], 'bowtie_repeatome', 'unique_reads'),        
        repeats_only_multi = op.join(config["base"], "runs", config["run_name"], 'star_transcriptome', 'repeats_no_overlap', "multimappers"),
        repeats_only_unique = op.join(config["base"], "runs", config["run_name"], 'star_transcriptome', 'repeats_no_overlap', 'unique_reads'),        
        genes_alevin = op.join(config["base"], 'runs', config["run_name"], 'alevin', 'genes'),
        repeats_alevin =op.join(config["base"], 'runs', config["run_name"], 'alevin', 'repeats'),
        config_fn = CONF
    params:
        rmd = op.join('scripts', 'summarize_alevin_multiple_samples.Rmd'),
        run_name = 'CEL-Seq2',
        Rscript = config['software']['Rscript']
    output:
        html = op.join(config["base"], 'runs', config["run_name"], config["run_name"] + '_pbmc_celseq2_regress_nCount_{regress_ncount}_nFeature_{regress_nfeature}.html'),
        rds = op.join(config["base"], 'runs', config["run_name"], config["run_name"] + '_pmbc_celseq2_regress_nCount_{regress_ncount}_nFeature_{regress_nfeature}.rds'),
        aris = op.join(config["base"], 'runs', config["run_name"], config["run_name"] + '_aris_regress_nCount_{regress_ncount}_nFeature_{regress_nfeature}.rds'),
        cobra =  op.join(config["base"], 'runs', config["run_name"], config["run_name"] + '_cobra_regress_nCount_{regress_ncount}_nFeature_{regress_nfeature}.rds'),
        markers  = op.join(config["base"], 'runs', config["run_name"], config["run_name"] + '_markers_regress_nCount_{regress_ncount}_nFeature_{regress_nfeature}.rds')
    log:
        op.join(config["base"], 'runs', config["run_name"], config["run_name"] + 'summarize_celseq2_run_regress_nCount_{regress_ncount}_nFeature_{regress_nfeature}.log')
    shell:
        """
        {params.Rscript} -e 'rmarkdown::render(\"{params.rmd}\", 
          output_file = \"{output.html}\", 
          params = list(identifier = \"{params.run_name}\", 
          genes_alevin = \"{input.genes_alevin}\",
          repeats_alevin = \"{input.repeats_alevin}\",
          repeats_star_unique = \"{input.repeats_star_unique}\",
          repeats_star_multi = \"{input.repeats_star_multi}\",
          repeats_bowtie_unique = \"{input.repeats_bowtie_unique}\",
          repeats_bowtie_multi = \"{input.repeats_bowtie_multi}\",
          repeats_only_unique = \"{input.repeats_only_unique}\",
          repeats_only_multi = \"{input.repeats_only_multi}\",
          genes_featurecounts = \"{input.genes_featurecounts}\",
          seurat_output = \"{output.rds}\", 
          aris_output = \"{output.aris}\", 
          cobra_output = \"{output.cobra}\", 
          markers_output = \"{output.markers}\", 
          regress_genes_nCount = \"{wildcards.regress_ncount}\", \
          regress_genes_nFeature = \"{wildcards.regress_nfeature}\",
          config_fn = \"{input.config_fn}\"))' &> {log}
        """

"""
564 cells to be expected! treat runs separately
https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE132044
https://www.ncbi.nlm.nih.gov/Traces/study/?acc=PRJNA545730&o=acc_s%3Aa

[imallona@neutral Downloads]$ less GSE132044_pbmc_hg38_cell.tsv | grep CEL  | grep PBM  | wc -l
564

[imallona@neutral Downloads]$ less GSE132044_pbmc_hg38_cell.tsv | grep CEL  | grep PBM | cut -f2 -d"-" | sort | uniq -c
    139 Seq2.1
    147 Seq2.2
    144 Seq2.3
    134 Seq2.4

[imallona@neutral Downloads]$ less GSE132044_pbmc_hg38_cell.tsv | grep CEL  | grep PBM | cut -f1 -d"-" | sort | uniq -c
    257 PBMC1.CEL
    307 PBMC2.CEL
"""



rule run_alevin_repeats_celseq2:
    input:        
        tgmap = op.join(config["base"], 'indices', 'salmon', config["genome"], 'repeats_salmon', 'txp2gene.tsv'),
        idx_tracker = op.join(config["base"], 'indices', 'salmon', config["genome"], 'repeats_salmon', 'duplicate_clusters.tsv'),
        # cb = list_r1s(),
        # r2 = list_r2s()
        cb = op.join(config["base"], 'data', config["run_name"], "{srr}_1_trim.fastq.gz"),
        r2 = op.join(config["base"], 'data', config["run_name"], "{srr}_2.fastq.gz")
        
    output:
        op.join(config["base"], 'runs', config["run_name"], 'alevin', 'repeats', "{srr}", 'alevin',   'quants_mat.gz')
    threads:
        config["params"]["nthreads"]
    params:
        fastqs_path = op.join(config["base"], 'data', config["run_name"]),
        processing_path = op.join(config["base"], 'runs', config["run_name"], 'alevin', 'repeats',  "{srr}"),
        salmon_idx = op.join(config["base"], 'indices', 'salmon', config["genome"], 'repeats_salmon'),
        # cb = ' '.join(list_r1s(CONF)),
        # r2 = ' '.join(list_r2s(CONF)),
        num_cells = NUM_CELLS_PER_FASTQ,
        cb = op.join(config["base"], 'data', config["run_name"], "{srr}_1_trim.fastq.gz"),
        r2 = op.join(config["base"], 'data', config["run_name"], "{srr}_2.fastq.gz"),
        salmon = config['software']['salmon']
    log:
        op.join(config["base"], 'runs', config["run_name"], 'run_salmon_repeats_celseq_{srr}.log')
    shell:
        """
    mkdir -p {params.processing_path}
    cd {params.processing_path}

    ({params.salmon} alevin \
    -l ISR \
    -1 {params.cb} \
    -2 {params.r2} \
    --end 3 \
    --umiLength 6 \
    --barcodeLength 6 \
    --dumpFeatures \
    --forceCells {params.num_cells} \
    -i {params.salmon_idx} \
    -p {threads} -o {params.processing_path} \
    --tgMap {input.tgmap} ) 2> {log}

    touch -c {output}
        """


rule run_alevin_genes_celseq2:
    input:        
        tgmap = op.join(config["base"], 'indices', 'salmon', config["genome"], 'genes_salmon', 'txp2gene.tsv'),
        idx_tracker = op.join(config["base"], 'indices', 'salmon', config["genome"], 'genes_salmon', 'duplicate_clusters.tsv'),
        # cb = list_r1s(),
        # r2 = list_r2s()
        cb = op.join(config["base"], 'data', config["run_name"], "{srr}_1_trim.fastq.gz"),
        r2 = op.join(config["base"], 'data', config["run_name"], "{srr}_2.fastq.gz")        
    output:
        op.join(config["base"], 'runs', config["run_name"], 'alevin', 'genes', "{srr}", 'alevin',  'quants_mat.gz')
    threads:
        config["params"]["nthreads"]
    params:
        fastqs_path = op.join(config["base"], 'data', config["run_name"]),
        processing_path = op.join(config["base"], 'runs', config["run_name"], 'alevin', 'genes', "{srr}"),
        salmon_idx = op.join(config["base"], 'indices', 'salmon', config["genome"], 'genes_salmon'),
        # cb = ' '.join(list_r1s(CONF)),
        # r2 = ' '.join(list_r2s(CONF)),
        num_cells = NUM_CELLS_PER_FASTQ,
        cb = op.join(config["base"], 'data', config["run_name"], "{srr}_1_trim.fastq.gz"),
        r2 = op.join(config["base"], 'data', config["run_name"], "{srr}_2.fastq.gz"),
        salmon = config['software']['salmon']
    log:
        op.join(config["base"], 'runs', config["run_name"], 'run_salmon_genes_celseq_{srr}.log')
    shell:
        """
    mkdir -p {params.processing_path}
    cd {params.processing_path}

    ({params.salmon} alevin \
    -l ISR \
    -1 {params.cb} \
    -2 {params.r2} \
    --end 3 \
    --umiLength 6 \
    --barcodeLength 6 \
    --forceCells {params.num_cells} \
    --dumpFeatures \
    -i {params.salmon_idx} \
    -p {threads} -o {params.processing_path} \
    --tgMap {input.tgmap} ) 2> {log}

    touch -c {output}
        """


        
## we assume the first 12 reads from read1 are the umis + CB
# read1: {
#   UMI: [1, 6],
#   CB1: [7, 12]
# },
rule deal_with_umis_r2:
    input:
        r1 = op.join(config["base"], "data", config["run_name"], "{srr}_1.fastq.gz"),
        r2 = op.join(config["base"], "data", config["run_name"], "{srr}_2.fastq.gz")
    output:
        r2_umi = temp(op.join(config["base"], "data", config["run_name"], "{srr}_2_umi.fastq.gz"))
    threads:
        1
    params:
        pigz = config['software']['pigz']
    shell: """
    join <(zcat {input.r2} | sed 's/.2 / /g' | awk '{{OFS=FS=" "; print $1}}' | nl)  \
       <(zcat {input.r1} | awk '{{OFS=FS=" "; print $1}}' | nl ) | \
       awk '(NR%4==1){{a=$2;}}(NR%4==2){{umi=substr($3,0,6);cb=substr($3,7,6); b=$2}}(NR%4==3){{c=$2}}(NR%4==0){{d=$2;print a"_"cb"_"umi".2\\n"b"\\n+\\n"d;}}' | {params.pigz} -p {threads} --stdout > {output.r2_umi}

    """

## we assume the first 12 reads from read1 are the umis + CB
# according to https://bitbucket.org/jerry00/scumi-dev/src/master/lib/scumi/config.yaml
# read1: {
#   UMI: [1, 6],
#   CB1: [7, 12]
# },
rule deal_with_umis_r1:
    input:
        r1 = op.join(config["base"], "data", config["run_name"], "{srr}_1.fastq.gz")
    output:
        r1_umi = temp(op.join(config["base"], "data", config["run_name"], "{srr}_1_umi.fastq.gz"))
    threads:
        1
    params:
        pigz = config['software']['pigz']
    shell:  """
    {params.pigz} -p {threads} --decompress --stdout {input.r1} | sed 's/.1 / /g' | \
      awk 'NR%4==1{{a=$1;}} 
      NR%4==2{{umi=substr($0,0,6);cb=substr($0,7,6);b_without=substr($0,13)}} 
      NR%4==3{{c=$0}} 
      NR%4==0{{d=substr($0,13); print a"_"cb"_"umi".1\\n"b_without"\\n+\\n"d;}}' | {params.pigz} -p {threads} --stdout > {output.r1_umi}

    """

    
## because structure is 6 CB + 6 UMI and then an oligodt or something else follows
# read1: {
#   UMI: [1, 6],
#   CB1: [7, 12]
# },
rule trim_r1s_to_12:
    input:
        r1 = op.join(config["base"], "data", config["run_name"], "{srr}_1.fastq.gz")
    output:
        r1_trim = temp(op.join(config["base"], "data", config["run_name"],
                               "{srr}_1_trim.fastq.gz"))
    params:
        pigz = config['software']['pigz']
    threads:
        1
    shell:  """
    {params.pigz} -p {threads} --decompress --stdout {input.r1} | sed 's/.1 / /g' | \
      awk 'NR%4==1{{a=$0;}} 
      NR%4==2{{take=substr($0,1,12)}} 
      NR%4==3{{c=$0}} 
      NR%4==0{{d=substr($0,1,12); print a"\\n"take"\\n+\\n"d;}}' | {params.pigz} -p {threads} --stdout > {output.r1_trim}
    """
    
rule get_data:
    input:
        conf = CONF
    output:
        # r1_uncomp = temp(op.join(config["base"], "data", config["run_name"], "{srr}_1.fastq")),
        # r2_uncomp = temp(op.join(config["base"], "data", config["run_name"], "{srr}_2.fastq")),
        r1 = op.join(config["base"], "data", config["run_name"], "{srr}_1.fastq.gz"),
        r2 = op.join(config["base"], "data", config["run_name"], "{srr}_2.fastq.gz"),
        r3 = op.join(config["base"], "data", config["run_name"], "{srr}_3.fastq.gz")
    params:
        path = op.join(config["base"], "data", config["run_name"]),
        prefetch = config['software']['prefetch'],
        vdb_validate= config['software']['vdb_validate'],
        fastqdump = config['software']['fastqdump'],
    threads:
        1
    shell:
        """
        mkdir -p {params.path}
        cd {params.path}

        if [ -f "{output.r1}" ]
        then
           echo "skipped download"
           touch {output.r1}
           touch {output.r2}
           touch {output.r3}
        else 
            # {params.fastqdump} -I --gzip --split-files {wildcards.srr}
            
            {params.prefetch} {wildcards.srr} --output-file {wildcards.srr}.sra &> \
                   {wildcards.srr}_prefetch.log
    
            {params.vdbvalidate} {wildcards.srr}.sra &> {wildcards.srr}_vdbvalidation.log
            
            {params.fastqdump}  --gzip --split-files  {wildcards.srr}.sra
        fi
        """
