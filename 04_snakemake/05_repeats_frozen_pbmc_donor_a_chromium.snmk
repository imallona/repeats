#!/usr/bin/env snakemake -s
## 
## Started 14th Jan 2020
##
## Izaskun Mallona
## GPLv3

import os.path as op
from glob import glob


# From http://cf.10xgenomics.com/samples/cell-exp/1.1.0/frozen_pbmc_donor_a/frozen_pbmc_donor_a_web_summary.html
# ~2,900 cells detected
# Sequenced on Illumina NextSeq 500 High Output with ~25,000 reads per cell
# 98bp read1 (transcript), 8bp I5 sample barcode, 14bp I7 GemCode barcode and 5bp read2 (UMI)
# Analysis run with --cells=3000

RUN_NAME  = 'frozen_pbmc_donor_a'
CHEMISTRY = 'SC3Pv1'
DEMUX = True

#@FIXME to be moved to config, not hardcoded!
BASE = op.join('/home', 'imallona', 'repeats_sc')
NTHREADS = 60
LOCAL_MEM_GB = 100
GENOME = 'GRCh38'

## @FIXME to be moved to config
GENOME_URL = 'ftp://ftp.ensembl.org/pub/release-98/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz'
# GENES_GTF_URL =  'ftp://ftp.ensembl.org/pub/release-98/gtf/homo_sapiens/Homo_sapiens.GRCh38.98.gtf.gz'
GENES_GTF_URL = 'ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_33/gencode.v33.primary_assembly.annotation.gtf.gz'
REP_GTF_URL = 'http://labshare.cshl.edu/shares/mhammelllab/www-data/TEtranscripts/TE_GTF/GRCh38_rmsk_TE.gtf.gz'
# REP_GTF_URL = 'http://labshare.cshl.edu/shares/mhammelllab/www-data/TEtranscripts/TE_GTF/mm10_rmsk_TE.gtf.gz'
DFAM_EMBL_URL = 'https://www.dfam.org/releases/current/families/Dfam.embl.gz'
# TRANSCRIPTOME_URL= 'ftp://ftp.ensembl.org/pub/release-98/fasta/homo_sapiens/cdna/Homo_sapiens.GRCh38.cdna.all.fa.gz'
TRANSCRIPTOME_URL = 'ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_33/gencode.v33.pc_transcripts.fa.gz'

CELLRANGER_HG38_URL = 'http://cf.10xgenomics.com/supp/cell-exp/refdata-cellranger-GRCh38-3.0.0.tar.gz'

## @FIXME to be moved to config

GTF_PARSING_RSCRIPT = '~/src/repeats_sc/04_snakemake/gtf_parser.R'
FEATURECOUNTS_RSCRIPT= '~/src/repeats_sc/04_snakemake/plot_featurecounts_profile.R'

BOWTIE_BUILD = '/home/imallona/soft/bowtie/bowtie-1.2.3/bowtie-build'
BOWTIE = '/home/imallona/soft/bowtie/bowtie-1.2.3/bowtie'

##pigz 2.3.1
PIGZ = '/usr/bin/pigz'
BIOPYTHON_CONVERT='biopython.convert'
STAR = '~/soft/star/STAR-2.7.3a/source/STAR'
FEATURECOUNTS = '~/soft/subread/subread-2.0.0-source/bin/featureCounts'
# SALMON = '~/soft/salmon/salmon-1.1.0_linux_x86_64/bin/salmon'
SALMON='/home/imallona/soft/salmon/salmon-1.2.1/bin/salmon'
SALMON_V1_10X_RUN='/home/imallona/soft/salmon/salmon-1.2.1_src/scripts/v1_10x/run.sh'
SALMON_V1_10X_WRAPPER='/home/imallona/soft/salmon/salmon-1.2.1_src/scripts/v1_10x/wrapper'
CELLRANGER = '~/soft/cellranger/cellranger-3.1.0/cellranger'
BIOAWK = '~/soft/bioawk/bioawk'
BEDTOOLS = '~/soft/bedtools/bedtools-2.29.2/bin/bedtools'
Rscript = '/usr/local/R/R-3.6.1/bin/Rscript'
FASTQDUMP= '~/soft/sra-toools/sratoolkit.2.10.4-ubuntu64/bin/fastq-dump' # fastq-dump : 2.10.4

# print(op.join(BASE, 'data', RUN_NAME))

# samples_R2, = glob_wildcards(op.join(BASE, "data", RUN_NAME, "{sample}_1.fastq.gz"))
# samples_R1, = glob_wildcards(op.join(BASE, "data", RUN_NAME, "{sample}_2.fastq.gz"))
# samples_I3, = glob_wildcards(op.join(BASE, "data", RUN_NAME, "{sample}_3.fastq.gz"))

# ## 
# this is needed to be hardcoded/config file

try:
   if not op.exists(op.dirname(op.join(BASE, 'annotation'))):
      os.makedirs(op.join(BASE, 'annotation'))
except OSError as err:
   print(err)
      
for item in ['bowtie', 'star', 'salmon']:
   try:
      if not op.exists(op.dirname(op.join(BASE, 'indices', item))):
         os.makedirs(op.join(BASE, 'indices', item))
   except OSError as err:
      print(err)
      
## Folder structure end ----------------------------------------------------------------------- ##

include: "/home/imallona/src/repeats_sc/04_snakemake/chromium_flow.snmk"

rule all:
    input:
        # op.join(BASE, 'runs', RUN_NAME, 'summarize_cellranger_run_report.html'),
        # op.join(BASE, 'runs', RUN_NAME, 'summarize_cellranger_run_report_genes_regressed_out.html'),
        # op.join(BASE, 'runs', 'pbmc_integration_test.html'),
        expand(op.join(BASE, 'runs', RUN_NAME, RUN_NAME + '_pbmc_chromium_no_alevin_regress_nCount_{regress_ncount}_nFeature_{regress_nfeature}.html'), regress_ncount = ['TRUE', 'FALSE'],
                       regress_nfeature = ['TRUE', 'FALSE']),
        #  expand(op.join(BASE, "runs", RUN_NAME,
        #                 "count_repeats_on_cellranger_standard",
        #                 "{multimappers}",
        #                 RUN_NAME + "_transcriptome_repeats.counts.summary.png"),
        #         multimappers = ['multimappers', 'unique_reads']),
        #  expand(op.join(BASE, "runs", RUN_NAME,
        #                 "count_repeats_on_cellranger_standard_not_overlapping_genes",
        #                 "{multimappers}",
        #                 RUN_NAME + "_transcriptome_repeats_not_genes.counts.summary.png"),
        #          multimappers = ['multimappers', 'unique_reads']),
         op.join(BASE, "runs", RUN_NAME, 'bowtie_repeatome', 'split_bowtie.flag'),
         # expand(op.join(BASE, "runs", RUN_NAME, 'bowtie_repeatome',
         #                '{multimappers}',
         #                "all_cells_repeats.counts.gz"),
         #        multimappers = ['multimappers', 'unique_reads'])
         # op.join(BASE, 'runs', RUN_NAME, 'alevin', 'genes', 'alevin', 'quants_mat.gz'),
         # op.join(BASE, 'runs', RUN_NAME, 'alevin', 'repeats', 'alevin', 'quants_mat.gz'),
         # expand(op.join(BASE, 'runs', RUN_NAME, RUN_NAME + '_pbmc_alevin_regress_nCount_{regress_ncount}_nFeature_{regress_nfeature}.html'),
         #       regress_ncount = ['TRUE', 'FALSE'],
         #       regress_nfeature = ['TRUE', 'FALSE'])


# ## srrwhatever is  not a pbmc!
# # @todo this comes from other reports, fix!
# rule integration_pbmcs:
#     input:
#         run1 = '/home/imallona/repeats_sc/runs/frozen_pbmc_donor_a/frozen_pbmc_donor_a_pmbc_cellranger_regress_nCount_FALSE_nFeature_FALSE.rds',
#         run2 = '/home/imallona/repeats_sc/runs/5k_pbmc_v3/5k_pbmc_v3_pmbc_cellranger_regress_nCount_FALSE_nFeature_FALSE.rds',
#         # run3 = '/home/imallona/repeats_sc/runs/SRR10974769/SRR10974769_pmbc_cellranger_regress_nCount_FALSE_nFeature_FALSE.rds',
#         run3 = '/home/imallona/repeats_sc/runs/pbmc_10k_v3/pbmc_10k_v3_pmbc_cellranger_regress_nCount_FALSE_nFeature_FALSE.rds'
#     params:
#         rmd = 'integrate_runs.Rmd'
#     output:
#         html = op.join(BASE, 'runs', 'pbmc_integration_test.html')
#     log:
#         op.join(BASE, 'runs', 'pbmc_integration_test.log')
#     shell:
#         """
#         {Rscript} -e 'rmarkdown::render(\"{params.rmd}\", output_file = \"{output.html}\", params = list(run1 = \"{input.run1}\", run2= \"{input.run2}\", run3 = \"{input.run3}\"))' &> {log}
#         """


rule knit_report_chromium_no_alevin:
    input:
        genes = op.join(BASE, 'runs', RUN_NAME, 'cellranger_standard', 'outs', 'filtered_feature_bc_matrix', 'barcodes.tsv.gz'),
        repeats = op.join(BASE, 'runs', RUN_NAME, 'cellranger_repeats', 'outs', 'filtered_feature_bc_matrix', 'barcodes.tsv.gz'),
        featurecounts_multi = op.join(BASE, "runs", RUN_NAME,
                                      'count_repeats_on_cellranger_standard',
                                      'multimappers',
                                      RUN_NAME + "_repeats.counts.gz"),
        featurecounts_unique = op.join(BASE, "runs", RUN_NAME,
                                      'count_repeats_on_cellranger_standard',
                                      'unique_reads',
                                      RUN_NAME + "_repeats.counts.gz"),
        repeats_only_featurecounts_control_multi = op.join(
            BASE, "runs", RUN_NAME,
            'count_repeats_on_cellranger_standard_not_overlapping_genes',
            'multimappers',
            RUN_NAME + "_repeats_not_overlapping_genes.counts.gz"),
        repeats_only_featurecounts_control_unique = op.join(
            BASE, "runs", RUN_NAME,
            'count_repeats_on_cellranger_standard_not_overlapping_genes',
            'unique_reads',
            RUN_NAME + "_repeats_not_overlapping_genes.counts.gz"),
        repeats_bowtie_multi = op.join(
            BASE, "runs", RUN_NAME,
            'bowtie_repeatome',
            'multimappers',
            'all_cells_repeats.counts.gz'),
        repeats_bowtie_unique = op.join(
            BASE, "runs", RUN_NAME,
            'bowtie_repeatome',
            'unique_reads',
            'all_cells_repeats.counts.gz')
        
    params:
        rmd = 'summarize_chromium_run_pbmcs.Rmd',
        run_name = RUN_NAME
    output:
        html = op.join(BASE, 'runs', RUN_NAME, RUN_NAME + '_pbmc_chromium_no_alevin_regress_nCount_{regress_ncount}_nFeature_{regress_nfeature}.html'),
        rds = op.join(BASE, 'runs', RUN_NAME, RUN_NAME + '_pmbc_chromium_regress_nCount_{regress_ncount}_nFeature_{regress_nfeature}.rds'),
        aris = op.join(BASE, 'runs', RUN_NAME, RUN_NAME + '_aris_regress_nCount_{regress_ncount}_nFeature_{regress_nfeature}.rds'),
        cobra = op.join(BASE, 'runs', RUN_NAME, RUN_NAME + '_cobra_regress_nCount_{regress_ncount}_nFeature_{regress_nfeature}.rds'),
    log:
        op.join(BASE, 'runs', RUN_NAME, RUN_NAME + 'summarize_chromium_run_regress_nCount_{regress_ncount}_nFeature_{regress_nfeature}.log')
    shell: """
        {Rscript} -e 'rmarkdown::render(\"{params.rmd}\", 
          output_file = \"{output.html}\", 
          params = list(identifier = \"{params.run_name}\", 
                     genes_cellranger = \"{input.genes}\", 
                     repeats_cellranger = \"{input.repeats}\", 
                     repeats_featurecounts_multi = \"{input.featurecounts_multi}\", 
                     repeats_featurecounts_unique = \"{input.featurecounts_unique}\",
                     repeats_only_featurecounts_control_multi = \"{input.repeats_only_featurecounts_control_multi}\", 
                     repeats_only_featurecounts_control_unique = \"{input.repeats_only_featurecounts_control_unique}\",
                     seurat_output = \"{output.rds}\", 
                     aris_output = \"{output.aris}\", 
                     regress_genes_nCount = \"{wildcards.regress_ncount}\", 
                     regress_genes_nFeature = \"{wildcards.regress_nfeature}\",
                     repeats_bowtie_multi = \"{input.repeats_bowtie_multi}\",
                     repeats_bowtie_unique = \"{input.repeats_bowtie_unique}\", 
                     genes_alevin = \"None\",
                     repeats_alevin = \"None\",
                     cobra_output = \"{output.cobra}\"))' &> {log}
        """

    
    
rule get_frozen_pbmc_data:
    output:
        temp = temp(op.join(BASE, 'data', RUN_NAME, 'frozen_pbmc_donor_a_fastqs.tar')),
        flag_fastq = op.join(BASE, 'data', RUN_NAME, 'read-RA_si-TATTGGTG_lane-004-chunk-002.fastq.gz')                    
    params:
        path = op.join(BASE, 'data', RUN_NAME),
        url = 'http://cf.10xgenomics.com/samples/cell-exp/1.1.0/frozen_pbmc_donor_a/frozen_pbmc_donor_a_fastqs.tar'
        
    log:
        op.join(BASE, 'data', RUN_NAME, RUN_NAME + '_retrieval.log')
    shell:
        """
        mkdir -p {params.path}
        cd $_
        wget {params.url} &> {log}

        tar xvf {output.temp}
        mv {params.path}/fastqs/flowcell1/*fastq.gz {params.path}

        rmdir {params.path}/fastqs/flowcell1
        rmdir {params.path}/fastqs/
        """

rule run_cellranger_standard:
    input:
        flag_fastq = op.join(BASE, 'data', RUN_NAME, 'read-RA_si-TATTGGTG_lane-004-chunk-002.fastq.gz'),
        transcriptome = op.join(BASE, 'indices', 'cellranger', 'refdata-cellranger-GRCh38-3.0.0')
    params:
        fastqs_path = op.join(BASE, 'data', RUN_NAME),
        sample_name = RUN_NAME,
        local_mem_gb = LOCAL_MEM_GB,
        processing_path = op.join(BASE, 'runs', RUN_NAME),
        chemistry = CHEMISTRY
    output:
        op.join(BASE, 'runs', RUN_NAME, 'cellranger_standard', 'outs', 'web_summary.html'),
        op.join(BASE, 'runs', RUN_NAME, 'cellranger_standard', 'outs', 'possorted_genome_bam.bam'),
        op.join(BASE, 'runs', RUN_NAME, 'cellranger_standard', 'outs', 'filtered_feature_bc_matrix', 'barcodes.tsv.gz')
    threads:
        NTHREADS
    log:
        op.join(BASE, 'runs',  RUN_NAME, 'run_cellranger_standard.log')
    run:
        if DEMUX:
            shell("""
            mkdir -p {params.processing_path}
            cd {params.processing_path}
            rm -rf cellranger_standard

            {CELLRANGER} count --id=cellranger_standard \
            --fastqs={params.fastqs_path} \
            --transcriptome={input.transcriptome} \
            --jobmode=local \
            --localcores={threads} \
            --localmem={params.local_mem_gb} \
            --chemistry={params.chemistry}
            """)
        else:
            shell("""
            mkdir -p {params.processing_path}
            cd {params.processing_path}
            rm -rf cellranger_standard

            {CELLRANGER} count --id=cellranger_standard \
            --fastqs={params.fastqs_path} \
            --transcriptome={input.transcriptome} \
            --jobmode=local \
            --localcores={threads} \
            --sample={params.sample_name} \
            --localmem={params.local_mem_gb} \
            --chemistry={params.chemistry}
            """)
            

rule run_cellranger_repeats:
    input:
        transcriptome = op.join(BASE, 'indices', 'cellranger', 'repeats_hg38', 'repeats_hg38')
    params:
        fastqs_path = op.join(BASE, 'data', RUN_NAME),
        sample_name = RUN_NAME,
        local_mem_gb = LOCAL_MEM_GB,
        processing_path = op.join(BASE, 'runs', RUN_NAME),
        chemistry = CHEMISTRY
    output:
        op.join(BASE, 'runs', RUN_NAME, 'cellranger_repeats', 'outs', 'web_summary.html'),
        op.join(BASE, 'runs', RUN_NAME, 'cellranger_repeats', 'outs', 'filtered_feature_bc_matrix', 'barcodes.tsv.gz')
    threads:
        NTHREADS
    log:
        op.join(BASE, 'runs', RUN_NAME, 'run_cellranger_repeats.log')
    run:
        if DEMUX:
            shell("""
        mkdir -p {params.processing_path}
        cd {params.processing_path}
        rm -rf cellranger_repeats

        {CELLRANGER} count --id=cellranger_repeats \
          --fastqs={params.fastqs_path} \
          --transcriptome={input.transcriptome} \
          --jobmode=local \
          --localcores={threads} \
          --localmem={params.local_mem_gb} \
          --chemistry={params.chemistry} \
            """)
        else:
            shell("""
        mkdir -p {params.processing_path}
        cd {params.processing_path}
        rm -rf cellranger_repeats

        {CELLRANGER} count --id=cellranger_repeats \
          --fastqs={params.fastqs_path} \
          --transcriptome={input.transcriptome} \
          --jobmode=local \
          --localcores={threads} \
          --sample={params.sample_name} \
          --localmem={params.local_mem_gb} \
          --chemistry={params.chemistry}
        """)

## salmon start
# these data come from the demux pipeline
# https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/using/fastq-input
# read-I2_si-TATTGGTG_lane-003-chunk-003.fastq.gz
# read-I2_si-TATTGGTG_lane-004-chunk-002.fastq.gz
# read-RA_si-AGGCTACC_lane-001-chunk-001.fastq.gz
# read-RA_si-AGGCTACC_lane-002-chunk-000.fastq.gz

"""
https://combine-lab.github.io/alevin-tutorial/2018/running-alevin/
10x v1 Data
Alevin is designed to primarily work with the file-format having CB-UMI in file while the corresponding read-sequence in the other. However, the 10x’s v1 chemistry does not follow the same convention and primarily have UMI and read-sequence in the same file, breaking the parsing format for alevin. To support the working of alevin we have written a wrapper script which takes in the v1 chemistry data and feed it to alevin in the required format. Since the wrapper script is not optimized for performance one can observe a time-hit compared to analysis done on v2 chemistry data.

To run alevin in v1 mode the following three changes are required:

(some compilation instructions)

./run.sh ./salmon alevin -lISR -b pbmc3k_fastqs/ --gemcode -i index -p 8 -o alevin_output --tgMap txp2gene.tsv

"""

rule map_salmon_repeats_chromium_v1_ALTERNATIVE_DOESNOTWORKNEITHER:
    input:        
        tgmap = op.join(BASE, 'indices', 'salmon', GENOME, 'repeats_salmon', 'txp2gene.tsv'),
        idx_tracker = op.join(BASE, 'indices', 'salmon', GENOME, 'repeats_salmon', 'duplicate_clusters.tsv'),
        cb = sorted(glob(op.join(BASE, 'data', RUN_NAME,  '*I1*fastq.gz'))),
        r2 = sorted(glob(op.join(BASE, 'data', RUN_NAME,  '*RA*fastq.gz')))        
    output:
        op.join(BASE, 'runs', RUN_NAME, 'alevin', 'repeats', 'alevin', 'quants_mat.gz')
    threads:
        NTHREADS
    params:
        fastqs_path = op.join(BASE, 'data', RUN_NAME),
        processing_path = op.join(BASE, 'runs', RUN_NAME, 'alevin', 'repeats'),
        salmon_idx = op.join(BASE, 'indices', 'salmon', GENOME, 'repeats_salmon'),
        converter_path =  op.dirname("{SALMON_V1_V10X_RUN}")
    log:
        op.join(BASE, 'runs', RUN_NAME, 'run_salmon_repeats_chromium.log')
    shell:
        """
    mkdir -p {params.processing_path}

    cd {params.converter_path}

    # cd {params.processing_path}

    {SALMON_V1_10X_RUN} {SALMON} alevin \
    -lISR \
    -b {params.fastqs_path}/ \
    --gemcode \
    -i {params.salmon_idx} \
    -p {threads} \
    -o {params.processing_path} \
    --tgMap {input.tgmap}

    touch -c {output}
    """



# rule map_salmon_repeats_chromium_v1_DOESNOTWORK:
#     input:        
#         tgmap = op.join(BASE, 'indices', 'salmon', GENOME, 'repeats_salmon', 'txp2gene.tsv'),
#         idx_tracker = op.join(BASE, 'indices', 'salmon', GENOME, 'repeats_salmon', 'duplicate_clusters.tsv'),
#         cb = sorted(glob(op.join(BASE, 'data', RUN_NAME,  '*I1*fastq.gz'))),
#         r2 = sorted(glob(op.join(BASE, 'data', RUN_NAME,  '*RA*fastq.gz')))        
#     output:
#         op.join(BASE, 'runs', RUN_NAME, 'alevin', 'repeats', 'alevin', 'quants_mat.gz')
#     threads:
#         NTHREADS
#     params:
#         fastqs_path = op.join(BASE, 'data', RUN_NAME),
#         processing_path = op.join(BASE, 'runs', RUN_NAME, 'alevin', 'repeats'),
#         salmon_idx = op.join(BASE, 'indices', 'salmon', GENOME, 'repeats_salmon')
#     log:
#         op.join(BASE, 'runs', RUN_NAME, 'run_salmon_repeats_chromium.log')
#     shell:
#         """
#     mkdir -p {params.processing_path}
#     cd {params.processing_path}

#     ## link wrapper
#     ln -s {SALMON_V1_10X_WRAPPER}
    
#     # ({SALMON_V1_10X_RUN} {SALMON} alevin \
#     # -lISR \
#     # -b {params.fastqs_path}/ \
#     # --gemcode \
#     # -i {params.salmon_idx} \
#     # -p {threads} \
#     # -o {params.processing_path} \
#     # --tgMap {input.tgmap} ) 2> {log}

#     {SALMON_V1_10X_RUN} {SALMON} alevin \
#       -lISR \
#       -b {params.fastqs_path}/ \
#       --gemcode \
#       -i {params.salmon_idx} \
#       -p {threads} \
#       -o {params.processing_path} \
#       --tgMap {input.tgmap}

#     touch -c {output}
#         """
    

rule map_salmon_genes_chromium_v1_DOESNOTWORK:
    input:        
        tgmap = op.join(BASE, 'indices', 'salmon', GENOME, 'genes_salmon', 'txp2gene.tsv'),
        idx_tracker = op.join(BASE, 'indices', 'salmon', GENOME, 'genes_salmon', 'duplicate_clusters.tsv'),
        cb = sorted(glob(op.join(BASE, 'data', RUN_NAME, '*I1*fastq.gz'))),
        r2 = sorted(glob(op.join(BASE, 'data', RUN_NAME, '*RA*fastq.gz')))        
    output:
        op.join(BASE, 'runs', RUN_NAME, 'alevin', 'genes', 'alevin', 'quants_mat.gz')
    threads:
        NTHREADS
    params:
        fastqs_path = op.join(BASE, 'data', RUN_NAME),
        processing_path = op.join(BASE, 'runs', RUN_NAME, 'alevin', 'genes'),
        salmon_idx = op.join(BASE, 'indices', 'salmon', GENOME, 'genes_salmon'),
        cb = ' '.join(sorted(glob(op.join(BASE, 'data', RUN_NAME,  '*I1*fastq.gz')))),
        r2 = ' '.join(sorted(glob(op.join(BASE, 'data', RUN_NAME,  '*RA*fastq.gz')))) 
    log:
        op.join(BASE, 'runs', RUN_NAME, 'run_salmon_genes_chromium.log')
    shell:
        """
    mkdir -p {params.processing_path}
    cd {params.processing_path}


    ## link wrapper
    # ln -s {SALMON_V1_10X_WRAPPER}

    ( {SALMON_V1_10X_RUN} {SALMON} alevin \
        -lISR \
        -b {params.fastqs_path}/ \
        --gemcode \
        -i {params.salmon_idx} \
        -p {threads} \
        -o {params.processing_path} \
        --tgMap {input.tgmap} ) 2> {log}


    touch -c {output}
        """

## salmon end

# Salmon raises
# [2020-06-10 10:24:59.065] [jointLog] [warning] NOTE: Read Lib [[ /home/imallona/repeats_sc/data/frozen_pbmc_donor_a/read-I1_si-AGGCTACC_lane-001-chunk-001.fastq.gz, /home/imallona/repeats_sc/data/frozen_pbmc_donor_a/read-I1_si-AGGCTACC_lane-002-chunk-000.fastq.gz, /home/imallona/repeats_sc/data/frozen_pbmc_donor_a/read-I1_si-AGGCTACC_lane-003-chunk-003.fastq.gz, /home/imallona/repeats_sc/data/frozen_pbmc_donor_a/read-I1_si-AGGCTACC_lane-004-chunk-002.fastq.gz, /home/imallona/repeats_sc/data/frozen_pbmc_donor_a/read-I1_si-CTAGCTGT_lane-001-chunk-001.fastq.gz, /home/imallona/repeats_sc/data/frozen_pbmc_donor_a/read-I1_si-CTAGCTGT_lane-002-chunk-000.fastq.gz, /home/imallona/repeats_sc/data/frozen_pbmc_donor_a/read-I1_si-CTAGCTGT_lane-003-chunk-003.fastq.gz, /home/imallona/repeats_sc/data/frozen_pbmc_donor_a/read-I1_si-CTAGCTGT_lane-004-chunk-002.fastq.gz, /home/imallona/repeats_sc/data/frozen_pbmc_donor_a/read-I1_si-GCCAACAA_lane-001-chunk-001.fastq.gz, /home/imallona/repeats_sc/data/frozen_pbmc_donor_a/read-I1_si-GCCAACAA_lane-002-chunk-000.fastq.gz, /home/imallona/repeats_sc/data/frozen_pbmc_donor_a/read-I1_si-GCCAACAA_lane-003-chunk-003.fastq.gz, /home/imallona/repeats_sc/data/frozen_pbmc_donor_a/read-I1_si-GCCAACAA_lane-004-chunk-002.fastq.gz, /home/imallona/repeats_sc/data/frozen_pbmc_donor_a/read-I1_si-TATTGGTG_lane-001-chunk-001.fastq.gz, /home/imallona/repeats_sc/data/frozen_pbmc_donor_a/read-I1_si-TATTGGTG_lane-002-chunk-000.fastq.gz, /home/imallona/repeats_sc/data/frozen_pbmc_donor_a/read-I1_si-TATTGGTG_lane-003-chunk-003.fastq.gz, /home/imallona/repeats_sc/data/frozen_pbmc_donor_a/read-I1_si-TATTGGTG_lane-004-chunk-002.fastq.gz ]] :

# Found no concordant and consistent mappings. If this is a paired-end library, are you sure the reads are properly paired? check the file: /home/imallona/repeats_sc/runs/frozen_pbmc_donor_a/alevin/repeats/lib_format_counts.json for details

# /home/imallona/soft/salmon/salmon-1.2.1/bin/run_v1_10x.sh: line 20: 100531 Floating point exception(core dumped) ${new_cmd} -1 $p1 -2 $p2 -r $i1


# weird the newlines for I1 at:

# TEMPDIR is /home/imallona/tmp/tmp.pRcjIkXYyz
# Running command [/home/imallona/soft/salmon/salmon-1.2.1/bin/salmon alevin -lISR  --gemcode -i /home/imallona/repeats_sc/indices/salmon/GRCh38/genes_salmon -p 15 -o /home/imallona/repeats_sc/runs/frozen_pbmc_donor_a/alevin/genes --tgMap /home/imallona/repeats_sc/indices/salmon/GRCh38/genes_salmon/txp2gene.tsv -1 /home/imallona/tmp/tmp.pRcjIkXYyz/p1.fa -2 /home/imallona/tmp/tmp.pRcjIkXYyz/p2.fa -r /home/imallona/repeats_sc/data/frozen_pbmc_donor_a/read-I1_si-AGGCTACC_lane-001-chunk-001.fastq.gz
# /home/imallona/repeats_sc/data/frozen_pbmc_donor_a/read-I1_si-AGGCTACC_lane-002-chunk-000.fastq.gz
# /home/imallona/repeats_sc/data/frozen_pbmc_donor_a/read-I1_si-AGGCTACC_lane-003-chunk-003.fastq.gz
# /home/imallona/repeats_sc/data/frozen_pbmc_donor_a/read-I1_si-AGGCTACC_lane-004-chunk-002.fastq.gz
# /home/imallona/repeats_sc/data/frozen_pbmc_donor_a/read-I1_si-CTAGCTGT_lane-001-chunk-001.fastq.gz
# /home/imallona/repeats_sc/data/frozen_pbmc_donor_a/read-I1_si-CTAGCTGT_lane-002-chunk-000.fastq.gz
# /home/imallona/repeats_sc/data/frozen_pbmc_donor_a/read-I1_si-CTAGCTGT_lane-003-chunk-003.fastq.gz
# /home/imallona/repeats_sc/data/frozen_pbmc_donor_a/read-I1_si-CTAGCTGT_lane-004-chunk-002.fastq.gz
# /home/imallona/repeats_sc/data/frozen_pbmc_donor_a/read-I1_si-GCCAACAA_lane-001-chunk-001.fastq.gz
# /home/imallona/repeats_sc/data/frozen_pbmc_donor_a/read-I1_si-GCCAACAA_lane-002-chunk-000.fastq.gz
# /home/imallona/repeats_sc/data/frozen_pbmc_donor_a/read-I1_si-GCCAACAA_lane-003-chunk-003.fastq.gz
# /home/imallona/repeats_sc/data/frozen_pbmc_donor_a/read-I1_si-GCCAACAA_lane-004-chunk-002.fastq.gz
# /home/imallona/repeats_sc/data/frozen_pbmc_donor_a/read-I1_si-TATTGGTG_lane-001-chunk-001.fastq.gz
# /home/imallona/repeats_sc/data/frozen_pbmc_donor_a/read-I1_si-TATTGGTG_lane-002-chunk-000.fastq.gz
# /home/imallona/repeats_sc/data/frozen_pbmc_donor_a/read-I1_si-TATTGGTG_lane-003-chunk-003.fastq.gz
# /home/imallona/repeats_sc/data/frozen_pbmc_donor_a/read-I1_si-TATTGGTG_lane-004-chunk-002.fastq.gz]
