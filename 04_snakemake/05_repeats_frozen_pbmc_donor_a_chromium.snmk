#!/usr/bin/env snakemake -s
## 
## Started 14th Jan 2020
##
## Izaskun Mallona
## GPLv3

import os.path as op
from glob import glob


# From http://cf.10xgenomics.com/samples/cell-exp/1.1.0/frozen_pbmc_donor_a/frozen_pbmc_donor_a_web_summary.html
# ~2,900 cells detected
# Sequenced on Illumina NextSeq 500 High Output with ~25,000 reads per cell
# 98bp read1 (transcript), 8bp I5 sample barcode, 14bp I7 GemCode barcode and 5bp read2 (UMI)
# Analysis run with --cells=3000

RUN_NAME  = 'frozen_pbmc_donor_a'
CHEMISTRY = 'SC3Pv1'
DEMUX = True

#@FIXME to be moved to config, not hardcoded!
BASE = op.join('/home', 'imallona', 'repeats_sc')
NTHREADS = 60
LOCAL_MEM_GB = 100

## @FIXME to be moved to config
GENOME_URL = 'ftp://ftp.ensembl.org/pub/release-98/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz'
# GENES_GTF_URL =  'ftp://ftp.ensembl.org/pub/release-98/gtf/homo_sapiens/Homo_sapiens.GRCh38.98.gtf.gz'
GENES_GTF_URL = 'ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_33/gencode.v33.primary_assembly.annotation.gtf.gz'
REP_GTF_URL = 'http://labshare.cshl.edu/shares/mhammelllab/www-data/TEtranscripts/TE_GTF/GRCh38_rmsk_TE.gtf.gz'
# REP_GTF_URL = 'http://labshare.cshl.edu/shares/mhammelllab/www-data/TEtranscripts/TE_GTF/mm10_rmsk_TE.gtf.gz'
DFAM_EMBL_URL = 'https://www.dfam.org/releases/current/families/Dfam.embl.gz'
# TRANSCRIPTOME_URL= 'ftp://ftp.ensembl.org/pub/release-98/fasta/homo_sapiens/cdna/Homo_sapiens.GRCh38.cdna.all.fa.gz'
TRANSCRIPTOME_URL = 'ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_33/gencode.v33.pc_transcripts.fa.gz'

CELLRANGER_HG38_URL = 'http://cf.10xgenomics.com/supp/cell-exp/refdata-cellranger-GRCh38-3.0.0.tar.gz'

## @FIXME to be moved to config

GTF_PARSING_RSCRIPT = '~/src/repeats_sc/04_snakemake/gtf_parser.R'

BOWTIE_BUILD = '/home/imallona/soft/bowtie/bowtie-1.2.3/bowtie-build'
BOWTIE = '/home/imallona/soft/bowtie/bowtie-1.2.3/bowtie'

##pigz 2.3.1
PIGZ = '/usr/bin/pigz'
BIOPYTHON_CONVERT='biopython.convert'
STAR = '~/soft/star/STAR-2.7.3a/source/STAR'
FEATURECOUNTS = '~/soft/subread/subread-2.0.0-source/bin/featureCounts'
SALMON = '~/soft/salmon/salmon-1.1.0_linux_x86_64/bin/salmon'
CELLRANGER = '~/soft/cellranger/cellranger-3.1.0/cellranger'
BIOAWK = '~/soft/bioawk/bioawk'
BEDTOOLS = '~/soft/bedtools/bedtools-2.29.2/bin/bedtools'
Rscript = '/usr/local/R/R-3.6.1/bin/Rscript'
FASTQDUMP= '~/soft/sra-toools/sratoolkit.2.10.4-ubuntu64/bin/fastq-dump' # fastq-dump : 2.10.4

# print(op.join(BASE, 'data', RUN_NAME))

# samples_R2, = glob_wildcards(op.join(BASE, "data", RUN_NAME, "{sample}_1.fastq.gz"))
# samples_R1, = glob_wildcards(op.join(BASE, "data", RUN_NAME, "{sample}_2.fastq.gz"))
# samples_I3, = glob_wildcards(op.join(BASE, "data", RUN_NAME, "{sample}_3.fastq.gz"))

# ## 
# this is needed to be hardcoded/config file

try:
   if not op.exists(op.dirname(op.join(BASE, 'annotation'))):
      os.makedirs(op.join(BASE, 'annotation'))
except OSError as err:
   print(err)
      
for item in ['bowtie', 'star', 'salmon']:
   try:
      if not op.exists(op.dirname(op.join(BASE, 'indices', item))):
         os.makedirs(op.join(BASE, 'indices', item))
   except OSError as err:
      print(err)
      
## Folder structure end ----------------------------------------------------------------------- ##

include: "/home/imallona/src/repeats_sc/04_snakemake/chromium_flow.snmk"

rule all:
    input:
        op.join(BASE, 'runs', RUN_NAME, 'summarize_cellranger_run_report.html'),
        op.join(BASE, 'runs', RUN_NAME, 'summarize_cellranger_run_report_genes_regressed_out.html'),
        op.join(BASE, 'runs', 'pbmc_integration_test.html')

## srrwhatever is  not a pbmc!
# @todo this comes from other reports, fix!
rule integration_pbmcs:
    input:
        run1 = op.join(BASE, 'runs/frozen_pbmc_donor_a/summarize_cellranger_run.rds'),
        run2 = op.join(BASE, 'runs/5k_pbmc_v3/summarize_cellranger_run.rds'),
        run3 = op.join(BASE, 'runs/SRR10974769/summarize_cellranger_run.rds'),
        run4 = op.join(BASE, 'runs/pbmc_10k_v3/summarize_cellranger_run.rds')
    params:
        rmd = 'integrate_runs.Rmd'
    output:
        html = op.join(BASE, 'runs', 'pbmc_integration_test.html')
    log:
        op.join(BASE, 'runs', 'pbmc_integration_test.log')
    shell:
        """
        {Rscript} -e 'rmarkdown::render(\"{params.rmd}\", output_file = \"{output.html}\", params = list(run1 = \"{input.run1}\", run2= \"{input.run2}\", run3 = \"{input.run3}\", run4 = \"{input.run4}\"))' &> {log}
        """

    
rule get_frozen_pbmc_data:
    output:
        temp = temp(op.join(BASE, 'data', RUN_NAME, 'frozen_pbmc_donor_a_fastqs.tar')),
        flag_fastq = op.join(BASE, 'data', RUN_NAME, 'read-RA_si-TATTGGTG_lane-004-chunk-002.fastq.gz')                    
    params:
        path = op.join(BASE, 'data', RUN_NAME),
        url = 'http://cf.10xgenomics.com/samples/cell-exp/1.1.0/frozen_pbmc_donor_a/frozen_pbmc_donor_a_fastqs.tar'
        
    log:
        op.join(BASE, 'data', RUN_NAME, RUN_NAME + '_retrieval.log')
    shell:
        """
        mkdir -p {params.path}
        cd $_
        wget {params.url} &> {log}

        tar xvf {output.temp}
        mv {params.path}/fastqs/flowcell1/*fastq.gz {params.path}

        rmdir {params.path}/fastqs/flowcell1
        rmdir {params.path}/fastqs/
        """

rule run_cellranger_standard:
    input:
        flag_fastq = op.join(BASE, 'data', RUN_NAME, 'read-RA_si-TATTGGTG_lane-004-chunk-002.fastq.gz'),
        transcriptome = op.join(BASE, 'indices', 'cellranger', 'refdata-cellranger-GRCh38-3.0.0')
    params:
        fastqs_path = op.join(BASE, 'data', RUN_NAME),
        sample_name = RUN_NAME,
        local_mem_gb = LOCAL_MEM_GB,
        processing_path = op.join(BASE, 'runs', RUN_NAME),
        chemistry = CHEMISTRY
    output:
        op.join(BASE, 'runs', RUN_NAME, 'cellranger_standard', 'outs', 'web_summary.html'),
        op.join(BASE, 'runs', RUN_NAME, 'cellranger_standard', 'outs', 'possorted_genome_bam.bam'),
        op.join(BASE, 'runs', RUN_NAME, 'cellranger_standard', 'outs', 'filtered_feature_bc_matrix', 'barcodes.tsv.gz')
    threads:
        NTHREADS
    log:
        op.join(BASE, 'runs',  RUN_NAME, 'run_cellranger_standard.log')
    run:
        if DEMUX:
            shell("""
            mkdir -p {params.processing_path}
            cd {params.processing_path}
            rm -rf cellranger_standard

            {CELLRANGER} count --id=cellranger_standard \
            --fastqs={params.fastqs_path} \
            --transcriptome={input.transcriptome} \
            --jobmode=local \
            --localcores={threads} \
            --localmem={params.local_mem_gb} \
            --chemistry={params.chemistry}
            """)
        else:
            shell("""
            mkdir -p {params.processing_path}
            cd {params.processing_path}
            rm -rf cellranger_standard

            {CELLRANGER} count --id=cellranger_standard \
            --fastqs={params.fastqs_path} \
            --transcriptome={input.transcriptome} \
            --jobmode=local \
            --localcores={threads} \
            --sample={params.sample_name} \
            --localmem={params.local_mem_gb} \
            --chemistry={params.chemistry}
            """)
            

rule run_cellranger_repeats:
    input:
        transcriptome = op.join(BASE, 'indices', 'cellranger', 'repeats_hg38', 'repeats_hg38')
    params:
        fastqs_path = op.join(BASE, 'data', RUN_NAME),
        sample_name = RUN_NAME,
        local_mem_gb = LOCAL_MEM_GB,
        processing_path = op.join(BASE, 'runs', RUN_NAME),
        chemistry = CHEMISTRY
    output:
        op.join(BASE, 'runs', RUN_NAME, 'cellranger_repeats', 'outs', 'web_summary.html'),
        op.join(BASE, 'runs', RUN_NAME, 'cellranger_repeats', 'outs', 'filtered_feature_bc_matrix', 'barcodes.tsv.gz')
    threads:
        NTHREADS
    log:
        op.join(BASE, 'runs', RUN_NAME, 'run_cellranger_repeats.log')
    run:
        if DEMUX:
            shell("""
        mkdir -p {params.processing_path}
        cd {params.processing_path}
        rm -rf cellranger_repeats

        {CELLRANGER} count --id=cellranger_repeats \
          --fastqs={params.fastqs_path} \
          --transcriptome={input.transcriptome} \
          --jobmode=local \
          --localcores={threads} \
          --localmem={params.local_mem_gb} \
          --chemistry={params.chemistry} \
            """)
        else:
            shell("""
        mkdir -p {params.processing_path}
        cd {params.processing_path}
        rm -rf cellranger_repeats

        {CELLRANGER} count --id=cellranger_repeats \
          --fastqs={params.fastqs_path} \
          --transcriptome={input.transcriptome} \
          --jobmode=local \
          --localcores={threads} \
          --sample={params.sample_name} \
          --localmem={params.local_mem_gb} \
          --chemistry={params.chemistry}
        """)
