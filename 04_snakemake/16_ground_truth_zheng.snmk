#!/usr/bin/env snakemake -s
## 
## Started 14 Dec 2020
##
## Izaskun Mallona
## GPLv3

import os.path as op
from glob import glob
from snakemake.utils import validate


configfile: op.join("config", "config_16_ground_truth_zheng.yaml")

CONF = op.join(config['base'], 'data', config['run_name'], 'zheng.conf')
PROFILE_ALL_RSCRIPT = '~/src/repeats_sc/04_snakemake/profile_mapping_rates.R'
            
include: "/home/imallona/src/repeats_sc/04_snakemake/chromium_flow_with_config.snmk"

try:
   if not op.exists(op.dirname(op.join(config["base"], 'annotation'))):
      os.makedirs(op.join(config["base"], 'annotation'))
except OSError as err:
   print(err)
      
for item in ['bowtie', 'star', 'salmon']:
   try:
      if not op.exists(op.dirname(op.join(config["base"], 'indices', item))):
         os.makedirs(op.join(config["base"], 'indices', item))
   except OSError as err:
      print(err)
      
## Folder structure end ----------------------------------------------------------------------- ##


# config file
def get_zheng_urls(conf):
   if not op.isfile(conf):
      write_config(conf)
   
   samples = []
   with open(conf) as fh:
      for line in fh: 
         samples.append(line.split(',')[0].strip())
   return(samples)

         
def get_zheng_samples(conf):
   if not op.isfile(conf):
      write_config(conf)
   
   samples = []
   with open(conf) as fh:
      for line in fh: 
         samples.append(line.split(',')[1].strip())
   return(samples)


def write_config(conf):
   path = op.join(config["base"], "data", config["run_name"])
   if not op.exists(path):
      os.makedirs(path)
      
   with open(conf, "w+") as fh:
       fh.writelines("""https://cg.10xgenomics.com/samples/cell-exp/1.1.0/cd14_monocytes/cd14_monocytes_fastqs.tar,cd14_monocytes
https://cg.10xgenomics.com/samples/cell-exp/1.1.0/b_cells/b_cells_fastqs.tar,b_cells
https://cg.10xgenomics.com/samples/cell-exp/1.1.0/cd34/cd34_fastqs.tar,cd34
https://cg.10xgenomics.com/samples/cell-exp/1.1.0/cd4_t_helper/cd4_t_helper_fastqs.tar,cd4_t_helper
https://cg.10xgenomics.com/samples/cell-exp/1.1.0/regulatory_t/regulatory_t_fastqs.tar,regulatory_t
https://cf.10xgenomics.com/samples/cell-exp/1.1.0/naive_t/naive_t_fastqs.tar,naive_t
https://cg.10xgenomics.com/samples/cell-exp/1.1.0/memory_t/memory_t_fastqs.tar,memory_t
https://cg.10xgenomics.com/samples/cell-exp/1.1.0/cd56_nk/cd56_nk_fastqs.tar,cd56_nk
https://cg.10xgenomics.com/samples/cell-exp/1.1.0/cytotoxic_t/cytotoxic_t_fastqs.tar,cytotoxic_t
https://cg.10xgenomics.com/samples/cell-exp/1.1.0/naive_cytotoxic/naive_cytotoxic_fastqs.tar,naive_cytotoxic
""")
      
# include: "/home/imallona/src/repeats_sc/04_snakemake/chromium_flow.snmk"

print(get_zheng_samples(CONF))

def list_cellranger_outputs(basepath, conf, flavour = 'cellranger_standard'):
   # celltypes = ['naive_t',
   #             'cd14_monocytes',
   #             'cd4_t_helper',
   #             'b_cells',
   #             'regulatory_t',
   #             'memory_t',
   #             'cd56_nk',
   #             'naive_cytotoxic',
   #             'cytotoxic_t',
   #             'cd34']

   celltypes = get_zheng_samples(conf)
   return([op.join(basepath, celltype, flavour, 'outs', 'filtered_feature_bc_matrix',
                     'barcodes.tsv.gz') for celltype in celltypes])

print(list_cellranger_outputs(basepath = op.join(config["base"], 'runs', config["run_name"]),
                              conf = CONF,
                              flavour = 'cellranger_repeats'))

rule all:
    input:
        # op.join(config["base"], 'runs', config["run_name"], 'summarize_cellranger_run_report.html'),
        expand(op.join(config["base"], 'data', config["run_name"], "{celltype}_fastqs.tar"),
               celltype = get_zheng_samples(CONF)),
        expand(op.join(config["base"], 'runs', config["run_name"], "{celltype}", 'cellranger_standard', 'outs',
                       'web_summary.html'),
               celltype = get_zheng_samples(CONF)),
        expand(op.join(config["base"], 'runs', config["run_name"], "{celltype}", 'cellranger_repeats', 'outs',
                       'web_summary.html'),
               celltype = get_zheng_samples(CONF)),
        # expand(op.join(config["base"], 'runs', config["run_name"], "{celltype}", 'alevin', 'repeats',
        #                'alevin', 'quants_mat.gz'),
        #        celltype = get_zheng_samples(CONF)),
        expand( op.join(config["base"], 'runs', config["run_name"],
                        config["run_name"] + '_pbmc_zheng_truth_regress_nCount_{regress_ncount}_nFeature_{regress_nfeature}.html'),
                regress_ncount = ['TRUE', 'FALSE'],
                regress_nfeature = ['TRUE', 'FALSE']),
        op.join(config["base"], "runs", config["run_name"], "profile_mapping.txt")

rule knit_ad_hoc_zheng:
    input:
        genes_cellranger = list_cellranger_outputs(basepath = op.join(config["base"], 'runs', config["run_name"]),
                              conf = CONF,
                              flavour = 'cellranger_standard'),
        repeats_cellranger = list_cellranger_outputs(basepath = op.join(config["base"], 'runs', config["run_name"]),
                              conf = CONF,
                              flavour = 'cellranger_repeats'),
        config_fn = CONF
    params:
        rmd = op.join('scripts', 'summarize_zheng_truth_cellranger.Rmd'),
        run_name = "zheng_truth",
        genes_cellranger_path = op.join(config["base"], 'runs', config["run_name"]),
        repeats_cellranger_path = op.join(config["base"], 'runs', config["run_name"]),
        Rscript = config['software']['Rscript']
    output:
        html = op.join(config["base"], 'runs', config["run_name"], config["run_name"] + '_pbmc_zheng_truth_regress_nCount_{regress_ncount}_nFeature_{regress_nfeature}.html'),
        rds = op.join(config["base"], 'runs', config["run_name"], config["run_name"] + '_pbmc_zheng_truth_regress_nCount_{regress_ncount}_nFeature_{regress_nfeature}.rds'),
        aris = op.join(config["base"], 'runs', config["run_name"], config["run_name"] + '_aris_regress_nCount_{regress_ncount}_nFeature_{regress_nfeature}.rds'),
        cobra = op.join(config["base"], 'runs', config["run_name"], config["run_name"] + '_cobra_regress_nCount_{regress_ncount}_nFeature_{regress_nfeature}.rds'),
        markers  = op.join(config["base"], 'runs', config["run_name"], config["run_name"] + '_markers_regress_nCount_{regress_ncount}_nFeature_{regress_nfeature}.rds')
    log:
        op.join(config["base"], 'runs', config["run_name"], config["run_name"] + '_pbmc_zheng_regress_nCount_{regress_ncount}_nFeature_{regress_nfeature}.log')
    shell:
        """
        {params.Rscript} -e 'rmarkdown::render(\"{params.rmd}\", 
          output_file = \"{output.html}\", 
          params = list(identifier = \"{params.run_name}\", 
           genes_cellranger = \"{params.genes_cellranger_path}\",
           repeats_cellranger = \"{params.repeats_cellranger_path}\",
           seurat_output = \"{output.rds}\", 
           aris_output = \"{output.aris}\", 
           cobra_output = \"{output.cobra}\", 
           markers_output = \"{output.markers}\", 
           regress_genes_nCount = \"{wildcards.regress_ncount}\", \
           regress_genes_nFeature = \"{wildcards.regress_nfeature}\",
           config_fn = \"{input.config_fn}\"))' &> {log}
        """

# rule combine_gtfs_to_profile_mapping:
#     input:
#         "" # a bam
#     output:
#         "" # the summary of featurecounts
#     shell:
#         """
#         echo 1
#         """

rule profile_mappings_rate_all:
    input:
        genes_cellranger = list_cellranger_outputs(basepath = op.join(config["base"], 'runs', config["run_name"]),
                              conf = CONF,
                              flavour = 'cellranger_standard'),
        repeats_cellranger = list_cellranger_outputs(basepath = op.join(config["base"], 'runs', config["run_name"]),
                              conf = CONF,
                              flavour = 'cellranger_repeats'),
        config_fn = CONF
    params:
        path = op.join(config["base"], "runs", config["run_name"]),
        script = PROFILE_ALL_RSCRIPT,
        run_id = config["run_name"],
        Rscript = config['software']['Rscript']
    output:
        txt = op.join(config["base"], "runs", config["run_name"], "profile_mapping.txt")
    threads: 1
    shell:
       """
       cd {params.path}
       
       {params.Rscript} {params.script} --path {params.path} --output {output.txt} -i {params.run_id}
       """
        
rule run_cellranger_standard:
    input:
        flag = op.join(config["base"], 'data', config["run_name"], "{celltype}_fastqs.flag"),
        transcriptome = op.join(config["base"], 'indices', 'cellranger', 'refdata-cellranger-GRCh38-3.0.0')
    params:
        cellranger = config["software"]["cellranger"],
        fastqs_path = op.join(config["base"], 'data', config["run_name"], "{celltype}"),
        sample_name = config["run_name"],
        local_mem_gb = config["params"]["local_mem_gb"],
        processing_path = op.join(config["base"], 'runs', config["run_name"], "{celltype}"),
        chemistry = config["chemistry"]
    output:
        op.join(config["base"], 'runs', config["run_name"], "{celltype}", 'cellranger_standard', 'outs',
                'web_summary.html'),
        op.join(config["base"], 'runs', config["run_name"], "{celltype}", 'cellranger_standard', 'outs',
                'possorted_genome_bam.bam'),
        op.join(config["base"], 'runs', config["run_name"], "{celltype}", 'cellranger_standard', 'outs',
                'filtered_feature_bc_matrix', 'barcodes.tsv.gz')
    threads:
        config["params"]["nthreads"]
    log:
        op.join(config["base"], 'runs',  config["run_name"], 'run_cellranger_{celltype}_standard.log')
    shell:
        """
            mkdir -p {params.processing_path}
            cd {params.processing_path}
            rm -rf cellranger_standard

            {params.cellranger} count --id=cellranger_standard \
            --fastqs={params.fastqs_path} \
            --transcriptome={input.transcriptome} \
            --jobmode=local \
            --localcores={threads} \
            --localmem={params.local_mem_gb} \
            --chemistry={params.chemistry}
            """

rule try_alevin_repeats:
    input:        
        tgmap = op.join(config["base"], 'indices', 'salmon', config["genome"], 'repeats_salmon', 'txp2gene.tsv'),
        idx_tracker = op.join(config["base"], 'indices', 'salmon', config["genome"], 'repeats_salmon', 'duplicate_clusters.tsv'),
        cb = sorted(glob(op.join(config["base"], 'data', config["run_name"], "{celltype}", '*I1*fastq.gz'))),
        r2 = sorted(glob(op.join(config["base"], 'data', config["run_name"], "{celltype}", '*RA*fastq.gz')))        
    output:
        op.join(config["base"], 'runs', config["run_name"], "{celltype}", 'alevin', 'repeats', 'alevin', 'quants_mat.gz')
    threads:
        config["params"]["nthreads"]
    params:
        fastqs_path = op.join(config["base"], 'data', config["run_name"], "{celltype}", ),
        processing_path = op.join(config["base"], 'runs', config["run_name"], "{celltype}",  'alevin', 'repeats'),
        salmon_idx = op.join(config["base"], 'indices', 'salmon', config["genome"], 'repeats_salmon'),
        converter_path =  op.dirname("{SALMON_V1_V10X_RUN}")
    log:
        op.join(config["base"], 'runs', config["run_name"], 'run_salmon_repeats_chromium_"{celltype}".log')
    shell:
        """
    mkdir -p {params.processing_path}

    cd {params.converter_path}

    # cd {params.processing_path}

    {SALMON_V1_10X_RUN} {SALMON} alevin \
    -lISR \
    -b {params.fastqs_path}/ \
    --gemcode \
    -i {params.salmon_idx} \
    -p {threads} \
    -o {params.processing_path} \
    --tgMap {input.tgmap}

    touch -c {output}
    """


rule run_cellranger_repeats:
    input:
        flag = op.join(config["base"], 'data', config["run_name"], "{celltype}_fastqs.flag"),
        transcriptome_flag = op.join(config["base"], 'indices', 'cellranger',
                                     'repeats_' + config['genome'],
                                     'repeats_' + config['genome'],
                                     'reference.json')
    params:
        fastqs_path = op.join(config["base"], 'data', config["run_name"], "{celltype}"),
        sample_name = config["run_name"],
        local_mem_gb = config["params"]["local_mem_gb"],
        processing_path = op.join(config["base"], 'runs', config["run_name"], "{celltype}"),
        chemistry = config["chemistry"],
        transcriptome = op.join(config["base"], 'indices', 'cellranger',
                                'repeats_' + config['genome'],
                                'repeats_' + config['genome']),
        cellranger = config["software"]["cellranger"]
    output:
        op.join(config["base"], 'runs', config["run_name"], "{celltype}",'cellranger_repeats',
                'outs', 'web_summary.html'),
        op.join(config["base"], 'runs', config["run_name"], "{celltype}",'cellranger_repeats', 'outs',
                'filtered_feature_bc_matrix', 'barcodes.tsv.gz')
    threads:
        config["params"]["nthreads"]
    log:
        op.join(config["base"], 'runs', config["run_name"], 'run_cellranger_{celltype}_repeats.log')
    shell:
        """
        mkdir -p {params.processing_path}
        cd {params.processing_path}
        rm -rf cellranger_repeats

        {params.cellranger} count --id=cellranger_repeats \
          --fastqs={params.fastqs_path} \
          --transcriptome={params.transcriptome} \
          --jobmode=local \
          --localcores={threads} \
          --localmem={params.local_mem_gb} \
          --chemistry={params.chemistry} \
            """

rule uncompress_data_zheng:
    input:
        tar = op.join(config["base"], 'data', config["run_name"], "{celltype}_fastqs.tar")
    params:
        path = op.join(config["base"], 'data', config["run_name"], "{celltype}"),
        path_data = op.join(config["base"], 'data', config["run_name"]),
        base_url = 'https://cg.10xgenomics.com/samples/cell-exp/1.1.0'
    output:
        flag = op.join(config["base"], 'data', config["run_name"], "{celltype}_fastqs.flag")
    threads:
        1
    shell:
        """
        mkdir -p {params.path}
        cd {params.path}
    
        tar xvf {input.tar} -C .

        # flatten the directory
        find {params.path} -mindepth 2 -type f -exec mv -t {params.path} -i '{{}}' +
        
        touch {output.flag}
        """
        
rule get_data_zheng:
    priority:
        100
    params:
        path = op.join(config["base"], 'data', config["run_name"]),
        path_data = op.join(config["base"], 'data', config["run_name"]),
        base_url = 'https://cg.10xgenomics.com/samples/cell-exp/1.1.0'
    output:
        tar = op.join(config["base"], 'data', config["run_name"], "{celltype}_fastqs.tar")
    threads:
        1
    shell:
        """
        mkdir -p {params.path}
        cd {params.path}
    
        wget "{params.base_url}/{wildcards.celltype}/{wildcards.celltype}_fastqs.tar"
        """
