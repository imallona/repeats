#!/usr/bin/env snakemake -s
## 
## Started 24 aug 2020
##
## Izaskun Mallona
## GPLv3

import os.path as op
from glob import glob
import re


print('This is human')

## Folder structure start --------------------------------------------------------------------- ##


#@FIXME to be moved to config, not hardcoded!
BASE = op.join('/home', 'imallona', 'repeats_sc')
NTHREADS = 10
LOCAL_MEM_GB = 100


RUN_NAME  = 'bulk_GSE80095'
RUN_TECH = 'bulk'
GENOME = 'GRCh38'
CONFIG = op.join(BASE, 'data', RUN_NAME, 'monocytes.conf')


GENOME_URL = 'ftp://ftp.ensembl.org/pub/release-98/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz'
# GENES_GTF_URL =  'ftp://ftp.ensembl.org/pub/release-98/gtf/homo_sapiens/Homo_sapiens.GRCh38.98.gtf.gz'
GENES_GTF_URL = 'ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_33/gencode.v33.primary_assembly.annotation.gtf.gz'
REP_GTF_URL = 'http://labshare.cshl.edu/shares/mhammelllab/www-data/TEtranscripts/TE_GTF/GRCh38_rmsk_TE.gtf.gz'

## @FIXME to be moved to config
GTF_MAKING_SCRIPT = '~/src/repeats_sc/04_snakemake/gtf_maker.R'
GTF_PARSING_RSCRIPT = '~/src/repeats_sc/04_snakemake/gtf_parser.R'

BOWTIE_BUILD = '/home/imallona/soft/bowtie/bowtie-1.2.3/bowtie-build'
BOWTIE = '/home/imallona/soft/bowtie/bowtie-1.2.3/bowtie'

##pigz 2.3.1
PIGZ = '/usr/bin/pigz'
BIOPYTHON_CONVERT='biopython.convert'
STAR = '~/soft/star/STAR-2.7.3a/source/STAR'
FEATURECOUNTS = '~/soft/subread/subread-2.0.0-source/bin/featureCounts'
SALMON = '~/soft/salmon/salmon-1.1.0_linux_x86_64/bin/salmon'
CELLRANGER = '~/soft/cellranger/cellranger-3.1.0/cellranger'
BEDTOOLS = '~/soft/bedtools/bedtools-2.29.2/bin/bedtools'
Rscript = '/usr/local/R/R-3.6.1/bin/Rscript'

## this is needed to be hardcoded/config file

try:
   if not op.exists(op.dirname(op.join(BASE, 'annotation'))):
      os.makedirs(op.join(BASE, 'annotation'))
except OSError as err:
   print(err)
      
for item in ['bowtie', 'star', 'salmon']:
   try:
      if not op.exists(op.dirname(op.join(BASE, 'indices', item))):
         os.makedirs(op.join(BASE, 'indices', item))
   except OSError as err:
      print(err)

## Folder structure end ----------------------------------------------------------------------- ##

def get_samples(fn):
    # samples = pd.read_table(fn)
   samples = []
   with open(fn) as fh:
    for line in fh: 
        samples.append(line.split(',')[0])
    return(samples)

print(get_samples(CONFIG))

rule all:
    input:
        expand(op.join(BASE, "data", RUN_NAME, "{srr}_1.fastq.gz"), srr = get_samples(CONFIG)),
        expand(op.join(BASE, "runs", RUN_NAME, "bowtie_repeatome",
                       "{srr}.bam"), srr = get_samples(CONFIG)),
        expand(op.join(BASE, "runs", RUN_NAME, "star_transcriptome",
                       "{srr}_Aligned.sortedByCoord.out.bam"), srr = get_samples(CONFIG)),
        op.join(BASE, "runs", RUN_NAME, "star_transcriptome", 'genes',
                RUN_NAME + '_star_genes.counts.gz'),        
        expand(op.join(BASE, "runs", RUN_NAME, "star_transcriptome", 'repeats', "{multimappers}",
                       RUN_NAME + '_star_transcriptome_repeats.counts.gz'),
               multimappers = ['multimappers', 'unique_reads']),
        expand(op.join(BASE, "runs", RUN_NAME, "bowtie_repeatome", "{multimappers}",
                       RUN_NAME + "_bowtie_repeats.counts.gz"),
               multimappers = ['multimappers', 'unique_reads'])


# rule featurecounts_repeats_repeatome:
#     input:
#         bam = op.join(BASE, "runs", RUN_NAME, "bowtie_repeatome", "{srr}.bam"),
#         gtf = op.join(BASE, 'annotation', op.basename(REP_GTF_URL)),
#         fake_repeatome_gtf = op.join(BASE, 'annotation', 'fake_repeatome_from_' + op.splitext(op.basename(REP_GTF_URL))[0]) + '.gtf.gz'
#     output:
#         counts  = temp(op.join(BASE, "runs", RUN_NAME, "bowtie_repeatome", "{multimappers}", "counts")),
#         gz_counts = op.join(BASE, "runs", RUN_NAME, "bowtie_repeatome", "{multimappers}", "counts.gz")
#     log :
#         op.join(BASE, "runs", RUN_NAME, "bowtie_repeatome", "{multimappers}", "featurecounts.log"),
#     threads:
#         NTHREADS
#     # shell:
#     #    """
#     #    ## note multimappers are counted
#     #    {FEATURECOUNTS} -T {threads} \
#     #    -t exon \
#     #    -g gene_id \
#     #    -a {input.fake_repeatome_gtf} \
#     #    -o  {output.counts} \
#     #    -M \
#     #    {input.bam}  &> {log}

#     #    {PIGZ} --keep  -p {threads} {output.counts}
#     #    """
#     run:
#         if wildcards.multimappers == 'multimappers':
#            shell("""
#            echo multimappers allowed

#            cd {params.path}

#            {FEATURECOUNTS} -T {threads} \
#            -t exon \
#            -g gene_id \
#            -a {input.gtf} \
#            -o  {output.counts} \
#            -M \
#            --fraction \
#            {params.path}/*bam  2>&1 > {log}

#            {PIGZ} -f --keep -p {threads} {output.counts} -c > {output.gz_counts}

#            """)
#         elif wildcards.multimappers == 'unique_reads':
#            shell("""
#            echo unique only

#            cd {params.path}

#            {FEATURECOUNTS} -T {threads} \
#            -t exon \
#            -g gene_id \
#            -a {input.gtf} \
#            -o  {output.counts} \
#            {params.path}/*bam  2>&1 > {log}

#            {PIGZ} -f --keep -p {threads} {output.counts} -c > {output.gz_counts}
#            """)

       
rule fake_gtf_repeatome_in_repeats_coordinates:
    input:
        fa = op.join(BASE, 'annotation', 'repeatome_from_' + op.splitext(op.basename(REP_GTF_URL))[0] + '.fa.gz')
    output:
        fai = temp(op.join(BASE, 'annotation', 'repeatome_from_' + op.splitext(op.basename(REP_GTF_URL))[0] + '.fa.fai')),
        fauncomp = temp(op.join(BASE, 'annotation', 'repeatome_from_' + op.splitext(op.basename(REP_GTF_URL))[0] + '.fa')),
        fake_repeatome_gtf = op.join(BASE, 'annotation', 'fake_repeatome_from_' + op.splitext(op.basename(REP_GTF_URL))[0]) + '.gtf.gz'
    params:
        rscript = GTF_MAKING_SCRIPT,
        path = op.join(BASE, 'annotation')
    threads:
        NTHREADS
    shell:
        """
        cd {params.path}
        {PIGZ} -k --decompress -p {threads} {input.fa}

        samtools faidx {output.fauncomp}
        
        {Rscript} {params.rscript} -f {output.fai} | {PIGZ} -c -p {threads} > {output.fake_repeatome_gtf}
        
        """


# @todo NOTE THE MULTIMAPPING ALLOWED!
rule featurecounts_repeats_repeatome_pe:
    input:
        expand(op.join(BASE, "runs", RUN_NAME, 'bowtie_repeatome', "{srr}.bam"),
               srr = get_samples(op.join(BASE, 'data', RUN_NAME, CONFIG))),
        gtf = op.join(BASE, 'annotation', op.basename(REP_GTF_URL)),
        fake_repeatome_gtf = op.join(BASE, 'annotation',
                                     'fake_repeatome_from_' + op.splitext(op.basename(REP_GTF_URL))[0]) + '.gtf.gz'
    output:
        counts  = temp(op.join(BASE, "runs", RUN_NAME, "bowtie_repeatome", "{multimappers}",
                               RUN_NAME + "_bowtie_repeats.counts")),
        gz_counts = op.join(BASE, "runs", RUN_NAME, "bowtie_repeatome", "{multimappers}",
                            RUN_NAME + "_bowtie_repeats.counts.gz"),
        summary = op.join(BASE, "runs", RUN_NAME, "bowtie_repeatome", "{multimappers}",
                          RUN_NAME + "_bowtie_repeats.counts.summary")
    params:
        path = op.join(BASE, "runs", RUN_NAME, "bowtie_repeatome")
    log :
        op.join(BASE, "runs", RUN_NAME, "bowtie_repeatome", "{multimappers}",
                "bowtie_repeats_featurecounts.log"),
    threads:
        NTHREADS
    run:
        if wildcards.multimappers == 'multimappers':
           shell("""
           echo multimappers allowed

           cd {params.path}

           {FEATURECOUNTS} -T {threads} \
           -p \
           -t exon \
           -g gene_id \
           -a {input.fake_repeatome_gtf} \
           -o  {output.counts} \
           -M \
           --fraction \
           {params.path}/*bam  2>&1 > {log}

           {PIGZ} -f --keep -p {threads} {output.counts} -c > {output.gz_counts}

           """)
        elif wildcards.multimappers == 'unique_reads':
           shell("""
           echo unique only

           cd {params.path}

           {FEATURECOUNTS} -T {threads} \
           -p \
           -t exon \
           -g gene_id \
           -a {input.fake_repeatome_gtf} \
           -o  {output.counts} \
           {params.path}/*bam  2>&1 > {log}

           {PIGZ} -f --keep -p {threads} {output.counts} -c > {output.gz_counts}
           """)

    # shell:
    #    """
    #    ## note multimappers are counted
    #    {FEATURECOUNTS} -T {threads} \
    #    -p \
    #    -t exon \
    #    -g gene_id \
    #    -a {input.fake_repeatome_gtf} \
    #    -o  {output.counts} \
    #    -M \
    #    {params.path}/*bam  &> {log}

    #    {PIGZ} --keep  -p {threads} {output.counts}
    #    """

rule featurecounts_repeats_transcriptome_pe:
    input:
        expand(op.join(BASE, "runs", RUN_NAME, 'star_transcriptome', "{srr}_Aligned.sortedByCoord.out.bam"),
                 srr = get_samples(op.join(BASE, 'data', RUN_NAME, CONFIG))),
        gtf = op.join(BASE, 'annotation', op.basename(REP_GTF_URL))
    output:
        counts  = temp(op.join(BASE, "runs",RUN_NAME, "star_transcriptome", 'repeats',
                                "{multimappers}", RUN_NAME + '_star_transcriptome_repeats.counts')),
        gz_counts = op.join(BASE, "runs",RUN_NAME, "star_transcriptome", 'repeats',
                             "{multimappers}", RUN_NAME + '_star_transcriptome_repeats.counts.gz'),
        summary =  op.join(BASE, "runs",RUN_NAME, "star_transcriptome", 'repeats',
                             "{multimappers}", RUN_NAME + '_star_transcriptome_repeats.counts.summary')
    params:
        path = op.join(BASE, "runs", RUN_NAME, 'star_transcriptome')
    log :
        op.join(BASE, "runs", RUN_NAME, "star_transcriptome", 'repeats',  "{multimappers}",
                "star_repeats_featurecounts.log"),
    threads:
        NTHREADS
    # shell:
    #    """
    #    {FEATURECOUNTS} -T {threads} \
    #    -p \
    #    -t exon \
    #    -g gene_id \
    #    -a {input.gtf} \
    #    -o  {output.counts} \
    #    {params.path}/*bam  &> {log}

    #    {PIGZ} --keep -p {threads} {output.counts}
    #    """
    run:
        if wildcards.multimappers == 'multimappers':
           shell("""
           echo multimappers allowed

           cd {params.path}

           {FEATURECOUNTS} -T {threads} \
           -p \
           -t exon \
           -g gene_id \
           -a {input.gtf} \
           -o  {output.counts} \
           -M \
           --fraction \
           {params.path}/*bam  2>&1 > {log}

           {PIGZ} -f --keep -p {threads} {output.counts} -c > {output.gz_counts}

           """)
        elif wildcards.multimappers == 'unique_reads':
           shell("""
           echo unique only

           cd {params.path}

           {FEATURECOUNTS} -T {threads} \
           -p \
           -t exon \
           -g gene_id \
           -a {input.gtf} \
           -o  {output.counts} \
           {params.path}/*bam  2>&1 > {log}

           {PIGZ} -f --keep -p {threads} {output.counts} -c > {output.gz_counts}
           """)
           
rule featurecounts_genes_transcriptome_pe:
    input:
        expand(op.join(BASE, "runs", RUN_NAME, 'star_transcriptome', "{srr}_Aligned.sortedByCoord.out.bam"),
               srr = get_samples(op.join(BASE, 'data', RUN_NAME, CONFIG))),
        gtf = op.join(BASE, 'annotation', op.basename(GENES_GTF_URL))
    output:
        counts  = temp(op.join(BASE, "runs", RUN_NAME, "star_transcriptome", 'genes', RUN_NAME + "_star_genes.counts")),
        gz_counts = op.join(BASE, "runs", RUN_NAME, "star_transcriptome", 'genes', RUN_NAME + "_star_genes.counts.gz")
    params:
        path =  op.join(BASE, "runs", RUN_NAME, 'star_transcriptome')
    log :
        op.join(BASE, "runs",RUN_NAME, 'star_transcriptome', 'genes', "star_genes_featurecounts.log"),
    threads:
        NTHREADS
    shell:
       """
       {FEATURECOUNTS} -T {threads} \
       -p \
       -t exon \
       -g gene_id \
       -a {input.gtf} \
       -o  {output.counts} \
       {params.path}/*bam  &> {log}

       {PIGZ} --keep -p {threads} {output.counts}
       """

# rule featurecounts_repeats_transcriptome:
#     input:
#         bam = op.join(BASE, "runs",RUN_NAME, 'star_transcriptome', "{srr}_Aligned.sortedByCoord.out.bam"),
#         gtf = op.join(BASE, 'annotation', op.basename(REP_GTF_URL))
#     output:
#         counts  = temp(op.join(BASE, "runs",RUN_NAME, "star_transcriptome", 'repeats', "{srr}_repeats.counts")),
#         gz_counts = op.join(BASE, "runs",RUN_NAME, "star_transcriptome", 'repeats', "{srr}_repeats.counts.gz")
#     log :
#         op.join(BASE, "runs", RUN_NAME, "star_transcriptome", 'repeats', "{srr}_repeats_featurecounts.log"),
#     threads:
#         NTHREADS
#     shell:
#        """
#        {FEATURECOUNTS} -T {threads} \
#        -t exon \
#        -g gene_id \
#        -a {input.gtf} \
#        -o  {output.counts} \
#        {input.bam}  &> {log}

#        {PIGZ} --keep -p {threads} {output.counts}
#        """

        
rule featurecounts_repeats_transcriptome:
    input:
        bam = op.join(BASE, "runs",RUN_NAME, 'star_transcriptome', "{srr}_Aligned.sortedByCoord.out.bam"),
        gtf = op.join(BASE, 'annotation', op.basename(REP_GTF_URL))
    output:
        counts  = temp(op.join(BASE, "runs",RUN_NAME, "star_transcriptome", 'repeats',
                               "{multimappers}", "{srr}_repeats.counts")),
        gz_counts = op.join(BASE, "runs",RUN_NAME, "star_transcriptome", 'repeats',
                            "{multimappers}", "{srr}_repeats.counts.gz")
    log :
        op.join(BASE, "runs", RUN_NAME, "star_transcriptome", 'repeats', "{multimappers}", "{srr}_repeats_featurecounts.log")
    threads:
        NTHREADS
    run:
        if wildcards.multimappers == 'multimappers':
           shell("""
           echo multimappers allowed

           cd {params.path}

           {FEATURECOUNTS} -T {threads} \
           -t exon \
           -g gene_id \
           -a {input.gtf} \
           -o  {output.counts} \
           -M \
           --fraction \
           {params.path}/*bam  2>&1 > {log}

           {PIGZ} -f --keep -p {threads} {output.counts} -c > {output.gz_counts}

           """)
        elif wildcards.multimappers == 'unique_reads':
           shell("""
           echo unique only

           cd {params.path}

           {FEATURECOUNTS} -T {threads} \
           -t exon \
           -g gene_id \
           -a {input.gtf} \
           -o  {output.counts} \
           {params.path}/*bam  2>&1 > {log}

           {PIGZ} -f --keep -p {threads} {output.counts} -c > {output.gz_counts}
           """)


## Mapping start ------------------------------------------------------------------------------ ##

# rule map_alevin:
# #@untested @todo @current
# ## fix to take into account the different indices to map against
# ## fix the cutadapt sickle thing
rule map_star_transcriptome_pe:
    input:
        star_index_flag = op.join(BASE, 'indices', 'star', GENOME, 'transcriptome', 'chrName.txt'), 
        fastq1 = op.join(BASE, "data", RUN_NAME, "{fastq}_1.fastq.gz"),
        fastq2 = op.join(BASE, "data", RUN_NAME,  "{fastq}_2.fastq.gz"),
    params:
        star_index = op.join(BASE, 'indices', 'star', GENOME, 'transcriptome'),
        path = op.join(BASE, "runs", RUN_NAME, 'star_transcriptome'),
        prefix = op.join(BASE, "runs", RUN_NAME, 'star_transcriptome', "{fastq}_")
    output:
        bam = op.join(BASE, "runs", RUN_NAME, 'star_transcriptome', "{fastq}_Aligned.sortedByCoord.out.bam"),
        star_tmp = temp(directory(op.join(BASE, 'runs', 'star_transcriptome', "{fastq}_STARtmp")))
    threads:
        NTHREADS
    log:
        op.join(BASE, "runs", RUN_NAME, 'star_transcriptome', "{fastq}_star.log")
    # benchmark:
    #     op.join(BASE, 'run/{sample}/{sample}_star_benchmark.txt')
    shell:
        """
        mkdir -p {params.path}
        cd {params.path}
        
        {STAR} --genomeDir {params.star_index} \
        --readFilesIn {input.fastq1} {input.fastq2} \
        --runThreadN {threads} \
        --outFileNamePrefix {params.prefix} \
        --outSAMtype BAM SortedByCoordinate \
        --readFilesCommand zcat  2> {log}

        ## in case STAR managed to delete its own folder (doesn't always happen)
        mkdir -p {output.star_tmp}
        """


        
rule map_bowtie_repeatome_pe:
    params:
        repeatome = op.join(BASE, 'indices', 'bowtie', GENOME, 'repeatome', op.splitext(op.basename(REP_GTF_URL))[0]),
        sample = RUN_NAME,
        path = op.join(BASE, "runs", RUN_NAME, "bowtie_repeatome")
    input:
        fastq1 = op.join(BASE, "data", RUN_NAME, "{srr}_1.fastq.gz"),
        fastq2 = op.join(BASE, "data", RUN_NAME, "{srr}_2.fastq.gz"),
        repeatome_tag_file = op.join(BASE, 'indices', 'bowtie', GENOME, 'repeatome', op.splitext(op.basename(REP_GTF_URL))[0] + '.1.ebwt')
    output:
        op.join(BASE, "runs", RUN_NAME, "bowtie_repeatome", "{srr}.bam")
    log:
        op.join(BASE, "runs", RUN_NAME, "bowtie_repeatome", "{srr}_bowtie_repeatome.log")
    threads :
        NTHREADS
    shell:
        """
        mkdir -p {params.path}

        ( {BOWTIE} -q \
        -1 <( {PIGZ} --keep --processes {threads} --to-stdout --decompress {input.fastq1} ) \
        -2 <( {PIGZ} --keep --processes {threads} --to-stdout --decompress {input.fastq2} ) \
        -v 2 \
        --threads {threads} \
        -k 2 --best --strata \
        --sam \
        --chunkmbs 128 {params.repeatome} |  samtools view -@ {threads} -bS - > {output} ) 2> {log}
        """


# # from https://gist.github.com/k3yavi/c501705ed2d29b12b0d10cf78b3ed001
# ## and https://github.com/COMBINE-lab/salmon/issues/336 to get the `attribute` instead of
# ##   the group
# rule get_txp2gene_gene:
#     input:
#         genes_gtf = op.join(BASE, 'annotation', op.basename(GENES_GTF_URL))
#     output:
#         op.join(BASE, 'indices', 'salmon', 'genes_salmon', 'txp2gene.tsv')
#     shell:
#          """
#          {PIGZ} --decompress -p {threads} -c {input.genes_gtf} | \
#            grep transcript | awk '{{print $12,$10}}' | sed -e 's|"||g' -e 's|;||g' | uniq > {output}
#          """

# ## untested @todo check
# rule get_txp2gene_repeat:
#     input:
#         repeats_gtf = op.join(BASE, 'annotation', op.basename(REP_GTF_URL))
#     output:
#         op.join(BASE, 'indices', 'salmon', 'repeats_salmon', 'txp2gene.tsv')
#     params:
#         path = op.join(BASE, 'indices', 'salmon', 'repeats_salmon')
#     shell:
#         """
#         mkdir -p {params.path}
        
#         {PIGZ} --decompress -p {threads} -c {input.repeats_gtf} | grep transcript | \
#         awk '{{print $12,$10}}' | sed -e 's|"||g' -e 's|;||g' | uniq > {output}
#         """

# #@untested @todo
# # -l ISR for both Drop-seq and 10x-v2 chemistry
# # https://salmon.readthedocs.io/en/latest/alevin.html#description-of-important-options
# # tech is either --dropseq / --chromium / --chromiumV3
# # beware of the -keepduplicates
# rule run_salmon_chromium_genes:
#     input:        
#         cb_fq1 = op.join(BASE, 'data', 'pbmc_v3','5k_pbmc_v3_fastqs', '5k_pbmc_v3_S1_L001_R1_001.fastq.gz'),
#         cb_fq2 = op.join(BASE, 'data', 'pbmc_v3','5k_pbmc_v3_fastqs', '5k_pbmc_v3_S1_L002_R1_001.fastq.gz'),
#         cb_fq3 = op.join(BASE, 'data', 'pbmc_v3','5k_pbmc_v3_fastqs', '5k_pbmc_v3_S1_L003_R1_001.fastq.gz'),
#         cb_fq4 = op.join(BASE, 'data', 'pbmc_v3','5k_pbmc_v3_fastqs', '5k_pbmc_v3_S1_L004_R1_001.fastq.gz'),
#         r_fq1 = op.join(BASE, 'data', 'pbmc_v3','5k_pbmc_v3_fastqs', '5k_pbmc_v3_S1_L001_R2_001.fastq.gz'),
#         r_fq2 = op.join(BASE, 'data', 'pbmc_v3','5k_pbmc_v3_fastqs', '5k_pbmc_v3_S1_L002_R2_001.fastq.gz'),
#         r_fq3 = op.join(BASE, 'data', 'pbmc_v3','5k_pbmc_v3_fastqs', '5k_pbmc_v3_S1_L003_R2_001.fastq.gz'),
#         r_fq4 = op.join(BASE, 'data', 'pbmc_v3','5k_pbmc_v3_fastqs', '5k_pbmc_v3_S1_L004_R2_001.fastq.gz'),
#         tgmap = op.join(BASE, 'indices', 'salmon', 'genes_salmon', 'txp2gene.tsv'),
#         idx_tracker = op.join(BASE, 'indices', 'salmon', 'genes_salmon', 'duplicate_clusters.tsv')
#     output:
#         op.join(BASE, 'runs', '5k_pbmc_v3_salmon_genes', 'alevin', 'quants_mat.gz')
#     threads:
#         NTHREADS
#     params:
#         processing_path = op.join(BASE, 'runs', '5k_pbmc_v3_salmon_genes'),
#         salmon_idx = op.join(BASE, 'indices', 'salmon', 'genes_salmon')
#     log:
#         op.join(BASE, 'runs', '5k_pbmc_v3_salmon_genes', 'run_salmon_chromium.log')
#     shell:
#         """
#         mkdir -p {params.processing_path}
#         cd {params.processing_path}

#         ({SALMON} alevin \
#          -l ISR \
#          -1 {input.cb_fq1} {input.cb_fq2} {input.cb_fq3} {input.cb_fq4} \
#          -2 {input.r_fq1} {input.r_fq2} {input.r_fq3} {input.r_fq4} \
#          --chromiumV3  \
#          --expectCells 5000 \
#          -i {params.salmon_idx} \
#          -p {threads} -o {params.processing_path} \
#          --tgMap {input.tgmap} ) 2> {log}

#         touch -c {output}
#         """


#         #@untested @todo
# # -l ISR for both Drop-seq and 10x-v2 chemistry
# # https://salmon.readthedocs.io/en/latest/alevin.html#description-of-important-options
# # tech is either --dropseq / --chromium / --chromiumV3
# # beware of the -keepduplicates
# rule run_salmon_chromium_repeats:
#     input:        
#         cb_fq1 = op.join(BASE, 'data', 'pbmc_v3','5k_pbmc_v3_fastqs', '5k_pbmc_v3_S1_L001_R1_001.fastq.gz'),
#         cb_fq2 = op.join(BASE, 'data', 'pbmc_v3','5k_pbmc_v3_fastqs', '5k_pbmc_v3_S1_L002_R1_001.fastq.gz'),
#         cb_fq3 = op.join(BASE, 'data', 'pbmc_v3','5k_pbmc_v3_fastqs', '5k_pbmc_v3_S1_L003_R1_001.fastq.gz'),
#         cb_fq4 = op.join(BASE, 'data', 'pbmc_v3','5k_pbmc_v3_fastqs', '5k_pbmc_v3_S1_L004_R1_001.fastq.gz'),
#         r_fq1 = op.join(BASE, 'data', 'pbmc_v3','5k_pbmc_v3_fastqs', '5k_pbmc_v3_S1_L001_R2_001.fastq.gz'),      
#         r_fq2 = op.join(BASE, 'data', 'pbmc_v3','5k_pbmc_v3_fastqs', '5k_pbmc_v3_S1_L002_R2_001.fastq.gz'),
#         r_fq3 = op.join(BASE, 'data', 'pbmc_v3','5k_pbmc_v3_fastqs', '5k_pbmc_v3_S1_L003_R2_001.fastq.gz'),
#         r_fq4 = op.join(BASE, 'data', 'pbmc_v3','5k_pbmc_v3_fastqs', '5k_pbmc_v3_S1_L004_R2_001.fastq.gz'),
#         tgmap = op.join(BASE, 'indices', 'salmon', 'repeats_salmon', 'txp2gene.tsv'),
#         idx_tracker = op.join(BASE, 'indices', 'salmon', 'repeats_salmon', 'duplicate_clusters.tsv')
#     output:
#         op.join(BASE, 'runs', '5k_pbmc_v3_salmon_repeats', 'alevin', 'quants_mat.gz')
#     params:
#         processing_path = op.join(BASE, 'runs', '5k_pbmc_v3_salmon_repeats'),
#         salmon_idx = op.join(BASE, 'indices', 'salmon', 'repeats_salmon')
#     threads:
#         NTHREADS
#     log:
#         op.join(BASE, 'runs',  '5k_pbmc_v3_salmon_repeats', 'run_salmon_chromium_repeats.log')
#     shell:
#         """
#     mkdir -p {params.processing_path}
#     cd {params.processing_path}

#     ({SALMON} alevin \
#     -l ISR \
#     -1 {input.cb_fq1} {input.cb_fq2} {input.cb_fq3} {input.cb_fq4} \
#     -2 {input.r_fq1} {input.r_fq2} {input.r_fq3} {input.r_fq4} \
#     --chromiumV3  \
#     --expectCells 5000 \
#     -i {params.salmon_idx} \
#     -p {threads} \
#     -o {params.processing_path} \
#     --tgMap {input.tgmap} ) 2> {log}

#     touch -c {output}
#         """
        
## Mapping end -------------------------------------------------------------------------------- ##


## Indexing start ----------------------------------------------------------------------------- ##


# rule index_cellranger_repeats:
#     input:
#        compressed_fa = op.join(BASE, 'annotation', op.basename(GENOME_URL)),
#        compressed_gtf = op.join(BASE, 'annotation', op.basename(REP_GTF_URL))
#     params:
#        local_mem_gb = LOCAL_MEM_GB,
#        path =  op.join(BASE, 'indices', 'cellranger', 'repeats_' + GENOME),
#        genome = 'repeats_' + GENOME
#     threads:
#         NTHREADS
#     output:
#         uncompressed_gtf = temp(op.join(BASE, 'annotation', op.splitext(op.basename(REP_GTF_URL))[0])),
#         flag = op.join(BASE, 'indices', 'cellranger', 'repeats_' + GENOME, 'Log.out'),
#         uncompressed_fa = temp(op.join(BASE, 'annotation', op.splitext(op.basename(GENOME_URL))[0]))
#     shell:
#        """ 
#        mkdir -p {params.path}
#        cd {params.path}
 
#        {PIGZ} --decompress  -p {threads} --keep -c {input.compressed_fa} > \
#         {output.uncompressed_fa}

#        {PIGZ} --decompress  -p {threads} --keep -c {input.compressed_gtf} > \
#          {output.uncompressed_gtf}
       
#        {CELLRANGER} mkref --genome {params.genome} \
#        --fasta {output.uncompressed_fa} \
#        --genes {output.uncompressed_gtf} \
#        --nthreads {threads} \
#        --memgb {params.local_mem_gb} 

#        touch {output.flag}
#        """
                                                
# rule index_repeats_salmon_no_decoy:
#     input:
#         repeats = op.join(BASE, 'annotation', 'repeatome_from_' + op.splitext(op.basename(REP_GTF_URL))[0] + '.fa.gz')
#     output:
#         op.join(BASE, 'indices', 'salmon', 'repeats_salmon', 'duplicate_clusters.tsv'),
#         op.join(BASE, 'indices', 'salmon', 'repeats_salmon', 'complete_ref_lens.bin')
#     params:
#         path = op.join(BASE, 'indices', 'salmon', 'repeats_salmon'),
#         k = 31
#     threads:
#         NTHREADS
#     log:
#         op.join(BASE, 'indices', 'salmon', 'repeats_salmon_index.log')
#     shell:
#         """
#         mkdir -p {params.path}
        
#         ({SALMON} index -p {threads} \
#           index -t {input.repeats} -i {params.path} -k {params.k}) 2> {log}
#         """


# # https://salmon.readthedocs.io/en/latest/alevin.html
# # ./bin/salmon index -t transcripts.fa -i transcripts_index --decoys decoys.txt -k 31
# ## shall I use a decoy? https://github.com/COMBINE-lab/SalmonTools/README.md
# # apparently not
# # **NOTE:** Salmon version [v1.0](https://github.com/COMBINE-lab/salmon/releases/tag/v1.0.0) can directly index the genome and transcriptome and doesn't mandates to run the `generateDecoyTranscriptome` script, however it's still backward compatible. Please checkout [this](https://combine-lab.github.io/alevin-tutorial/2019/selective-alignment/) tutorial on how to run salmon with full genome + transcriptome without the annotation.
# rule index_genes_salmon_no_decoy:
#     input:
#         transcripts = op.join(BASE, 'annotation', op.basename(TRANSCRIPTOME_URL))
#     params:
#         k = 31,
#         path = op.join(BASE, 'indices', 'salmon', 'genes_salmon')
#     log:
#         op.join(BASE, 'indices', 'salmon', 'genes_salmon', 'genes_salmon_index.log')
#     threads:
#         NTHREADS
#     output:
#         op.join(BASE, 'indices', 'salmon', 'genes_salmon', 'duplicate_clusters.tsv'),
#         op.join(BASE, 'indices', 'salmon', 'genes_salmon', 'complete_ref_lens.bin')
#     shell:        
#         """
#         mkdir -p {params.path}
        
#         ({SALMON} index --gencode -p {threads} index \
#            -t {input.transcripts} -i {params.path} -k {params.k})  2> {log}

#         touch -c {params.path}

#         """

rule index_repeats_genome_star:
    params:
        genome_dir = op.join(BASE, 'indices', 'star', GENOME, 'repeatome'),
    input:
        fa = op.join(BASE, 'annotation', op.basename(GENOME_URL)),
        gtf = op.join(BASE, 'annotation', op.basename(REP_GTF_URL))
    log:
        op.join(BASE, 'indices', 'star', GENOME, 'repeatome', 'repeats_star_index.log')
    threads:
        NTHREADS
    output:
        op.join(BASE, 'indices', 'star', GENOME, 'repeatome', 'chrName.txt'),
        op.join(BASE, 'indices', 'star', GENOME, 'repeatome', 'chrStart.txt'),
        op.join(BASE, 'indices', 'star', GENOME, 'repeatome', 'chrNameLength.txt'),
        fa_decomp = temp(op.join(BASE, 'annotation', op.splitext(op.basename(GENOME_URL))[0])),
        gtf_decomp = temp(op.join(BASE, 'annotation', op.splitext(op.basename(REP_GTF_URL))[0]))
    shell:
        """
        mkdir -p {params.genome_dir}

        {PIGZ} -k --decompress -p {threads} {input.gtf}
        {PIGZ} -k --decompress -p {threads} {input.fa}

        ({STAR}  \
        --runMode genomeGenerate \
        --runThreadN {threads} \
        --sjdbGTFfile {output.gtf_decomp} \
        --genomeDir {params.genome_dir} \
        --genomeFastaFiles {output.fa_decomp}) 2> {log}

        touch {output}
        """

rule index_genes_genome_star:
    params:
        genome_dir = op.join(BASE, 'indices', 'star', GENOME, 'transcriptome'),
    input:
        fa = op.join(BASE, 'annotation', op.basename(GENOME_URL)),
        gtf = op.join(BASE, 'annotation', op.basename(GENES_GTF_URL))
    output:    
        op.join(BASE, 'indices', 'star', GENOME, 'transcriptome', 'chrName.txt'),
        op.join(BASE, 'indices', 'star', GENOME, 'transcriptome', 'chrStart.txt'),
        op.join(BASE, 'indices', 'star', GENOME, 'transcriptome', 'chrNameLength.txt'),
        fa_decomp = temp(op.join(BASE, 'annotation', op.splitext(op.basename(GENOME_URL))[0])),
        gtf_decomp = temp(op.join(BASE, 'annotation', op.splitext(op.basename(GENES_GTF_URL))[0]))

    log:
        op.join(BASE, 'indices', 'star', 'transcriptome', 'genes_star_index.log')
    threads:
        NTHREADS
    shell:
        """
        mkdir -p {params.genome_dir}

        {PIGZ} -k --decompress -p {threads} {input.gtf}
        
        {PIGZ} -k --decompress -p {threads} {input.fa}

        ({STAR}  \
        --runMode genomeGenerate \
        --runThreadN {threads} \
        --sjdbGTFfile {output.gtf_decomp} \
        --genomeDir {params.genome_dir} \
        --genomeFastaFiles {output.fa_decomp}) 2> {log}

        touch {output}
        """

        
rule bowtie_index_repeatome_bowtie:
    input:
        fa = op.join(BASE, 'annotation', 'repeatome_from_' + op.splitext(op.basename(REP_GTF_URL))[0] + '.fa.gz')
    threads: NTHREADS
    params:
        label = op.join(BASE, 'indices', 'bowtie', GENOME, 'repeatome',  op.splitext(op.basename(REP_GTF_URL))[0]),
        path =  op.join(BASE, 'indices', 'bowtie', GENOME, 'repeatome')
    log:
        op.join(BASE, 'indices', 'bowtie', GENOME, 'repeatome', 'bowtie_repeatome.log')
    output:
        fa_uncomp = temp(op.join(BASE, 'annotation', 'repeatome_from_' + op.splitext(op.basename(REP_GTF_URL))[0] + '.fa')),
        o1 = op.join(BASE, 'indices', 'bowtie', GENOME, 'repeatome', op.splitext(op.basename(REP_GTF_URL))[0] + '.1.ebwt') #,
        # o1 = op.join(BASE, 'indices', 'bowtie', 'repeatome', op.splitext(op.basename(DFAM_EMBL_URL))[0]) + '.1.ebwt',
        # o2 = op.join(BASE, 'indices', 'bowtie', 'repeatome',
        #              op.splitext(op.basename(DFAM_EMBL_URL))[0]) + '.2.ebwt',
        # o3 = op.join(BASE, 'indices', 'bowtie', 'repeatome',
        #              op.splitext(op.basename(DFAM_EMBL_URL))[0]) + '.3.ebwt',
        # o4 = op.join(BASE, 'indices', 'bowtie', 'repeatome',
        #              op.splitext(op.basename(DFAM_EMBL_URL))[0]) + '.4.ebwt',
        # o1rev = op.join(BASE, 'indices', 'bowtie', 'repeatome',
        #                 op.splitext(op.basename(DFAM_EMBL_URL))[0]) + '.rev.1.ebwt',
        # o2rev = op.join(BASE, 'indices', 'bowtie', 'repeatome',
        #                 op.splitext(op.basename(DFAM_EMBL_URL))[0]) + '.rev.2.ebwt'
    shell:
        """
        mkdir -p {params.path}
        
        {PIGZ} -k --decompress -p {threads} {input.fa}
        
        ({BOWTIE_BUILD} {output.fa_uncomp} {params.label} --threads {threads}) 2> {log}
        """


## Genome, transcriptome and repeatome retrieval start ---------------------------------------- ##

rule uncompress_genome:
    params:
        genome_dir = op.join(BASE, 'annotation'),
    input:
        fagz = op.join(BASE, 'annotation', op.basename(GENOME_URL))
    output:
        temp(op.join(BASE, 'annotation', op.splitext(op.basename(GENOME_URL))[0]))
    shell:
        """
        {PIGZ} -k --decompress -p {threads}  {input.fagz}
        """

rule extract_repeatome_from_gtf:
    priority: 100
    input:
        genome = op.join(BASE, 'annotation', op.basename(GENOME_URL)),
        gtf = op.join(BASE, 'annotation', op.basename(REP_GTF_URL))
    output:
        genome_uncompressed = temp(op.join(BASE, 'annotation', op.splitext(op.basename(GENOME_URL))[0])) + '.temp_extract',
        fai = temp(op.join(BASE, 'annotation', op.splitext(op.basename(GENOME_URL))[0])) + '.temp_extract.fai',
        fasta = temp(op.join(BASE, 'annotation', 'repeatome_from_' + op.splitext(op.basename(REP_GTF_URL))[0]) + '.fa'),
        gtftemp = op.join(BASE, 'annotation', 'temp_' + op.basename(REP_GTF_URL)),
        fastagz = op.join(BASE, 'annotation', 'repeatome_from_' + op.splitext(op.basename(REP_GTF_URL))[0]) + '.fa.gz'
    params :
        rscript = GTF_PARSING_RSCRIPT
    threads:
        NTHREADS
    shell:
        """
        {PIGZ} --keep --decompress -p {threads} -c  {input.genome} > {output.genome_uncompressed}

        ## faking the GTF to describe the instance and not the 'exon'

        {Rscript} {params.rscript} -g {input.gtf} | {PIGZ} -c -p {threads} > \
          {output.gtftemp}
        
        # {BEDTOOLS} getfasta -name -s -fi {output.fasta} \
        #   -bed {output.gtftemp} -fo {output.fasta}

        {BEDTOOLS} getfasta -name -s -fi {output.genome_uncompressed} \
          -bed {output.gtftemp} -fo {output.fasta}

        ## remove the coordinates appended by bedtools!
        sed 's/:/ /g' {output.fasta} | cut -f1 -d" " | \
          {PIGZ}  -p {threads} -c > {output.fastagz}
        
        """

rule add_chr_strings_to_genome:
    priority:
        100
    input:
        op.join(BASE, 'annotation', 'without_chr_' + op.basename(GENOME_URL))
    output:
        op.join(BASE, 'annotation', op.basename(GENOME_URL))
    params:
        url = GENOME_URL
    threads:
        NTHREADS
    shell:
        """
        {PIGZ} --keep --decompress -p {threads} -c {input} | \
           sed 's/>/>chr/g' | {PIGZ} -p {threads} -c > {output}
        """
    
rule get_genome_fasta:
    priority:
        100
    output:
        temp(op.join(BASE, 'annotation', 'without_chr_' + op.basename(GENOME_URL)))
    params:
        url = GENOME_URL
    shell:
        """
        curl -s -L -C - {params.url} -o {output}
        """
      
rule get_repeats_gtf:
    priority:
        100
    params:
        url = REP_GTF_URL,
        genome_path = op.join(BASE, 'annotation')
    output:
        op.join(BASE, 'annotation', op.basename(REP_GTF_URL))
    shell:
        """        
        curl -s -L -C - {params.url} -o {output}
        """
        
rule get_genes_gtf:
    priority:
        100
    params:
        url = GENES_GTF_URL
    output:
        gtf = op.join(BASE, 'annotation', op.basename(GENES_GTF_URL))
    shell:
        """    
        curl -s -L -C - {params.url} -o {output.gtf}
        """
