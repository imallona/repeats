#!/usr/bin/env snakemake -s
## 
## Started 28 Apr 2021
##
## Izaskun Mallona
## GPLv3

## important note: simulations are implemented in 03_simulate_chromium_v3.sh


import os.path as op
from glob import glob

RUN_NAME  = 'sim_5k_pbmc_v3'
RUN_TECH = 'chromium'


## Folder structure start --------------------------------------------------------------------- ##

#@FIXME to be moved to config, not hardcoded!
BASE = op.join('/home', 'imallona', 'repeats_sc')
NTHREADS = 28
LOCAL_MEM_GB = 100
GENOME= 'GRCh38'
GENOME_SHORT = 'hg38'

## @FIXME to be moved to config
GENOME_URL = 'ftp://ftp.ensembl.org/pub/release-98/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz'
# GENES_GTF_URL =  'ftp://ftp.ensembl.org/pub/release-98/gtf/homo_sapiens/Homo_sapiens.GRCh38.98.gtf.gz'
GENES_GTF_URL = 'ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_33/gencode.v33.primary_assembly.annotation.gtf.gz'
REP_GTF_URL = 'http://labshare.cshl.edu/shares/mhammelllab/www-data/TEtranscripts/TE_GTF/GRCh38_rmsk_TE.gtf.gz'
# REP_GTF_URL = 'http://labshare.cshl.edu/shares/mhammelllab/www-data/TEtranscripts/TE_GTF/mm10_rmsk_TE.gtf.gz'
DFAM_EMBL_URL = 'https://www.dfam.org/releases/current/families/Dfam.embl.gz'
# TRANSCRIPTOME_URL= 'ftp://ftp.ensembl.org/pub/release-98/fasta/homo_sapiens/cdna/Homo_sapiens.GRCh38.cdna.all.fa.gz'
TRANSCRIPTOME_URL = 'ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_33/gencode.v33.pc_transcripts.fa.gz'

CELLRANGER_DB_URL = 'http://cf.10xgenomics.com/supp/cell-exp/refdata-cellranger-GRCh38-3.0.0.tar.gz'
CELLRANGER_DB_ID = 'refdata-cellranger-GRCh38-3.0.0'

## @FIXME to be moved to config

GTF_PARSING_RSCRIPT = '~/src/repeats_sc/04_snakemake/gtf_parser.R'
FEATURECOUNTS_RSCRIPT= '~/src/repeats_sc/04_snakemake/plot_featurecounts_profile.R'
GTF_MAKING_SCRIPT = '~/src/repeats_sc/04_snakemake/gtf_maker.R'

BOWTIE_BUILD = '/home/imallona/soft/bowtie/bowtie-1.2.3/bowtie-build'
BOWTIE = '/home/imallona/soft/bowtie/bowtie-1.2.3/bowtie'

##pigz 2.3.1
PIGZ = '/usr/bin/pigz'
BIOPYTHON_CONVERT='biopython.convert'
STAR = '~/soft/star/STAR-2.7.3a/source/STAR'
FEATURECOUNTS = '~/soft/subread/subread-2.0.0-source/bin/featureCounts'
SALMON = '~/soft/salmon/salmon-1.1.0_linux_x86_64/bin/salmon'
CELLRANGER = '~/soft/cellranger/cellranger-3.1.0/cellranger'
BIOAWK = '~/soft/bioawk/bioawk'
BEDTOOLS = '~/soft/bedtools/bedtools-2.29.2/bin/bedtools'
Rscript = '/usr/local/R/R-4.0.5/bin/Rscript'
FASTQ_DUMP= '~/soft/sra-toools/sratoolkit.2.10.4-ubuntu64/bin/fastq-dump' # fastq-dump : 2.10.4
VDB_VALIDATE = '~/soft/sra-toools/sratoolkit.2.10.4-ubuntu64/bin/vdb-validate'
BEDOPS='~/soft/bedops/bedops-2.4.39/bin/bedops'

GSE144357_srr = ['SRR10974769', 'SRR10974768']

## config file start ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# configfile: "config.yaml"
# validate(config, "schemas/config.schema.yaml")

# samples = pd.read_csv(config["samples"], sep = '\t').set_index("id", drop=False)

CHEMISTRY = 'SC3Pv3'
DEMUX = False

# samples_R2, = glob_wildcards(op.join(BASE, "data", RUN_NAME, "{sample}_1.fastq.gz"))
# samples_R1, = glob_wildcards(op.join(BASE, "data", RUN_NAME, "{sample}_2.fastq.gz"))
# samples_I3, = glob_wildcards(op.join(BASE, "data", RUN_NAME, "{sample}_3.fastq.gz"))

## this is needed to be hardcoded/config file

try:
   if not op.exists(op.dirname(op.join(BASE, 'annotation'))):
      os.makedirs(op.join(BASE, 'annotation'))
except OSError as err:
   print(err)
      
for item in ['bowtie', 'star', 'salmon']:
   try:
      if not op.exists(op.dirname(op.join(BASE, 'indices', item))):
         os.makedirs(op.join(BASE, 'indices', item))
   except OSError as err:
      print(err)
      
## Folder structure end ----------------------------------------------------------------------- ##

include: "/home/imallona/src/repeats_sc/04_snakemake/chromium_flow.snmk"

    
rule all:
    input:
        # expand(op.join(BASE, 'runs', RUN_NAME, RUN_NAME + '_pbmc_chromium_regress_nCount_{regress_ncount}_nFeature_{regress_nfeature}.html'), regress_ncount = ['TRUE', 'FALSE'],
        #                regress_nfeature = ['TRUE', 'FALSE']),
        # op.join(BASE, "runs", RUN_NAME, 'count_repeats_on_cellranger_standard_not_overlapping_genes',
        #         RUN_NAME + "_repeats_not_overlapping_genes.counts.gz"),
        expand(op.join(BASE, "runs", RUN_NAME,
                       'count_repeats_loci_on_cellranger_standard_not_overlapping_genes',
                            '{multimappers}',
                            RUN_NAME + "_repeats_not_overlapping_genes.counts.gz"),
                multimappers = ['multimappers', 'unique_reads']),
        expand(op.join(BASE, "runs", RUN_NAME, 'count_repeats_loci_on_cellranger_standard',
                            '{multimappers}',
                            RUN_NAME + "_repeats.counts.gz"),        
                 multimappers = ['multimappers', 'unique_reads']),
        op.join(BASE, 'runs', RUN_NAME, 'alevin', 'genes', 'alevin', 'quants_mat.gz'),
        op.join(BASE, 'runs', RUN_NAME, 'alevin', 'repeats', 'alevin', 'quants_mat.gz'),
        op.join(BASE, 'runs', RUN_NAME, 'cellranger_repeats', 'outs', 'web_summary.html'),
        op.join(BASE, 'runs', RUN_NAME, 'cellranger_standard', 'outs', 'web_summary.html'),
        op.join(BASE, 'runs', RUN_NAME, 'alevin', 'repeats_per_locus', 'alevin', 'quants_mat.gz'),
        expand(op.join(BASE, "runs", RUN_NAME, "bowtie_repeatome", "{multimappers}",
                            "by_locus_repeats.counts.gz"),
               multimappers = ['multimappers', 'unique_reads']),
        op.join(BASE, 'runs', RUN_NAME, 'sim_postproc.html'),
        op.join(BASE, 'runs', RUN_NAME, 'scTE', 'scTE.out.csv.gz')
        # expand(op.join(BASE, 'runs', RUN_NAME, RUN_NAME + '_pbmc_alevin_regress_nCount_{regress_ncount}_nFeature_{regress_nfeature}.html'), regress_ncount = ['TRUE', 'FALSE'],
        #                regress_nfeature = ['TRUE', 'FALSE']),
        #  op.join(BASE, "runs", RUN_NAME, 'bowtie_repeatome', 'split_bowtie.flag'),
        #  expand(op.join(BASE, "runs", RUN_NAME, 'bowtie_repeatome',
        #                 '{multimappers}',
        #                 "all_cells_repeats.counts.gz"),
        #         multimappers = ['multimappers', 'unique_reads'])


rule run_simulation:
    output:
        truth = op.join(BASE, 'data', RUN_NAME, "truth.tsv.gz")
    threads:
        NTHREADS
    shell:
        """
        bash 03_simulate_chromium_v3.sh
        """
        
rule run_cellranger_repeats:
    input:
        truth = op.join(BASE, 'data', RUN_NAME, "truth.tsv.gz"),
        transcriptome = op.join(BASE, 'indices', 'cellranger', 'repeats_hg38', 'repeats_hg38')
    params:
        fastqs_path = op.join(BASE, 'data', RUN_NAME),
        sample_name = RUN_NAME,
        local_mem_gb = LOCAL_MEM_GB,
        processing_path = op.join(BASE, 'runs', RUN_NAME)
    output:
        op.join(BASE, 'runs', RUN_NAME, 'cellranger_repeats', 'outs', 'web_summary.html'),
        op.join(BASE, 'runs', RUN_NAME, 'cellranger_repeats', 'outs', 'filtered_feature_bc_matrix', 'barcodes.tsv.gz')
    threads:
        NTHREADS
    log:
        op.join(BASE, 'runs', RUN_NAME, 'cellranger_repeats.log')
    shell:
        """
        mkdir -p {params.processing_path}
        cd {params.processing_path}
        rm -rf cellranger_repeats
        
        {CELLRANGER} count --id=cellranger_repeats \
          --fastqs={params.fastqs_path} \
          --transcriptome={input.transcriptome} \
          --jobmode=local \
          --localcores={threads} \
          --chemistry=SC3Pv3 \
          --sample={params.sample_name} \
          --localmem={params.local_mem_gb} &> {log}
        """
        
rule run_cellranger_standard:
    input:
        truth = op.join(BASE, 'data', RUN_NAME, "truth.tsv.gz"),
        transcriptome = op.join(BASE, 'indices', 'cellranger',
                                'refdata-cellranger-GRCh38-3.0.0')
    params:
        fastqs_path = op.join(BASE, 'data', RUN_NAME),
        sample_name = RUN_NAME,
        local_mem_gb = LOCAL_MEM_GB,
        processing_path = op.join(BASE, 'runs', RUN_NAME)
    output:
        op.join(BASE, 'runs', RUN_NAME, 'cellranger_standard', 'outs', 'web_summary.html'),
        op.join(BASE, 'runs', RUN_NAME, 'cellranger_standard', 'outs', 'filtered_feature_bc_matrix', 'barcodes.tsv.gz'),
        op.join(BASE, 'runs', RUN_NAME, 'cellranger_standard', 'outs', 'possorted_genome_bam.bam')
    threads:
        NTHREADS
    log:
        op.join(BASE, 'runs',  RUN_NAME, 'cellranger_standard.log')
    shell:
        """
        mkdir -p {params.processing_path}
        cd {params.processing_path}
        rm -rf cellranger_standard

        {CELLRANGER} count --id=cellranger_standard \
          --fastqs={params.fastqs_path} \
          --transcriptome={input.transcriptome} \
          --jobmode=local \
          --chemistry=SC3Pv3 \
          --localcores={threads} \
          --sample={params.sample_name} \
          --localmem={params.local_mem_gb} &> {log}
        """


        
rule map_salmon_repeats_chromium:
    input:
        truth = op.join(BASE, 'data', RUN_NAME, "truth.tsv.gz"),
        tgmap = op.join(BASE, 'indices', 'salmon', GENOME, 'repeats_salmon', 'txp2gene.tsv'),
        idx_tracker = op.join(BASE, 'indices', 'salmon', GENOME, 'repeats_salmon', 'duplicate_clusters.tsv'),
        cb = sorted(glob(op.join(BASE, 'data', RUN_NAME, '*R1*fastq.gz'))),
        r2 = sorted(glob(op.join(BASE, 'data', RUN_NAME, '*R2*fastq.gz')))        
    output:
        op.join(BASE, 'runs', RUN_NAME, 'alevin', 'repeats', 'alevin', 'quants_mat.gz')
    threads:
        NTHREADS
    params:
        fastqs_path = op.join(BASE, 'data', RUN_NAME),
        processing_path = op.join(BASE, 'runs', RUN_NAME, 'alevin', 'repeats'),
        salmon_idx = op.join(BASE, 'indices', 'salmon', GENOME, 'repeats_salmon'),
        cb = ' '.join(sorted(glob(op.join(BASE, 'data', RUN_NAME, '*R1*fastq.gz')))),
        r2 = ' '.join(sorted(glob(op.join(BASE, 'data', RUN_NAME, '*R2*fastq.gz')))) 
    log:
        op.join(BASE, 'runs', RUN_NAME, 'run_salmon_repeats_chromium.log')
    shell:
        """
    mkdir -p {params.processing_path}
    cd {params.processing_path}

    ({SALMON} alevin \
    -l ISR \
    -1 {params.cb} \
    -2 {params.r2} \
    --chromiumV3  \
    --dumpBfh \
    -i {params.salmon_idx} \
    --forceCells 1000 \
    -p {threads} -o {params.processing_path} \
    --tgMap {input.tgmap} ) 2> {log}

    touch -c {output}
        """
    

        
## beware the cb path for pbmc5k, they shouldn't be there at `RUN_NAME + '_fastqs/` subfoder
rule map_salmon_genes_chromium:
    input:
        truth = op.join(BASE, 'data', RUN_NAME, "truth.tsv.gz"),
        tgmap = op.join(BASE, 'indices', 'salmon', GENOME, 'genes_salmon', 'txp2gene.tsv'),
        idx_tracker = op.join(BASE, 'indices', 'salmon', GENOME, 'genes_salmon', 'duplicate_clusters.tsv'),
        cb = sorted(glob(op.join(BASE, 'data', RUN_NAME, '*R1*fastq.gz'))),
        r2 = sorted(glob(op.join(BASE, 'data', RUN_NAME, '*R2*fastq.gz')))        
    output:
        op.join(BASE, 'runs', RUN_NAME, 'alevin', 'genes', 'alevin', 'quants_mat.gz')
    threads:
        NTHREADS
    params:
        fastqs_path = op.join(BASE, 'data', RUN_NAME),
        processing_path = op.join(BASE, 'runs', RUN_NAME, 'alevin', 'genes'),
        salmon_idx = op.join(BASE, 'indices', 'salmon', GENOME, 'genes_salmon'),
        cb = ' '.join(sorted(glob(op.join(BASE, 'data', RUN_NAME, '*R1*fastq.gz')))),
        r2 = ' '.join(sorted(glob(op.join(BASE, 'data', RUN_NAME, '*R2*fastq.gz')))) 
    log:
        op.join(BASE, 'runs', RUN_NAME, 'run_salmon_genes_chromium.log')
    shell:
        """
    mkdir -p {params.processing_path}
    cd {params.processing_path}

    ({SALMON} alevin \
    -l ISR \
    -1 {params.cb} \
    -2 {params.r2} \
    --chromiumV3  \
    --forceCells 1000 \
    -i {params.salmon_idx} \
    -p {threads} -o {params.processing_path} \
    --tgMap {input.tgmap} ) 2> {log}

    touch -c {output}
        """

# index at the locus level?

# rather, modify the txp2gene to quantify individual items?

rule locify_txp2gene_repeats:
    input:
        txp2gene_repeats = op.join(BASE, 'indices', 'salmon', GENOME, 'repeats_salmon',
                                   'txp2gene.tsv')
    output:
        txp2gene_repeat_locus = op.join(BASE, 'indices', 'salmon', GENOME,
                                        'repeats_salmon_per_locus',
                                        'txp2gene.tsv')
    params:
        path = op.join(BASE, 'salmon', GENOME, 'repeats_salmon_per_locus')
    shell:
        """
        mkdir -p {params.path}
        awk '{{print $1,$1}}' {input.txp2gene_repeats} > {output.txp2gene_repeat_locus} 
        """
   
rule map_salmon_repeats_chromium_per_locus:
    input:
        truth = op.join(BASE, 'data', RUN_NAME, "truth.tsv.gz"),
        tgmap = op.join(BASE, 'indices', 'salmon', GENOME, 'repeats_salmon_per_locus',
                                        'txp2gene.tsv'),
        idx_tracker = op.join(BASE, 'indices', 'salmon', GENOME, 'repeats_salmon',
                              'duplicate_clusters.tsv'),
        cb = sorted(glob(op.join(BASE, 'data', RUN_NAME, '*R1*fastq.gz'))),
        r2 = sorted(glob(op.join(BASE, 'data', RUN_NAME, '*R2*fastq.gz')))        
    output:
        op.join(BASE, 'runs', RUN_NAME, 'alevin', 'repeats_per_locus', 'alevin', 'quants_mat.gz')
    threads:
        NTHREADS
    params:
        fastqs_path = op.join(BASE, 'data', RUN_NAME),
        processing_path = op.join(BASE, 'runs', RUN_NAME, 'alevin', 'repeats_per_locus'),
        salmon_idx = op.join(BASE, 'indices', 'salmon', GENOME, 'repeats_salmon'),
        cb = ' '.join(sorted(glob(op.join(BASE, 'data', RUN_NAME, '*R1*fastq.gz')))),
        r2 = ' '.join(sorted(glob(op.join(BASE, 'data', RUN_NAME, '*R2*fastq.gz')))) 
    log:
        op.join(BASE, 'runs', RUN_NAME, 'run_salmon_repeats_chromium.log')
    shell:
        """
    mkdir -p {params.processing_path}
    cd {params.processing_path}

    ({SALMON} alevin \
    -l ISR \
    -1 {params.cb} \
    -2 {params.r2} \
    --chromiumV3  \
    --dumpBfh \
    -i {params.salmon_idx} \
    --forceCells 1000 \
    -p {threads} -o {params.processing_path} \
    --tgMap {input.tgmap} ) 2> {log}

    touch -c {output}
        """

        
rule run_featurecounts_spawned_bams_per_locus:
    input:
        flag = op.join(BASE, "runs", RUN_NAME, 'count_repeats_on_cellranger_standard', 'split.flag'),
        gtf = op.join(BASE, 'annotation', op.basename(REP_GTF_URL))
    params:
        path = op.join(BASE, "runs", RUN_NAME, 'count_repeats_on_cellranger_standard', 'split')        
    output:
        counts  = temp(op.join(BASE, "runs", RUN_NAME, 'count_repeats_loci_on_cellranger_standard',
                               '{multimappers}',
                               RUN_NAME + "_repeats.counts")),
        gz_counts = op.join(BASE, "runs", RUN_NAME, 'count_repeats_loci_on_cellranger_standard',
                            '{multimappers}',
                            RUN_NAME + "_repeats.counts.gz"),
        summary = op.join(BASE, "runs", RUN_NAME, 'count_repeats_loci_on_cellranger_standard',
                          '{multimappers}',
                            RUN_NAME + "_repeats.counts.summary")
    log :
        log = op.join(BASE, "runs",  RUN_NAME, 'count_repeats_loci_on_cellranger_standard',
                      '{multimappers}',                      
                      'feature_counts.log'),
    threads:
        NTHREADS
    run:
        if wildcards.multimappers == 'multimappers':
            shell("""
            echo multimappers allowed

            cd {params.path}

            {FEATURECOUNTS} -T {threads} \
            -t exon \
            -g transcript_id \
            -a {input.gtf} \
            -o  {output.counts} \
            -M \
            --fraction \
            {params.path}/*bam  2>&1 > {log}

            {PIGZ} -f --keep -p {threads} {output.counts} -c > {output.gz_counts}

            """)
        elif wildcards.multimappers == 'unique_reads':
            shell("""
            echo unique only

            cd {params.path}

            {FEATURECOUNTS} -T {threads} \
            -t exon \
            -g transcript_id \
            -a {input.gtf} \
            -o  {output.counts} \
            {params.path}/*bam  2>&1 > {log}

            {PIGZ} -f --keep -p {threads} {output.counts} -c > {output.gz_counts}
            """)

rule run_feature_counts_repeats_not_overlapping_genes_spawned_bams_per_locus:
    input:
        flag = op.join(BASE, "runs", RUN_NAME, 'count_repeats_on_cellranger_standard', 'split.flag'),
        gtf = op.join(BASE, 'annotation', op.basename(REP_GTF_URL) + '_minus_' + op.basename(GENES_GTF_URL))
    params:
        path = op.join(BASE, "runs", RUN_NAME, 'count_repeats_on_cellranger_standard', 'split')
    output:
        counts  = temp(op.join(BASE, "runs", RUN_NAME,
                               'count_repeats_loci_on_cellranger_standard_not_overlapping_genes',
                               '{multimappers}',
                               RUN_NAME + "_repeats_not_overlapping_genes.counts")),
        gz_counts = op.join(BASE, "runs", RUN_NAME, 'count_repeats_loci_on_cellranger_standard_not_overlapping_genes',
                            '{multimappers}',
                            RUN_NAME + "_repeats_not_overlapping_genes.counts.gz"),
        summary = op.join(BASE, "runs", RUN_NAME, 'count_repeats_loci_on_cellranger_standard_not_overlapping_genes',
                          '{multimappers}',
                           RUN_NAME + "_repeats_not_overlapping_genes.counts.summary")
    log :
        log = op.join(BASE, "runs",  RUN_NAME, 'count_repeats_loci_on_cellranger_standard_not_overlapping_genes',
                      '{multimappers}'
                      'feature_counts_not_overlapping_genes.log'),
    threads:
        NTHREADS
    run:
        if wildcards.multimappers == 'multimappers':
            shell("""
            echo multimappers allowed

            cd {params.path}

            {FEATURECOUNTS} -T {threads} \
            -t exon \
            -g transcript_id \
            -a {input.gtf} \
            -o  {output.counts} \
            -M \
            --fraction \
            {params.path}/*bam  2>&1 > {log}

            {PIGZ} -f --keep -p {threads} {output.counts} -c > {output.gz_counts}

            """)
        elif wildcards.multimappers == 'unique_reads':
            shell("""
            echo unique only

            cd {params.path}

            {FEATURECOUNTS} -T {threads} \
            -t exon \
            -g transcript_id \
            -a {input.gtf} \
            -o  {output.counts} \
            {params.path}/*bam  2>&1 > {log}

            {PIGZ} -f --keep -p {threads} {output.counts} -c > {output.gz_counts}
            """)

# index cellranger so it counts transcript ids? for that, hacking the GTF and having the
## gene_ids replaced by transcript ids content would be needed.


rule knit_report:
    input:
        repeats_only_multi = op.join(
           BASE, "runs", RUN_NAME,
           'count_repeats_loci_on_cellranger_standard_not_overlapping_genes',
           'multimappers',
           RUN_NAME + "_repeats_not_overlapping_genes.counts.gz"),           
        repeats_featurecounts_multi = op.join(
           BASE, "runs", RUN_NAME, 'count_repeats_loci_on_cellranger_standard',
           'multimappers',
           RUN_NAME + "_repeats.counts.gz"),
        repeats_only_unique = op.join(
           BASE, "runs", RUN_NAME,
           'count_repeats_loci_on_cellranger_standard_not_overlapping_genes',
           'unique_reads',
           RUN_NAME + "_repeats_not_overlapping_genes.counts.gz"),           
        repeats_featurecounts_unique = op.join(
           BASE, "runs", RUN_NAME, 'count_repeats_loci_on_cellranger_standard',
           'unique_reads',
           RUN_NAME + "_repeats.counts.gz"), 
        repeats_alevin_locus = op.join(BASE, 'runs', RUN_NAME, 'alevin', 'repeats_per_locus',
                                       'alevin', 'quants_mat.gz'),
        repeats_bowtie_unique = op.join(BASE, "runs", RUN_NAME, "bowtie_repeatome",
                                        "unique_reads",
                                        "by_locus_repeats.counts.gz"),
        repeats_bowtie_multi = op.join(BASE, "runs", RUN_NAME, "bowtie_repeatome",
                                        "multimappers",
                                        "by_locus_repeats.counts.gz"),
        truth = op.join(BASE, 'data', RUN_NAME, "truth.tsv.gz")
            
    params:
        rmd = 'postprocess_simulation.Rmd',
        run_name = RUN_NAME,
        threads = NTHREADS
    output:
        html = op.join(BASE, 'runs', RUN_NAME, 'sim_postproc.html')
    log:
        op.join(BASE, 'runs', RUN_NAME, 'sim_postproc.log')
    shell: """
        {Rscript} -e 'rmarkdown::render(\"{params.rmd}\", 
          output_file = \"{output.html}\", 
          params = list(truth = \"{input.truth}\", 
                     repeats_featurecounts_multi = \"{input.repeats_featurecounts_multi}\", 
                     repeats_featurecounts_unique = \"{input.repeats_featurecounts_unique}\",
                     repeats_only_multi = \"{input.repeats_only_multi}\", 
                     repeats_only_unique = \"{input.repeats_only_unique}\",
                     repeats_alevin_locus = \"{input.repeats_alevin_locus}\",
                     repeats_bowtie_unique = \"{input.repeats_bowtie_unique}\",
                     repeats_bowtie_multi = \"{input.repeats_bowtie_multi}\",
                     nthreads = {params.threads}))' &> {log}
        """

## run bowtie
   
## test run bowtie start
## to avoid explicitly handling the cell barcodes, we take the cellranger output as correct
##   (e.g. splitting the cells by CB from the cellranger standard output)


# multimappers with ifelse?
rule featurecounts_bowtie_repeats_repeatome_by_locus:
    input:
        # bam = op.join(BASE, "runs", RUN_NAME, "bowtie_repeatome", "{fastq}.bam"),
        flag_map_bowtie =  op.join(BASE, "runs", RUN_NAME, 'bowtie_repeatome', 'split_bowtie.flag'),
        gtf = op.join(BASE, 'annotation', op.basename(REP_GTF_URL)),
        fake_repeatome_gtf = op.join(BASE, 'annotation', 'fake_repeatome_from_' + op.splitext(op.basename(REP_GTF_URL))[0]) + '.gtf.gz'
    output:
        counts  = temp(op.join(BASE, "runs", RUN_NAME, "bowtie_repeatome", "{multimappers}",
                               "by_locus_repeats.counts")),
        gz_counts = op.join(BASE, "runs", RUN_NAME, "bowtie_repeatome", "{multimappers}",
                            "by_locus_repeats.counts.gz")
    params:
        bam_path = op.join(BASE, "runs", RUN_NAME, 'bowtie_repeatome'),
        processing_path = op.join(BASE, "runs", RUN_NAME, "{multimappers}", 'bowtie_repeatome')
    log :
        op.join(BASE, "runs", RUN_NAME, "bowtie_repeatome", "{multimappers}", "by_locus_featurecounts.log"),
    threads:
        NTHREADS
    run:
        if wildcards.multimappers == 'multimappers':
            shell("""
            echo multimappers allowed

            mkdir -p {params.processing_path}

            cd {params.processing_path}
            
            {FEATURECOUNTS} -T {threads} \
            -t exon \
            -g transcript_id \
            -a {input.fake_repeatome_gtf} \
            -o  {output.counts} \
            -M --fraction \
            {params.bam_path}/*bam  &> {log}

            {PIGZ} --keep  -p {threads} {output.counts}
         """)
        elif wildcards.multimappers == 'unique_reads':
            shell("""
            echo unique only

            mkdir -p {params.processing_path}

            cd {params.processing_path}
            
            {FEATURECOUNTS} -T {threads} \
            -t exon \
            -g transcript_id \
            -a {input.fake_repeatome_gtf} \
            -o  {output.counts} \
            {params.bam_path}/*bam  &> {log}

            {PIGZ} --keep  -p {threads} {output.counts}

            """)

rule generate_scte_index:
    output:
        idx = op.join(BASE,  'annotations', 'scTE', GENOME_SHORT, GENOME_SHORT + ".exclusive.idx")
    log:
        op.join(BASE,  'annotations', 'scTE', GENOME_SHORT, GENOME_SHORT + ".exclusive.log")
    params:
        path = op.join(BASE, 'annotations', 'scTE', GENOME_SHORT),
        genome = GENOME_SHORT
    threads:
        NTHREADS
    shell:
        """
        mkdir -p {params.path}
        cd {params.path}
        scTE_build -g {params.genome} &> {log} 
        """

rule run_scte_on_cellranger:
    input:
        bam = op.join(BASE, 'runs', RUN_NAME, 'cellranger_standard', 'outs',
                      'possorted_genome_bam.bam'),
        idx = op.join(BASE,  'annotations', 'scTE', GENOME_SHORT, GENOME_SHORT + ".exclusive.idx")
    output:
        tmp = temp(op.join(BASE, 'runs', RUN_NAME, 'scTE', 'scTE.out.csv')),
        counts = op.join(BASE, 'runs', RUN_NAME, 'scTE', 'scTE.out.csv.gz')
    params:
        path = op.join(BASE, 'runs', RUN_NAME, 'scTE'),
        out_fn = 'scTE.out'

    log:
        op.join(BASE, 'runs', RUN_NAME, 'scTE', 'scTE.log')        
    threads:
        NTHREADS
    shell:
        """
        mkdir -p {params.path}
        cd {params.path}

        scTE -i {input.bam} -o {params.out_fn} \
          -x {input.idx} \
          --hdf5 False \
          -CB CR \
          -UMI UR \
          --expect-cells 1000 \
          -p {threads} &> {log} 
        
        pigz -p {threads} --keep {output.tmp}
        """

rule create_shao_zumi_config:
    
    
rule run_shao_sample_zumi:
    input:
        ""
    output:
        ""
    shell:
        """
        zUMIs-master-TE.sh -y zUMIs_sample.yaml -d path_to_modified_zUMIs_package
        """

rule run_shao_quantify:
    input:
        ""
    output:
        ""
    shell:
        """
        scRNA_UMI_counting.R -f Sample_1_featurecount.sam.txt -r mm10_pc_exon_te_tx.saf -n Sample_1 -s 50 -m 1 -p 10
        """
        
