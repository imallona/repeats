rule index_cellranger_repeats:
    input:
       compressed_fa = op.join(config['base'], 'annotation', op.basename(config['genome_url'])),
       compressed_gtf = op.join(config['base'], 'annotation', op.basename(config['rep_gtf_url']))
    params:
       local_mem_gb = config['params']['local_mem_gb'],
       path =  op.join(config['base'], 'indices', 'cellranger', 'repeats_' + config['genome']),
       genome = 'repeats_' + config['genome'],
       cellranger = config['software']['cellranger'],
       pigz = config['software']['pigz']
    threads:
        config['params']['nthreads']
    output:
        uncompressed_gtf = temp(op.join(config['base'], 'annotation', op.splitext(op.basename(config['rep_gtf_url']))[0])),
        flag = op.join(config['base'], 'indices', 'cellranger', 'repeats_' + config['genome'], 'Log.out'),
        uncompressed_fa = temp(op.join(config['base'], 'annotation', op.splitext(op.basename(config['genome_url']))[0])),
        idx = op.join(config['base'], 'indices', 'cellranger', 'repeats_' + config['genome'],'repeats_' + config['genome'])
    shell:
       """ 
       mkdir -p {params.path}
       cd {params.path}
 
       {params.pigz} --decompress  -p {threads} --keep -c {input.compressed_fa} > \
        {output.uncompressed_fa}

       {params.pigz} --decompress  -p {threads} --keep -c {input.compressed_gtf} > \
         {output.uncompressed_gtf}
       
       {params.cellranger} mkref --genome {params.genome} \
       --fasta {output.uncompressed_fa} \
       --genes {output.uncompressed_gtf} \
       --nthreads {threads} \
       --memgb {params.local_mem_gb} 

       touch {output.flag}
       """
