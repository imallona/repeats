#!/usr/bin/env snakemake -s
"""
Generates the genes overlapping repeats, intergenic repeats, and genic repeats sets
"""

# rule get_repeats_not_overlapping_genes_gtf:
#     input:
#         repeats_gtf = config['repeats_gtf'],
#         genes_gtf = config['genes_gtf']
#     output:
#         gtf = op.join(config['base'], 'annotation', op.basename(config['rep_gtf_url']) + '_minus_' + op.basename(config['genes_gtf_url'])),
#         repeats_gtf_decomp = temp(op.join(config['base'], 'annotation', op.basename(config['rep_gtf_url'])) + '.tmp.gtf'),
#         genes_gtf_decomp =  temp(op.join(config['base'], 'annotation', op.basename(config['genes_gtf_url'])) + '.tmp.gtf'),
#         genesbed = temp(op.join(config['base'], 'annotation', op.basename(config['genes_gtf_url'])) + '.tmp.bed')
#     params:
#         gtf2bed = config['software']['gtf2bed']
#     threads:
#         workflow.cores
#     shell:
#         """

#         {params.pigz} --decompress --keep --stdout  {input.repeats_gtf} | \
#                sed 's/chr//g' > {output.repeats_gtf_decomp}
#         {params.pigz} --decompress --keep  --stdout  {input.genes_gtf} | \
#                sed 's/chr//g' > {output.genes_gtf_decomp}
    
#         # # # let's transform genes in bed and then use bedtools
#         # export PATH={params.gtf2bed}/..:$PATH

#         awk '{{ if ($0 ~ "transcript_id") print $0; else print $0" transcript_id "";"; }}' \
#            {output.genes_gtf_decomp} | {params.gtf2bed} - > {output.genesbed}

#         {params.bedtools} intersect -a {output.repeats_gtf_decomp} \
#           -b {output.genesbed} \
#           -v | {params.pigz} --stdout > {output.gtf}
#         """

